,qNL,true_SQL,qSQL,true_SQL_result,qSQL_result,equality
0,How many departments are led by heads who are not mentioned?,SELECT count(*) FROM department WHERE department_id NOT IN (SELECT department_id FROM management);,SELECT COUNT(*)  FROM department  WHERE Department_ID NOT IN (SELECT Department_ID FROM management);,[[11]],[[11]],TRUE
1,List the states where both the secretary of 'Treasury' department and the secretary of 'Homeland Security' were born.,SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Treasury' INTERSECT SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Homeland Security',SELECT h1.born_state FROM department d1 JOIN management m1 ON d1.Department_ID = m1.Department_ID JOIN head h1 ON m1.head_ID = h1.head_ID WHERE d1.Name = 'Treasury' INTERSECT SELECT h2.born_state FROM department d2 JOIN management m2 ON d2.Department_ID = m2.Department_ID JOIN head h2 ON m2.head_ID = h2.head_ID WHERE d2.Name = 'Homeland Security';,[['California']],[['California']],TRUE
2,"Which department has more than 1 head at a time? List the id, name and the number of heads.","SELECT T1.department_id ,  T1.name ,  count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id HAVING count(*)  >  1","SELECT department.Department_ID, department.Name, COUNT(management.head_ID) as Number_of_Heads FROM department JOIN management ON department.Department_ID = management.Department_ID GROUP BY department.Department_ID, department.Name HAVING COUNT(management.head_ID) > 1;","[[2, 'Treasury', 2]]","[[2, 'Treasury', 2]]",TRUE
3,Show the official names of the cities that have hosted more than one competition.,"SELECT T1.Official_Name
FROM city AS T1
JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID
GROUP BY T1.Official_Name, T2.Host_city_ID
HAVING COUNT(*) > 1;",SELECT Official_Name FROM city WHERE City_ID IN (     SELECT Host_city_ID     FROM farm_competition     GROUP BY Host_city_ID     HAVING COUNT(Competition_ID) > 1 );,[['Aroostook']],[['Aroostook']],TRUE
4,What are the official names of cities that have hosted more than one competition?,"SELECT T1.Official_Name
FROM city AS T1
JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID
GROUP BY T1.Official_Name, T2.Host_city_ID
HAVING COUNT(*) > 1;",SELECT Official_Name FROM city WHERE City_ID IN (     SELECT Host_city_ID     FROM farm_competition     GROUP BY Host_city_ID     HAVING COUNT(Competition_ID) > 1 );,[['Aroostook']],[['Aroostook']],TRUE
5,How many registed students do each course have? List course name and the number of their registered students?,"SELECT T3.course_name, count(T1.student_id) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T3.course_name;","SELECT Courses.course_name, COUNT(Student_Course_Registrations.student_id) AS number_of_students FROM Courses LEFT JOIN Student_Course_Registrations ON Courses.course_id = Student_Course_Registrations.course_id GROUP BY Courses.course_name;","[['statistics', 4], ['French', 2], ['data structure', 1], ['English', 2]]","[['Art history', 0], ['statistics', 4], ['French', 2], ['data structure', 1], ['English', 2], ['database', 0]]",FALSE
6,"For each course id, how many students are registered and what are the course names?","SELECT T3.course_name, count(T1.student_id) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T3.course_name;","SELECT      Courses.course_id,      Courses.course_name,      COUNT(Student_Course_Registrations.student_id) AS student_count FROM      Courses  LEFT JOIN      Student_Course_Registrations  ON      Courses.course_id = Student_Course_Registrations.course_id GROUP BY      Courses.course_id,      Courses.course_name;","[['statistics', 4], ['French', 2], ['data structure', 1], ['English', 2]]","[['301', 'statistics', 4], ['303', 'French', 2], ['302', 'English', 2], ['305', 'data structure', 1], ['304', 'database', 0], ['306', 'Art history', 0]]",FALSE
7,"Find the names of the users whose number of followers is greater than that of the user named ""Tyler Swift"".",SELECT T1.name FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T1.name  HAVING count(*)  >  (SELECT count(*) FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 WHERE T1.name  =  'Tyler Swift'),SELECT name  FROM user_profiles  WHERE followers > (     SELECT followers      FROM user_profiles      WHERE name = 'Tyler Swift' );,[['Iron Man']],[['None']],FALSE
8,Show names for all employees who do not have certificate of Boeing 737-800.,SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  'Boeing 737-800',SELECT name  FROM employee  WHERE eid NOT IN (     SELECT eid      FROM certificate      WHERE aid IN (         SELECT aid          FROM aircraft          WHERE name = 'Boeing 737-800'     ) );,"[['Joseph Thompson'], ['Karen Scott'], ['Angela Martinez'], ['Jennifer Thomas'], ['Patricia Jones'], ['Eric Cooper'], ['Linda Davis'], ['Chad Stewart'], ['Robert Brown'], ['William Moore'], ['Haywood Kelly'], ['Richard Jackson'], ['Donald King'], ['William Jones'], ['William Ward'], ['Michael Miller'], ['Lawrence Sperry'], ['David Anderson'], ['Elizabeth Taylor'], ['Barbara Wilson'], ['Milo Brooks'], ['Dorthy Lewis']]","[['Karen Scott'], ['Lawrence Sperry'], ['Michael Miller'], ['Patricia Jones'], ['Robert Brown'], ['Angela Martinez'], ['Joseph Thompson'], ['Linda Davis'], ['Richard Jackson'], ['William Ward'], ['Chad Stewart'], ['Michael Miller'], ['Dorthy Lewis'], ['Barbara Wilson'], ['William Moore'], ['Haywood Kelly'], ['Elizabeth Taylor'], ['David Anderson'], ['Jennifer Thomas'], ['Donald King'], ['Eric Cooper'], ['William Jones'], ['Milo Brooks']]",FALSE
9,What are the names of all employees who are not certified to fly Boeing 737-800s?,SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  'Boeing 737-800',SELECT name  FROM employee  WHERE eid NOT IN (     SELECT eid      FROM certificate      WHERE aid IN (         SELECT aid          FROM aircraft          WHERE name = 'Boeing 737-800'     ) );,"[['Joseph Thompson'], ['Karen Scott'], ['Angela Martinez'], ['Jennifer Thomas'], ['Patricia Jones'], ['Eric Cooper'], ['Linda Davis'], ['Chad Stewart'], ['Robert Brown'], ['William Moore'], ['Haywood Kelly'], ['Richard Jackson'], ['Donald King'], ['William Jones'], ['William Ward'], ['Michael Miller'], ['Lawrence Sperry'], ['David Anderson'], ['Elizabeth Taylor'], ['Barbara Wilson'], ['Milo Brooks'], ['Dorthy Lewis']]","[['Karen Scott'], ['Lawrence Sperry'], ['Michael Miller'], ['Patricia Jones'], ['Robert Brown'], ['Angela Martinez'], ['Joseph Thompson'], ['Linda Davis'], ['Richard Jackson'], ['William Ward'], ['Chad Stewart'], ['Michael Miller'], ['Dorthy Lewis'], ['Barbara Wilson'], ['William Moore'], ['Haywood Kelly'], ['Elizabeth Taylor'], ['David Anderson'], ['Jennifer Thomas'], ['Donald King'], ['Eric Cooper'], ['William Jones'], ['Milo Brooks']]",FALSE
10,What is the salary and name of the employee who has the most number of certificates on aircrafts with distance more than 5000?,SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1,"SELECT e.name, e.salary FROM employee e JOIN certificate c ON e.eid = c.eid JOIN aircraft a ON c.aid = a.aid WHERE a.distance > 5000 GROUP BY e.eid ORDER BY COUNT(*) DESC LIMIT 1;",[['Lisa Walker']],"[['Lisa Walker', Decimal('256481.00')]]",FALSE
11,What is the salaray and name of the employee with the most certificates to fly planes more than 5000?,SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1,"SELECT e.name, e.salary FROM employee e WHERE e.eid = (     SELECT c.eid     FROM certificate c     JOIN aircraft a ON c.aid = a.aid     WHERE a.distance > 5000     GROUP BY c.eid     ORDER BY COUNT(*) DESC     LIMIT 1 );",[['Lisa Walker']],"[['Lisa Walker', Decimal('256481.00')]]",FALSE
12,Find the last name and age of the student who has allergy to both milk and cat.,"SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  'Milk' INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  'Cat')","SELECT Student.LName, Student.Age FROM Student JOIN Has_Allergy ON Student.StuID = Has_Allergy.StuID WHERE Has_Allergy.Allergy IN ('milk', 'cat') GROUP BY Student.StuID HAVING COUNT(DISTINCT Has_Allergy.Allergy) = 2;","[['Apap', 18], ['Lee', 17]]",[['None']],FALSE
13,What are the last names and ages of the students who are allergic to milk and cat?,"SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  'Milk' INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  'Cat')","SELECT Student.LName, Student.Age FROM Student JOIN Has_Allergy ON Student.StuID = Has_Allergy.StuID WHERE Has_Allergy.Allergy IN ('milk', 'cat');","[['Apap', 18], ['Lee', 17]]",[['None']],FALSE
14,Find the first name and gender of the student who has allergy to milk but not cat.,"SELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  'Milk' EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  'Cat')","SELECT Student.Fname, Student.Sex FROM Student JOIN Has_Allergy ON Student.StuID = Has_Allergy.StuID WHERE Has_Allergy.Allergy = 'milk' AND Student.StuID NOT IN (     SELECT StuID FROM Has_Allergy WHERE Allergy = 'cat' );","[['Mark', 'M']]",[['None']],FALSE
15,What are the first name and gender of the students who have allergy to milk but can put up with cats?,"SELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  'Milk' EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  'Cat')","SELECT Student.Fname, Student.Sex FROM Student JOIN Has_Allergy ON Student.StuID = Has_Allergy.StuID JOIN Allergy_Type ON Has_Allergy.Allergy = Allergy_Type.Allergy WHERE Allergy_Type.Allergy = 'milk' AND Allergy_Type.Allergy != 'cats';","[['Mark', 'M']]",[['None']],FALSE
16,Find the average age of the students who have allergies with food and animal types.,SELECT avg(age) FROM Student WHERE StuID IN ( SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  'food' INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  'animal'),"SELECT AVG(Student.Age)  FROM Student  JOIN Has_Allergy ON Student.StuID = Has_Allergy.StuID  JOIN Allergy_Type ON Has_Allergy.Allergy = Allergy_Type.Allergy  WHERE Allergy_Type.AllergyType IN ('food', 'animal');",[[Decimal('18.3333333333333333')]],[[Decimal('18.3611111111111111')]],FALSE
17,How old are the students with allergies to food and animal types on average?,SELECT avg(age) FROM Student WHERE StuID IN ( SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  'food' INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  'animal'),"SELECT AVG(Student.Age)  FROM Student  JOIN Has_Allergy ON Student.StuID = Has_Allergy.StuID  JOIN Allergy_Type ON Has_Allergy.Allergy = Allergy_Type.Allergy  WHERE Allergy_Type.AllergyType IN ('food', 'animal');",[[Decimal('18.3333333333333333')]],[[Decimal('18.3611111111111111')]],FALSE
18,What are all the policy types of the customer that has the most policies listed?,SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1),SELECT ap.policy_type_code FROM Available_Policies ap JOIN Customers_Policies cp ON ap.Policy_ID = cp.Policy_ID WHERE cp.Customer_ID = (     SELECT Customer_ID     FROM Customers_Policies     GROUP BY Customer_ID     ORDER BY COUNT(Policy_ID) DESC     LIMIT 1 );,"[['Mortgage Insurance            '], ['Property Insurance            ']]","[['Mortgage Insurance            '], ['Mortgage Insurance            '], ['Property Insurance            ']]",FALSE
19,Show the medicine names and trade names that cannot interact with the enzyme with product 'Heme'.,"SELECT name ,  trade_name FROM medicine EXCEPT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id JOIN enzyme AS T3 ON T3.id  =  T2.enzyme_id WHERE T3.product  =  'Protoporphyrinogen IX'","SELECT m.name, m.Trade_Name FROM medicine m WHERE m.id NOT IN (     SELECT mei.medicine_id     FROM medicine_enzyme_interaction mei     JOIN enzyme e ON mei.enzyme_id = e.id     WHERE e.Product = 'Heme' );","[['Aripiprazole', 'Abilify'], ['Olanzapine', 'Zyprexa'], ['Clozapine', 'Clozaril'], ['Remoxipride', 'Roxiam'], ['Blonanserin', 'Lonasen'], ['Asenapine', 'Saphris'], ['Lurasidone', 'Latuda'], ['Carpipramine', 'Prazinil'], ['Perospirone', 'Lullan'], ['Iloperidone', 'Fanapt'], ['Paliperidone', 'Invega'], ['Sertindole', 'Serdolect'], ['Melperone', 'Buronil'], ['Sulpiride', 'Sulpirid'], ['Risperidone', 'Risperdal'], ['Amisulpride', 'Solian'], ['Zotepine', 'Nipolept'], ['Clocapramine', 'Clofekton'], ['Mosapramine', 'Cremin'], ['Quetiapine', 'Seroquel']]","[['Amisulpride', 'Solian'], ['Aripiprazole', 'Abilify'], ['Asenapine', 'Saphris'], ['Blonanserin', 'Lonasen'], ['Carpipramine', 'Prazinil'], ['Clocapramine', 'Clofekton'], ['Clozapine', 'Clozaril'], ['Iloperidone', 'Fanapt'], ['Lurasidone', 'Latuda'], ['Melperone', 'Buronil'], ['Mosapramine', 'Cremin'], ['Olanzapine', 'Zyprexa'], ['Paliperidone', 'Invega'], ['Perospirone', 'Lullan'], ['Quetiapine', 'Seroquel'], ['Remoxipride', 'Roxiam'], ['Risperidone', 'Risperdal'], ['Sertindole', 'Serdolect'], ['Sulpiride', 'Sulpirid'], ['Ziprasidone', 'Geodon'], ['Zotepine', 'Nipolept']]",FALSE
20,What are the medicine and trade names that cannot interact with the enzyme with the product 'Heme'?,"SELECT name ,  trade_name FROM medicine EXCEPT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id JOIN enzyme AS T3 ON T3.id  =  T2.enzyme_id WHERE T3.product  =  'Protoporphyrinogen IX'","SELECT m.name, m.Trade_Name FROM medicine m WHERE m.id NOT IN (     SELECT mei.medicine_id     FROM medicine_enzyme_interaction mei     JOIN enzyme e ON mei.enzyme_id = e.id     WHERE e.Product = 'Heme' );","[['Aripiprazole', 'Abilify'], ['Olanzapine', 'Zyprexa'], ['Clozapine', 'Clozaril'], ['Remoxipride', 'Roxiam'], ['Blonanserin', 'Lonasen'], ['Asenapine', 'Saphris'], ['Lurasidone', 'Latuda'], ['Carpipramine', 'Prazinil'], ['Perospirone', 'Lullan'], ['Iloperidone', 'Fanapt'], ['Paliperidone', 'Invega'], ['Sertindole', 'Serdolect'], ['Melperone', 'Buronil'], ['Sulpiride', 'Sulpirid'], ['Risperidone', 'Risperdal'], ['Amisulpride', 'Solian'], ['Zotepine', 'Nipolept'], ['Clocapramine', 'Clofekton'], ['Mosapramine', 'Cremin'], ['Quetiapine', 'Seroquel']]","[['Amisulpride', 'Solian'], ['Aripiprazole', 'Abilify'], ['Asenapine', 'Saphris'], ['Blonanserin', 'Lonasen'], ['Carpipramine', 'Prazinil'], ['Clocapramine', 'Clofekton'], ['Clozapine', 'Clozaril'], ['Iloperidone', 'Fanapt'], ['Lurasidone', 'Latuda'], ['Melperone', 'Buronil'], ['Mosapramine', 'Cremin'], ['Olanzapine', 'Zyprexa'], ['Paliperidone', 'Invega'], ['Perospirone', 'Lullan'], ['Quetiapine', 'Seroquel'], ['Remoxipride', 'Roxiam'], ['Risperidone', 'Risperdal'], ['Sertindole', 'Serdolect'], ['Sulpiride', 'Sulpirid'], ['Ziprasidone', 'Geodon'], ['Zotepine', 'Nipolept']]",FALSE
21,Find the pixels of the screen modes that are used by both phones with full accreditation types and phones with Provisional accreditation types.,SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Provisional' INTERSECT SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Full',"SELECT DISTINCT s.Pixels FROM screen_mode AS s JOIN phone AS p ON s.Graphics_mode = p.screen_mode WHERE p.Accreditation_type IN ('Full', 'Provisional');","[['640 _ 200'], ['160 _ 256'], ['320 _ 256']]","[['160 _ 256'], ['320 _ 200'], ['320 _ 256'], ['640 _ 200']]",FALSE
22,What are the names of countries that have both players with position forward and players with position defender?,SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  'Forward' INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  'Defender',SELECT DISTINCT country.Country_name FROM country JOIN match_season ON country.Country_id = match_season.Country WHERE match_season.Position = 'forward' AND country.Country_id IN (     SELECT country.Country_id     FROM country     JOIN match_season ON country.Country_id = match_season.Country     WHERE match_season.Position = 'defender' );,[['United States']],[['None']],FALSE
23,"Return the names of countries that have players that play the Forward position, as well as players who play the Defender position.",SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  'Forward' INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  'Defender',"SELECT DISTINCT country.Country_name FROM country JOIN match_season ON country.Country_id = match_season.Country WHERE match_season.Position IN ('Forward', 'Defender');",[['United States']],"[['Indonesia'], ['Ireland'], ['Isle of Man'], ['United States']]",FALSE
24,"Which apartments have bookings with both status codes ""Provisional"" and ""Confirmed""? Give me the apartment numbers.",SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  'Confirmed' INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  'Provisional',"SELECT DISTINCT a.apt_number FROM Apartments a JOIN Apartment_Bookings ab ON a.apt_id = ab.apt_id WHERE ab.booking_status_code IN ('Provisional', 'Confirmed') GROUP BY a.apt_id, a.apt_number HAVING COUNT(DISTINCT ab.booking_status_code) = 2;","[['Apt. 859  '], ['Suite 693 '], ['Suite 749 ']]","[['Apt. 859  '], ['Suite 693 '], ['Suite 749 ']]",TRUE
25,Show the apartment numbers of apartments with unit status availability of both 0 and 1.,"SELECT T1.apt_number 
FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id 
WHERE T2.available_yn  =  false  
INTERSECT 
SELECT T1.apt_number 
FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id 
WHERE T2.available_yn  =  true",SELECT DISTINCT a.apt_number FROM Apartments a JOIN View_Unit_Status vus ON a.apt_id = vus.apt_id WHERE a.apt_id IN (   SELECT apt_id   FROM View_Unit_Status   WHERE available_yn = TRUE ) AND a.apt_id IN (   SELECT apt_id   FROM View_Unit_Status   WHERE available_yn = FALSE );,"[['Apt. 411  '], ['Apt. 837  ']]","[['Apt. 411  '], ['Apt. 837  ']]",TRUE
26,What are the id and name of the stadium where the most injury accidents happened?,"SELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1","SELECT s.id, s.name FROM stadium s JOIN game g ON s.id = g.stadium_id JOIN injury_accident ia ON g.id = ia.game_id GROUP BY s.id ORDER BY COUNT(*) DESC LIMIT 1;","[[10, 'Louisiana Superdome']]","[[10, 'Louisiana Superdome']]",TRUE
27,Find the id and name of the stadium where the largest number of injury accidents occurred.,"SELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1","SELECT stadium.id, stadium.name FROM stadium JOIN game ON stadium.id = game.stadium_id JOIN injury_accident ON game.id = injury_accident.game_id GROUP BY stadium.id ORDER BY COUNT(injury_accident.id) DESC LIMIT 1;","[[10, 'Louisiana Superdome']]","[[10, 'Louisiana Superdome']]",TRUE
28,List the name of the stadium where both the player 'Walter Samuel' and the player 'Thiago Motta' got injured.,SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Walter Samuel' INTERSECT SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Thiago Motta',"SELECT DISTINCT s.name FROM stadium s JOIN game g ON s.id = g.stadium_id JOIN injury_accident ia ON g.id = ia.game_id WHERE ia.Player IN ('Walter Samuel', 'Thiago Motta') GROUP BY s.name HAVING COUNT(DISTINCT ia.Player) = 2;",[['Bank of America Stadium']],[['Bank of America Stadium']],TRUE
29,Find the total number of students and total number of instructors for each department.,"SELECT count(DISTINCT T2.id) ,  count(DISTINCT T3.id) ,  T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name  =  T2.dept_name JOIN instructor AS T3 ON T1.dept_name  =  T3.dept_name GROUP BY T3.dept_name","SELECT department.dept_name, COUNT(DISTINCT student.ID) AS total_students, COUNT(DISTINCT instructor.ID) AS total_instructors FROM department LEFT JOIN student ON department.dept_name = student.dept_name LEFT JOIN instructor ON department.dept_name = instructor.dept_name GROUP BY department.dept_name;","[[1, 2, 'Biology'], [1, 4, 'Cybernetics'], [1, 4, 'English'], [1, 1, 'Finance'], [1, 6, 'Statistics']]","[['Accounting', 0, 4], ['Astronomy', 0, 1], ['Athletics', 0, 5], ['Biology', 1, 2], ['Civil Eng.', 1, 0], ['Comp. Sci.', 0, 2], ['Cybernetics', 1, 4], ['Elec. Eng.', 0, 4], ['English', 1, 4], ['Finance', 1, 1], ['Geology', 0, 1], ['History', 2, 0], ['Languages', 0, 3], ['Marketing', 0, 4], ['Math', 2, 0], ['Mech. Eng.', 0, 2], ['Physics', 0, 2], ['Pol. Sci.', 0, 3], ['Psychology', 0, 2], ['Statistics', 1, 6]]",FALSE
30,How many students and instructors are in each department?,"SELECT count(DISTINCT T2.id) ,  count(DISTINCT T3.id) ,  T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name  =  T2.dept_name JOIN instructor AS T3 ON T1.dept_name  =  T3.dept_name GROUP BY T3.dept_name","SELECT department.dept_name, COUNT(DISTINCT student.ID) AS num_students, COUNT(DISTINCT instructor.ID) AS num_instructors FROM department LEFT JOIN student ON department.dept_name = student.dept_name LEFT JOIN instructor ON department.dept_name = instructor.dept_name GROUP BY department.dept_name;","[[1, 2, 'Biology'], [1, 4, 'Cybernetics'], [1, 4, 'English'], [1, 1, 'Finance'], [1, 6, 'Statistics']]","[['Accounting', 0, 4], ['Astronomy', 0, 1], ['Athletics', 0, 5], ['Biology', 1, 2], ['Civil Eng.', 1, 0], ['Comp. Sci.', 0, 2], ['Cybernetics', 1, 4], ['Elec. Eng.', 0, 4], ['English', 1, 4], ['Finance', 1, 1], ['Geology', 0, 1], ['History', 2, 0], ['Languages', 0, 3], ['Marketing', 0, 4], ['Math', 2, 0], ['Mech. Eng.', 0, 2], ['Physics', 0, 2], ['Pol. Sci.', 0, 3], ['Psychology', 0, 2], ['Statistics', 1, 6]]",FALSE
31,Show all product names and the number of customers having an order on each product.,"SELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name","SELECT P.product_name, COUNT(DISTINCT O.customer_id) AS number_of_customers FROM Products P JOIN Order_Items OI ON P.product_id = OI.product_id JOIN Orders O ON OI.order_id = O.order_id GROUP BY P.product_name;","[['TV', 1], ['Harry Potter 3', 4], ['Harry Potter 2', 1], ['Arts', 2], ['Learning English', 1], ['Harry Potter 4', 1], ['Fans', 1], ['Chocolate', 1], ['Hard Drive', 2], ['Beer Menus', 1]]","[['Arts', 2], ['Beer Menus', 1], ['Chocolate', 1], ['Fans', 1], ['Hard Drive', 2], ['Harry Potter 2', 1], ['Harry Potter 3', 3], ['Harry Potter 4', 1], ['Learning English', 1], ['TV', 1]]",FALSE
32,Show the church names for the weddings of all people older than 30.,SELECT T4.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id  =  T2.people_id JOIN people AS T3 ON T1.female_id  =  T3.people_id JOIN church AS T4 ON T4.church_id  =  T1.church_id WHERE T2.age  >  30 OR T3.age  >  30,SELECT church.Name  FROM church  JOIN wedding ON church.Church_ID = wedding.Church_ID  JOIN people ON wedding.Male_ID = people.People_ID OR wedding.Female_ID = people.People_ID  WHERE people.Age > 30;,"[['Pure Church of Christ'], ['Church of Christ (Parrishite)']]","[['Pure Church of Christ'], ['Pure Church of Christ'], ['Church of Christ (Parrishite)'], ['Church of Christ (Parrishite)']]",FALSE
33,Return the names of artists and the themes of their exhibitions that had a ticket price higher than average.,"SELECT T1.theme ,  T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.ticket_price  >  (SELECT avg(ticket_price) FROM exhibition)","SELECT artist.Name, exhibition.Theme FROM artist JOIN exhibition ON artist.Artist_ID = exhibition.Artist_ID WHERE exhibition.Ticket_Price > (SELECT AVG(Ticket_Price) FROM exhibition);","[['Santa Claus', 'Vijay Singh'], ['Christmas stocking', 'John Daly'], ['Spring', 'Nick Price']]","[['Vijay Singh', 'Santa Claus'], ['John Daly', 'Christmas stocking'], ['Nick Price', 'Spring']]",FALSE
34,Show all artist names with an average exhibition attendance over 200.,SELECT T3.name FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id JOIN artist AS T3 ON T3.artist_id  =  T2.artist_id GROUP BY T3.artist_id HAVING avg(T1.attendance)  >  200,SELECT artist.Name FROM artist JOIN exhibition ON artist.Artist_ID = exhibition.Artist_ID JOIN exhibition_record ON exhibition.Exhibition_ID = exhibition_record.Exhibition_ID GROUP BY artist.Name HAVING AVG(exhibition_record.Attendance) > 200;,"[['Jeff Sluman'], ['Nick Price'], ['John Daly'], ['Vijay Singh']]","[['Jeff Sluman'], ['John Daly'], ['Vijay Singh'], ['Nick Price']]",FALSE
35,Find the names of items whose rank is higher than 3 and whose average rating is above 5.,"SELECT T1.title 
FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id 
WHERE T2.rank  >  3 
INTERSECT 
SELECT T1.title 
FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id 
GROUP BY T1.title 
HAVING avg(T2.rating)  >  5",SELECT item.title FROM item JOIN review ON item.i_id = review.i_id WHERE review.rank > 3 GROUP BY item.title HAVING AVG(review.rating) > 5;,"[['cup'], ['comb']]","[['comb'], ['cup']]",FALSE
36,"Find the names of accounts whose checking balance is above the average checking balance, but savings balance is below the average savings balance.",SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM checking) INTERSECT SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM savings),SELECT A.name FROM ACCOUNTS A JOIN CHECKING C ON A.custid = C.custid JOIN SAVINGS S ON A.custid = S.custid WHERE C.balance > (SELECT AVG(balance) FROM CHECKING)  AND S.balance < (SELECT AVG(balance) FROM SAVINGS);,"[['Weeks'], ['Granger'], ['Brown']]","[['Brown'], ['Weeks'], ['Granger']]",FALSE
37,Find the checking balance of the accounts whose savings balance is higher than the average savings balance.,SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings)),SELECT C.balance FROM CHECKING C JOIN SAVINGS S ON C.custid = S.custid WHERE S.balance > (SELECT AVG(balance) FROM SAVINGS);,[[2000.0]],[[2000.0]],TRUE
38,Find the names and total checking and savings balances of accounts whose savings balance is higher than the average savings balance.,"SELECT T1.name ,  T2.balance + T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  >  (SELECT avg(balance) FROM savings)","SELECT A.name, C.balance + S.balance AS total_balance FROM ACCOUNTS A JOIN CHECKING C ON A.custid = C.custid JOIN SAVINGS S ON A.custid = S.custid WHERE S.balance > (SELECT AVG(balance) FROM SAVINGS);","[['Wang', 1000001999.0]]","[['Wang', 1000001999.0]]",TRUE
39,"Find the name, checking balance and savings balance of all accounts in the bank sorted by their total checking and savings balance in descending order.","SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC","SELECT A.name, C.balance AS checking_balance, S.balance AS savings_balance FROM ACCOUNTS A JOIN CHECKING C ON A.custid = C.custid JOIN SAVINGS S ON A.custid = S.custid ORDER BY (C.balance + S.balance) DESC;","[[2000.0, 999999999.0, 'Wang'], [3000.0, 230000.0, ""O'mahony""], [10000.0, 200000.0, 'Brown'], [10000.0, 80000.0, 'Granger'], [7000.0, 60.0, 'Weeks'], [77.0, 240.0, 'Porter']]","[['Wang', 2000.0, 999999999.0], [""O'mahony"", 3000.0, 230000.0], ['Brown', 10000.0, 200000.0], ['Granger', 10000.0, 80000.0], ['Weeks', 7000.0, 60.0], ['Porter', 77.0, 240.0]]",FALSE
40,List the names of the browser that are compatible with both 'CACHEbox' and 'Fasterfox'.,SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T1.name  =  'CACHEbox' INTERSECT SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T1.name  =  'Fasterfox',"SELECT b.name FROM browser b JOIN accelerator_compatible_browser acb ON b.id = acb.browser_id JOIN Web_client_accelerator wca ON acb.accelerator_id = wca.id WHERE wca.name IN ('CACHEbox', 'Fasterfox') GROUP BY b.name HAVING COUNT(DISTINCT wca.name) = 2;","[['Firefox'], ['Internet Explorer']]","[['Firefox'], ['Internet Explorer']]",TRUE
41,Show the names of schools with a total budget amount greater than 100 or a total endowment greater than 10.,SELECT T2.school_name FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN endowment AS T3 ON T2.school_id  =  T3.school_id GROUP BY T2.school_name HAVING sum(T1.budgeted)  >  100 OR sum(T3.amount)  >  10,SELECT School_name  FROM School  WHERE School_id IN (   SELECT School_id    FROM budget    WHERE Budgeted > 100 )  OR School_id IN (   SELECT School_id    FROM endowment    WHERE amount > 10 );,"[['Culver Community'], ['Knox Community'], ['Bremen'], ['Glenn'], ['Jimtown']]","[['Bremen'], ['Culver Community'], ['Glenn'], ['Jimtown'], ['Knox Community']]",FALSE
42,Find the number of schools that have more than one donator whose donation amount is less than 8.5.,SELECT count(*) FROM (SELECT school_id FROM endowment WHERE amount  >  8.5 GROUP BY school_id HAVING count(*)  >  1) as T,SELECT COUNT(DISTINCT School_id)  FROM endowment  WHERE School_id IN (   SELECT School_id    FROM endowment    WHERE amount < 8.5    GROUP BY School_id    HAVING COUNT(donator_name) > 1 );,[[2]],[[0]],FALSE
43,Show the number of buildings with a height above the average or a number of floors above the average.,SELECT count(*) FROM building WHERE height_feet  >  (SELECT avg(height_feet) FROM building) OR floors  >  (SELECT avg(floors) FROM building),SELECT COUNT(*)  FROM building  WHERE Height_feet > (SELECT AVG(Height_feet) FROM building)  OR Floors > (SELECT AVG(Floors) FROM building);,[[4]],[[4]],TRUE
44,"Show the names of phones that have total number of stocks bigger than 2000, in descending order of the total number of stocks.",SELECT T2.Name FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID  =  T2.Phone_ID GROUP BY T2.Name HAVING sum(T1.Num_of_stock)  >=  2000 ORDER BY sum(T1.Num_of_stock) DESC,"SELECT p.Name, SUM(pm.Num_of_stock) as Total_Stock FROM phone p JOIN phone_market pm ON p.Phone_ID = pm.Phone_ID GROUP BY p.Name HAVING SUM(pm.Num_of_stock) > 2000 ORDER BY Total_Stock DESC;","[['IPhone 6s'], ['IPhone 5s'], ['IPhone X']]","[['IPhone 6s', 4324], ['IPhone 5s', 2914], ['IPhone X', 2540]]",FALSE
45,Show all member names who are not in charge of any event.,SELECT member_name FROM member EXCEPT SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id,SELECT Member_Name  FROM member  WHERE Member_ID NOT IN (SELECT Member_in_charge_ID FROM party_events);,"[['Hon Bruce Baird'], ['Mark Baker'], ['Hon Tony Abbott'], ['Peter Andren'], ['Hon Kim Beazley'], ['Hon Kevin Andrews'], ['Hon Arch Bevis'], ['Hon Fran Bailey']]","[['Hon Tony Abbott'], ['Peter Andren'], ['Hon Kevin Andrews'], ['Hon Fran Bailey'], ['Hon Bruce Baird'], ['Mark Baker'], ['Hon Kim Beazley'], ['Hon Arch Bevis']]",FALSE
46,Which employee has showed up in most circulation history documents. List the employee's name and the number of drafts and copies.,"SELECT Employees.employee_name, count(*)
FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id 
GROUP BY Employees.employee_name, Circulation_History.draft_number , Circulation_History.copy_number
ORDER BY count(*) 
DESC LIMIT 1;","SELECT E.employee_name, COUNT(*) AS number_of_drafts_and_copies FROM Employees E JOIN Circulation_History CH ON E.employee_id = CH.employee_id GROUP BY E.employee_name ORDER BY number_of_drafts_and_copies DESC LIMIT 1;","[['Kenyon', 1]]","[['Kenyon', 2]]",FALSE
47,Which service id and type has the least number of participants?,"SELECT T3.service_id ,  T4.Service_Type_Code 
FROM participants AS T1 
JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID 
JOIN EVENTS AS T3 ON T2.Event_ID   =  T3.Event_ID 
JOIN services AS T4 ON T3.service_id  =  T4.service_id 
GROUP BY T3.service_id, T4.Service_Type_Code  
ORDER BY count(*) ASC LIMIT 1","SELECT S.Service_ID, S.Service_Type_Code FROM Services S JOIN Events E ON S.Service_ID = E.Service_ID JOIN Participants_in_Events PE ON E.Event_ID = PE.Event_ID GROUP BY S.Service_ID, S.Service_Type_Code ORDER BY COUNT(PE.Participant_ID) ASC LIMIT 1;","[[6, 'Birth Proof    ']]","[[6, 'Birth Proof    ']]",TRUE
48,"Find the name of the campuses that is in Northridge, Los Angeles or in San Francisco, San Francisco.",SELECT campus FROM campuses WHERE LOCATION  =  'Northridge' AND county  =  'Los Angeles' UNION SELECT campus FROM campuses WHERE LOCATION  =  'San Francisco' AND county  =  'San Francisco',"SELECT Campus FROM Campuses WHERE Location IN ('Northridge, Los Angeles', 'San Francisco, San Francisco');","[['California State University-Northridge'], ['San Francisco State University']]",[['None']],FALSE
49,Find the names of the campus which has more faculties in 2002 than every campus in Orange county.,SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND faculty  >  (SELECT max(faculty) FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND T1.county  =  'Orange'),"SELECT C.Campus FROM Campuses C, faculty F WHERE C.Id = F.Campus AND F.Year = 2002 AND F.Faculty > ALL (     SELECT F1.Faculty     FROM faculty F1, Campuses C1     WHERE F1.Campus = C1.Id AND C1.County = 'Orange' AND F1.Year = 2002 );",[['Long Beach State University']],[['Long Beach State University']],TRUE
50,What are the titles and directors of the movies whose star is greater than the average stars of the movies directed by James Cameron?,"SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  'James Cameron')","SELECT M.TITLE, M.DIRECTOR  FROM MOVIE M  JOIN RATING R ON M.MID = R.MID  WHERE R.STARS > (     SELECT AVG(R.STARS)      FROM MOVIE M      JOIN RATING R ON M.MID = R.MID      WHERE M.DIRECTOR = 'James Cameron' );","[['Snow White', None], ['Avatar', 'James Cameron']]","[['Snow White', None], ['Avatar', 'James Cameron']]",TRUE
51,Find the average rating star for each movie that are not reviewed by Brittany Harris.,"SELECT mID ,  avg(stars) FROM Rating WHERE mID NOT IN (SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  'Brittany Harris') GROUP BY mID","SELECT MOVIE.TITLE, AVG(Rating.stars)  FROM MOVIE  JOIN Rating ON MOVIE.MID = Rating.mID  WHERE Rating.rID NOT IN (SELECT rID FROM Reviewer WHERE name = 'Brittany Harris')  GROUP BY MOVIE.TITLE;","[[101, Decimal('3.0000000000000000')], [104, Decimal('2.5000000000000000')], [107, Decimal('4.0000000000000000')], [106, Decimal('4.5000000000000000')]]","[['Raiders of the Lost Ark', Decimal('4.0000000000000000')], ['Avatar', Decimal('4.0000000000000000')], ['Gone with the Wind', Decimal('3.0000000000000000')], ['Snow White', Decimal('4.5000000000000000')], ['E.T.', Decimal('2.5000000000000000')], ['The Sound of Music', Decimal('3.0000000000000000')]]",FALSE
52,Show the name of cities in the county that has the largest number of police officers.,SELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1),SELECT city.Name FROM city JOIN county_public_safety ON city.County_ID = county_public_safety.County_ID WHERE county_public_safety.County_ID = (     SELECT County_ID     FROM county_public_safety     ORDER BY Police_officers DESC     LIMIT 1 );,"[['Aguas Buenas'], ['Aibonito']]","[['Aguas Buenas'], ['Aibonito']]",TRUE
53,What is the cmi cross reference id that is related to at least one council tax entry? List the cross reference id and source system code.,"SELECT T1.cmi_cross_ref_id ,  T1.source_system_code FROM CMI_Cross_References AS T1 JOIN Council_Tax AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id GROUP BY T1.cmi_cross_ref_id HAVING count(*)  >=  1","SELECT CMI_Cross_References.cmi_cross_ref_id, CMI_Cross_References.source_system_code FROM CMI_Cross_References JOIN Council_Tax ON CMI_Cross_References.cmi_cross_ref_id = Council_Tax.cmi_cross_ref_id GROUP BY CMI_Cross_References.cmi_cross_ref_id, CMI_Cross_References.source_system_code;","[[101, 'Tax            '], [103, 'Tax            '], [104, 'Tax            '], [105, 'Tax            '], [106, 'Tax            '], [102, 'Tax            ']]","[[101, 'Tax            '], [103, 'Tax            '], [104, 'Tax            '], [105, 'Tax            '], [106, 'Tax            '], [102, 'Tax            ']]",TRUE
54,"How many business rates are related to each cmi cross reference? List cross reference id, master customer id and the n","SELECT T2.cmi_cross_ref_id ,  T2.master_customer_id ,  count(*) FROM Business_Rates AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id GROUP BY T2.cmi_cross_ref_id","SELECT CMI_Cross_References.cmi_cross_ref_id, CMI_Cross_References.master_customer_id, COUNT(Business_Rates.business_rates_id) AS n FROM CMI_Cross_References LEFT JOIN Business_Rates ON CMI_Cross_References.cmi_cross_ref_id = Business_Rates.cmi_cross_ref_id GROUP BY CMI_Cross_References.cmi_cross_ref_id, CMI_Cross_References.master_customer_id;","[[95, 2, 1], [99, 9, 1], [49, 1, 1]]","[[4, 5, 0], [2, 4, 0], [75, 5, 0], [101, 2, 0], [59, 1, 0], [95, 2, 1], [99, 9, 1], [41, 5, 0], [103, 9, 0], [48, 5, 0], [81, 9, 0], [104, 2, 0], [105, 2, 0], [106, 1, 0], [8, 1, 0], [65, 9, 0], [77, 4, 0], [83, 3, 0], [102, 4, 0], [100, 4, 0], [49, 1, 1]]",FALSE
55,What is the total number of deaths and damage for all storms with a max speed greater than the average?,"SELECT sum(number_deaths) ,  sum(damage_millions_USD) FROM storm WHERE max_speed  >  (SELECT avg(max_speed) FROM storm)","SELECT SUM(Number_Deaths) AS Total_Deaths, SUM(Damage_millions_USD) AS Total_Damage FROM storm WHERE Max_speed > (SELECT AVG(Max_speed) FROM storm);","[[5.0, 40.529]]","[[5.0, 40.529]]",TRUE
56,Show storm name with at least two regions and 10 cities affected.,SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING sum(T2.number_city_affected)  >=  10,SELECT s.Name FROM storm s JOIN (   SELECT ar.Storm_ID   FROM affected_region ar   WHERE ar.Number_city_affected >= 10   GROUP BY ar.Storm_ID   HAVING COUNT(ar.Region_id) >= 2 ) AS subq ON s.Storm_ID = subq.Storm_ID;,"[['Five'], ['One']]","[['One'], ['Five']]",FALSE
57,Show all storm names except for those with at least two affected regions.,SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2,SELECT Name  FROM storm  WHERE Storm_ID NOT IN (   SELECT Storm_ID    FROM affected_region    GROUP BY Storm_ID    HAVING COUNT(Region_id) >= 2 );,"[['Two'], ['Three'], ['Eight'], ['Nine'], ['Six'], ['Seven'], ['Four'], ['9 cyclones']]","[['Two'], ['Three'], ['Four'], ['Six'], ['Seven'], ['Eight'], ['Nine'], ['9 cyclones']]",FALSE
58,Find the name of the storm that affected both Afghanistan and Albania regions.,SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Afghanistan' INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Albania',"SELECT s.Name FROM storm s JOIN affected_region ar ON s.Storm_ID = ar.Storm_ID JOIN region r ON ar.Region_id = r.Region_id WHERE r.Region_name IN ('Afghanistan', 'Albania') GROUP BY s.Name HAVING COUNT(DISTINCT r.Region_name) = 2;",[['One']],[['One']],TRUE
59,Show the nations that have both journalists with more than 10 years of working and journalists with less than 3 years of working.,SELECT Nationality FROM journalist WHERE Years_working  >  10 INTERSECT SELECT Nationality FROM journalist WHERE Years_working  <  3,SELECT DISTINCT Nationality  FROM journalist  WHERE Nationality IN (     SELECT Nationality      FROM journalist      WHERE Years_working > 10 ) AND Nationality IN (     SELECT Nationality      FROM journalist      WHERE Years_working < 3 );,[['England']],[['England']],TRUE
60,Show the names of journalists and the number of events they reported.,"SELECT T3.Name ,  COUNT(*) FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID GROUP BY T3.Name","SELECT journalist.Name, COUNT(news_report.Event_ID)  FROM journalist  JOIN news_report ON journalist.journalist_ID = news_report.journalist_ID  GROUP BY journalist.Name;","[['Tony Waddington', 1], ['John Meaney', 1], ['Jackie Waring', 2], ['Ray Ferris', 1], ['Herbert Swindells', 1], ['Tom Briggs', 1]]","[['Tony Waddington', 1], ['John Meaney', 1], ['Jackie Waring', 2], ['Ray Ferris', 1], ['Herbert Swindells', 1], ['Tom Briggs', 1]]",TRUE
61,Show the names of journalists that have reported more than one event.,SELECT T3.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID GROUP BY T3.Name HAVING COUNT(*)  >  1,SELECT journalist.Name FROM journalist JOIN news_report ON journalist.journalist_ID = news_report.journalist_ID GROUP BY journalist.Name HAVING COUNT(news_report.Event_ID) > 1;,[['Jackie Waring']],[['Jackie Waring']],TRUE
62,When did Linda Smith visit Subway?,SELECT TIME FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = 'Linda' AND Student.Lname = 'Smith' AND Restaurant.ResName = 'Subway';,SELECT Time  FROM Visits_Restaurant  JOIN Student ON Visits_Restaurant.StuID = Student.StuID  JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID  WHERE Student.FName = 'Linda' AND Student.LName = 'Smith' AND Restaurant.ResName = 'Subway';,[[1507572900000000000]],[[1507572900000000000]],TRUE
63,At which restaurant did the students spend the least amount of time? List restaurant and the time students spent on in total.,"SELECT Restaurant.ResName ,  sum(Visits_Restaurant.Spent) FROM Visits_Restaurant JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID GROUP BY Restaurant.ResID ORDER BY sum(Visits_Restaurant.Spent) ASC LIMIT 1;","SELECT R.ResName, SUM(VR.Time) AS TotalTime FROM Restaurant AS R JOIN Visits_Restaurant AS VR ON R.ResID = VR.ResID GROUP BY R.ResName ORDER BY TotalTime ASC LIMIT 1;","[['Subway', 6.53]]",[['Error']],FALSE
64,"Which paper is published in an institution in ""USA"" and have ""Turon"" as its second author?",SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  'USA' AND t2.authorder  =  2 AND t1.lname  =  'Turon',SELECT Papers.title FROM Papers JOIN Authorship ON Papers.paperID = Authorship.paperID JOIN Authors ON Authorship.authID = Authors.authID JOIN Inst ON Authorship.instID = Inst.instID WHERE Inst.country = 'USA' AND Authors.lname = 'Turon' AND Authorship.authOrder = 2;,[['Functional Pearl: Modular Rollback through Control Logging']],[['Functional Pearl: Modular Rollback through Control Logging']],TRUE
65,What is the last name of the author that has published the most papers?,"SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.fname ,  t1.lname ORDER BY count(*) DESC LIMIT 1",SELECT lname  FROM Authors  WHERE authID = (     SELECT authID      FROM Authorship      GROUP BY authID      ORDER BY COUNT(paperID) DESC      LIMIT 1 );,[['Hinze']],[['Hinze']],TRUE
66,"Find the last names of all the authors that have written a paper with title containing the word ""Monadic"".",SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE '%Monadic%',SELECT Authors.lname FROM Authors JOIN Authorship ON Authors.authID = Authorship.authID JOIN Papers ON Authorship.paperID = Papers.paperID WHERE Papers.title LIKE '%Monadic%';,"[['Gibbons'], ['Hinze']]","[['Gibbons'], ['Hinze']]",TRUE
67,Find the name and account balance of the customers who have loans with a total amount of more than 5000.,"SELECT T1.cust_name ,  T1.acc_type 
FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id 
GROUP BY T1.cust_name, T1.acc_type  
HAVING sum(T2.amount)  >  5000","SELECT customer.cust_name, customer.acc_bal FROM customer JOIN loan ON customer.cust_ID = loan.cust_ID GROUP BY customer.cust_ID HAVING SUM(loan.amount) > 5000;","[['Mary', 'saving    ']]","[['Mary', 2000]]",FALSE
68,Find the name of bank branch that provided the greatest total amount of loans to customers with credit score is less than 100.,SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100 GROUP BY T2.bname ORDER BY sum(T1.amount) DESC LIMIT 1,SELECT b.bname FROM bank b JOIN loan l ON b.branch_ID = l.branch_ID JOIN customer c ON l.cust_ID = c.cust_ID WHERE c.credit_score < 100 GROUP BY b.bname ORDER BY SUM(l.amount) DESC LIMIT 1;,[['downtown']],[['downtown']],TRUE
69,Which assets have 2 parts and have less than 2 fault logs? List the asset id and detail.,"SELECT T1.asset_id ,  T1.asset_details FROM Assets AS T1 JOIN Asset_Parts AS T2 ON T1.asset_id  =  T2.asset_id GROUP BY T1.asset_id HAVING count(*)  =  2 INTERSECT SELECT T1.asset_id ,  T1.asset_details FROM Assets AS T1 JOIN Fault_Log AS T2 ON T1.asset_id  =  T2.asset_id GROUP BY T1.asset_id HAVING count(*)  <  2","SELECT a.asset_id, a.asset_details FROM assets a WHERE (   SELECT COUNT(*)    FROM asset_parts ap    WHERE ap.asset_id = a.asset_id ) = 2 AND (   SELECT COUNT(*)    FROM fault_log fl    WHERE fl.asset_id = a.asset_id ) < 2;","[[2, 'dell laptop2'], [15, 'system3']]","[[1, 'dell laptop1'], [2, 'dell laptop2'], [15, 'system3']]",FALSE
70,Which third party companies have at least 2 maintenance engineers or have at least 2 maintenance contracts? List the company id and name.,"SELECT T1.company_id ,  T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Engineers AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id HAVING count(*)  >=  2 UNION SELECT T3.company_id ,  T3.company_name FROM Third_Party_Companies AS T3 JOIN Maintenance_Contracts AS T4 ON T3.company_id  =  T4.maintenance_contract_company_id GROUP BY T3.company_id HAVING count(*)  >=  2","SELECT company_id, company_name  FROM third_party_companies  WHERE company_id IN (     SELECT company_id      FROM maintenance_engineers      GROUP BY company_id      HAVING COUNT(engineer_id) >= 2 )  OR company_id IN (     SELECT maintenance_contract_company_id      FROM maintenance_contracts      GROUP BY maintenance_contract_company_id      HAVING COUNT(maintenance_contract_id) >= 2 );","[[15, 'Rau, Ullrich and King'], [11, 'Kuvalis, Boehm and Hettinger'], [2, 'McDermott Group'], [13, ""Greenholt-D'Amore""], [6, 'Grimes, Mosciski and Renner'], [4, 'Dooley-Langosh'], [3, 'Schuppe-Carroll']]","[[2, 'McDermott Group'], [3, 'Schuppe-Carroll'], [4, 'Dooley-Langosh'], [6, 'Grimes, Mosciski and Renner'], [11, 'Kuvalis, Boehm and Hettinger'], [13, ""Greenholt-D'Amore""], [15, 'Rau, Ullrich and King']]",FALSE
71,Which part fault requires the most number of skills to fix? List part id and name.,"SELECT T1.part_id ,  T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id JOIN Skills_Required_To_Fix AS T3 ON T2.part_fault_id  =  T3.part_fault_id GROUP BY T1.part_id ORDER BY count(*) DESC LIMIT 1","SELECT p.part_id, p.part_name FROM parts p JOIN part_faults pf ON p.part_id = pf.part_id JOIN skills_required_to_fix srtf ON pf.part_fault_id = srtf.part_fault_id GROUP BY p.part_id, p.part_name ORDER BY COUNT(srtf.skill_id) DESC LIMIT 1;","[[1, 'top']]","[[1, 'top']]",TRUE
72,Find the number of classes offered for all class rooms that held at least 2 classes.,"SELECT count(*) ,  class_room FROM CLASS GROUP BY class_room HAVING count(*)  >=  2","SELECT CLASS_ROOM, COUNT(*) AS NUM_CLASSES FROM CLASS GROUP BY CLASS_ROOM HAVING COUNT(*) >= 2;","[[4, 'KLR200'], [2, 'BUS252'], [2, 'BUS311'], [3, 'KLR209']]","[['KLR200', 4], ['BUS252', 2], ['BUS311', 2], ['KLR209', 3]]",FALSE
73,How many different professors are there for the different schools?,"SELECT count(*) ,  T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code",SELECT COUNT(DISTINCT P.EMP_NUM)  FROM PROFESSOR P  JOIN DEPARTMENT D ON P.DEPT_CODE = D.DEPT_CODE  GROUP BY D.SCHOOL_CODE;,"[[12, 'A&SCI'], [10, 'BUS']]","[[12], [10]]",FALSE
74,What is the name and the average gpa of department whose students have the highest average gpa?,"SELECT T2.dept_name ,  avg(T1.stu_gpa) 
FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code 
GROUP BY T2.dept_name  
ORDER BY avg(T1.stu_gpa) 
DESC LIMIT 1","SELECT DEPARTMENT.DEPT_NAME, AVG(STUDENT.STU_GPA) AS AVG_GPA FROM DEPARTMENT JOIN STUDENT ON DEPARTMENT.DEPT_CODE = STUDENT.DEPT_CODE GROUP BY DEPARTMENT.DEPT_NAME ORDER BY AVG_GPA DESC LIMIT 1;","[['Computer Info. Systems', Decimal('3.1800000000000000')]]","[['Computer Info. Systems', Decimal('3.1800000000000000')]]",TRUE
75,Find the name of the department that offers the largest number of credits of all classes.,"SELECT T3.dept_name 
FROM course AS T1 
JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code 
JOIN department AS T3 ON T1.dept_code  =  T3.dept_code 
GROUP BY T3.dept_name  
ORDER BY sum(T1.crs_credit) DESC LIMIT 1",SELECT DEPT_NAME  FROM DEPARTMENT  WHERE DEPT_CODE = (     SELECT DEPT_CODE      FROM COURSE      GROUP BY DEPT_CODE      ORDER BY SUM(CRS_CREDIT) DESC      LIMIT 1 );,[['Computer Info. Systems']],[['Computer Info. Systems']],TRUE
76,How many students are enrolled in the class taught by some professor from the accounting department?,SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code WHERE T4.dept_name  =  'Accounting',SELECT COUNT(DISTINCT STU_NUM)  FROM ENROLL  WHERE CLASS_CODE IN (     SELECT CLASS_CODE      FROM CLASS      WHERE PROF_NUM IN (         SELECT EMP_NUM          FROM PROFESSOR          WHERE DEPT_CODE IN (             SELECT DEPT_CODE              FROM DEPARTMENT              WHERE DEPT_NAME = 'Accounting'         )     ) );,[[2]],[[2]],TRUE
77,What is the name of the department that has the largest number of students enrolled?,"SELECT T4.dept_name 
FROM CLASS AS T1 
JOIN enroll AS T2 ON T1.class_code  =  T2.class_code 
JOIN course AS T3 ON T1.crs_code  =  T3.crs_code 
JOIN department AS T4 ON T3.dept_code  =  T4.dept_code 
GROUP BY T4.dept_name 
ORDER BY count(*) DESC LIMIT 1",SELECT DEPT_NAME  FROM DEPARTMENT  WHERE DEPT_CODE IN (     SELECT DEPT_CODE      FROM STUDENT      GROUP BY DEPT_CODE      ORDER BY COUNT(STU_NUM) DESC      LIMIT 1 );,[['Computer Info. Systems']],[['Accounting']],FALSE
78,Find the first name of student who is taking classes from accounting and Computer Info. Systems departments,SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Accounting' INTERSECT SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Computer Info. Systems',"SELECT STU_FNAME  FROM STUDENT  WHERE STU_NUM IN (     SELECT STU_NUM      FROM ENROLL      WHERE CLASS_CODE IN (         SELECT CLASS_CODE          FROM CLASS          WHERE CRS_CODE IN (             SELECT CRS_CODE              FROM COURSE              WHERE DEPT_CODE IN (                 SELECT DEPT_CODE                  FROM DEPARTMENT                  WHERE DEPT_NAME IN ('Accounting', 'Computer Info. Systems')             )         )     ) );","[['Anne'], ['William']]","[['Anne'], ['William']]",TRUE
79,Find the first names and offices of all instructors who have taught some course and the course description and the department name.,"SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description ,  T5.dept_name FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num JOIN department AS T5 ON T4.dept_code  =  T5.dept_code","SELECT EMPLOYEE.EMP_FNAME, PROFESSOR.PROF_OFFICE, COURSE.CRS_DESCRIPTION, DEPARTMENT.DEPT_NAME FROM PROFESSOR JOIN EMPLOYEE ON PROFESSOR.EMP_NUM = EMPLOYEE.EMP_NUM JOIN CLASS ON PROFESSOR.EMP_NUM = CLASS.PROF_NUM JOIN COURSE ON CLASS.CRS_CODE = COURSE.CRS_CODE JOIN DEPARTMENT ON PROFESSOR.DEPT_CODE = DEPARTMENT.DEPT_CODE;","[['Arnelle', 'KLR 229D', 'Accounting I', 'Accounting'], ['Arnelle', 'KLR 229D', 'Accounting I', 'Accounting'], ['Robert', 'BBG 208', 'Accounting I', 'Sociology'], ['Ismael', 'KLR 244', 'Accounting II', 'Accounting'], ['Ismael', 'KLR 244', 'Accounting II', 'Accounting'], ['Carlos', 'KLR 300', 'Intro. to Microcomputing', 'Computer Info. Systems'], ['Gerald', 'KLR 211', 'Intro. to Microcomputing', 'Accounting'], ['Carlos', 'KLR 300', 'Intro. to Microcomputing', 'Computer Info. Systems'], ['Peter', 'KLR 203E', 'Database Design and Implementation', 'Computer Info. Systems'], ['Gerald', 'KLR 211', 'Intro. to Statistics', 'Accounting'], ['Gerald', 'KLR 211', 'Intro. to Statistics', 'Accounting'], ['Peter', 'KLR 203E', 'Statistical Applications', 'Computer Info. Systems'], ['Peter', 'KLR 203E', 'Statistical Applications', 'Computer Info. Systems']]","[['Arnelle', 'KLR 229D', 'Accounting I', 'Accounting'], ['Arnelle', 'KLR 229D', 'Accounting I', 'Accounting'], ['Robert', 'BBG 208', 'Accounting I', 'Sociology'], ['Ismael', 'KLR 244', 'Accounting II', 'Accounting'], ['Ismael', 'KLR 244', 'Accounting II', 'Accounting'], ['Carlos', 'KLR 300', 'Intro. to Microcomputing', 'Computer Info. Systems'], ['Gerald', 'KLR 211', 'Intro. to Microcomputing', 'Accounting'], ['Carlos', 'KLR 300', 'Intro. to Microcomputing', 'Computer Info. Systems'], ['Peter', 'KLR 203E', 'Database Design and Implementation', 'Computer Info. Systems'], ['Gerald', 'KLR 211', 'Intro. to Statistics', 'Accounting'], ['Gerald', 'KLR 211', 'Intro. to Statistics', 'Accounting'], ['Peter', 'KLR 203E', 'Statistical Applications', 'Computer Info. Systems'], ['Peter', 'KLR 203E', 'Statistical Applications', 'Computer Info. Systems']]",TRUE
80,What are the first names of all Accounting professors who teach and what are the classrooms of the courses they teach?,"SELECT T2.emp_fname ,  T1.class_room FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Accounting'","SELECT EMPLOYEE.EMP_FNAME, CLASS.CLASS_ROOM FROM PROFESSOR JOIN EMPLOYEE ON PROFESSOR.EMP_NUM = EMPLOYEE.EMP_NUM JOIN DEPARTMENT ON PROFESSOR.DEPT_CODE = DEPARTMENT.DEPT_CODE JOIN CLASS ON PROFESSOR.EMP_NUM = CLASS.PROF_NUM WHERE DEPARTMENT.DEPT_NAME = 'Accounting';","[['Arnelle', 'BUS311'], ['Arnelle', 'BUS200'], ['Ismael', 'BUS311'], ['Ismael', 'BUS252'], ['Gerald', 'KLR211'], ['Gerald', 'KLR200'], ['Gerald', 'KLR200']]","[['Arnelle', 'BUS311'], ['Arnelle', 'BUS200'], ['Ismael', 'BUS311'], ['Ismael', 'BUS252'], ['Gerald', 'KLR211'], ['Gerald', 'KLR200'], ['Gerald', 'KLR200']]",TRUE
81,Find the id and number of shops for the company that produces the most expensive furniture.,"SELECT t1.manufacturer_id ,  t1.num_of_shops FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id  =  t2.manufacturer_id ORDER BY t2.Price_in_Dollar DESC LIMIT 1","SELECT m.Manufacturer_ID, m.Num_of_Shops FROM manufacturer m JOIN furniture_manufacte fm ON m.Manufacturer_ID = fm.Manufacturer_ID WHERE fm.Price_in_Dollar = (     SELECT MAX(Price_in_Dollar)     FROM furniture_manufacte );","[[7, 4]]","[[7, 4]]",TRUE
82,Find the name of the company that produces both furnitures with less than 6 components and furnitures with more than 10 components.,SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id  =  t3.manufacturer_id WHERE t1.num_of_component  <  6 INTERSECT SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id  =  t3.manufacturer_id WHERE t1.num_of_component  >  10,SELECT DISTINCT m.Name FROM manufacturer m WHERE EXISTS (     SELECT 1     FROM furniture_manufacte fm     JOIN furniture f ON fm.Furniture_ID = f.Furniture_ID     WHERE fm.Manufacturer_ID = m.Manufacturer_ID AND f.Num_of_Component < 6 ) AND EXISTS (     SELECT 1     FROM furniture_manufacte fm     JOIN furniture f ON fm.Furniture_ID = f.Furniture_ID     WHERE fm.Manufacturer_ID = m.Manufacturer_ID AND f.Num_of_Component > 10 );,[['Tomorrow']],[['Tomorrow']],TRUE
83,"display the full name (first and last), hire date, salary, and department number for those employees whose first name does not containing the letter M and make the result set in ascending order by department number.","SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY department_id","SELECT FIRST_NAME, LAST_NAME, HIRE_DATE, SALARY, DEPARTMENT_ID  FROM employees  WHERE FIRST_NAME NOT LIKE '%M%'  ORDER BY DEPARTMENT_ID ASC;","[['Jennifer', 'Whalen', datetime.date(1987, 9, 25), Decimal('4400.00'), Decimal('10')], ['Pat', 'Fay', datetime.date(1987, 9, 27), Decimal('6000.00'), Decimal('20')], ['Sigal', 'Tobias', datetime.date(1987, 7, 4), Decimal('2800.00'), Decimal('30')], ['Guy', 'Himuro', datetime.date(1987, 7, 5), Decimal('2600.00'), Decimal('30')], ['Alexander', 'Khoo', datetime.date(1987, 7, 2), Decimal('3100.00'), Decimal('30')], ['Den', 'Raphaely', datetime.date(1987, 7, 1), Decimal('11000.00'), Decimal('30')], ['Shelli', 'Baida', datetime.date(1987, 7, 3), Decimal('2900.00'), Decimal('30')], ['Karen', 'Colmenares', datetime.date(1987, 7, 6), Decimal('2500.00'), Decimal('30')], ['Susan', 'Mavris', datetime.date(1987, 9, 28), Decimal('6500.00'), Decimal('40')], ['Steven', 'Markle', datetime.date(1987, 7, 15), Decimal('2200.00'), Decimal('50')], ['Laura', 'Bissot', datetime.date(1987, 7, 16), Decimal('3300.00'), Decimal('50')], ['James', 'Marlow', datetime.date(1987, 7, 18), Decimal('2500.00'), Decimal('50')], ['TJ', 'Olson', datetime.date(1987, 7, 19), Decimal('2100.00'), Decimal('50')], ['Jason', 'Mallin', datetime.date(1987, 7, 20), Decimal('3300.00'), Decimal('50')], ['Ki', 'Gee', datetime.date(1987, 7, 22), Decimal('2400.00'), Decimal('50')], ['Kimberely', 'Grant', datetime.date(1987, 9, 3), Decimal('7000.00'), Decimal('50')], ['Hazel', 'Philtanker', datetime.date(1987, 7, 23), Decimal('2200.00'), Decimal('50')], ['Winston', 'Taylor', datetime.date(1987, 9, 5), Decimal('3200.00'), Decimal('50')], ['Jean', 'Fleaur', datetime.date(1987, 9, 6), Decimal('3100.00'), Decimal('50')], ['Girard', 'Geoni', datetime.date(1987, 9, 8), Decimal('2800.00'), Decimal('50')], ['Nandita', 'Sarchand', datetime.date(1987, 9, 9), Decimal('4200.00'), Decimal('50')], ['Alexis', 'Bull', datetime.date(1987, 9, 10), Decimal('4100.00'), Decimal('50')], ['Julia', 'Dellinger', datetime.date(1987, 9, 11), Decimal('3400.00'), Decimal('50')], ['Anthony', 'Cabrio', datetime.date(1987, 9, 12), Decimal('3000.00'), Decimal('50')], ['Kelly', 'Chung', datetime.date(1987, 9, 13), Decimal('3800.00'), Decimal('50')], ['Jennifer', 'Dilly', datetime.date(1987, 9, 14), Decimal('3600.00'), Decimal('50')], ['Timothy', 'Gates', datetime.date(1987, 9, 15), Decimal('2900.00'), Decimal('50')], ['Randall', 'Perkins', datetime.date(1987, 9, 16), Decimal('2500.00'), Decimal('50')], ['Sarah', 'Bell', datetime.date(1987, 9, 17), Decimal('4000.00'), Decimal('50')], ['Britney', 'Everett', datetime.date(1987, 9, 18), Decimal('3900.00'), Decimal('50')], ['Samuel', 'McCain', datetime.date(1987, 9, 19), Decimal('3200.00'), Decimal('50')], ['Vance', 'Jones', datetime.date(1987, 9, 20), Decimal('2800.00'), Decimal('50')], ['Renske', 'Ladwig', datetime.date(1987, 7, 24), Decimal('3600.00'), Decimal('50')], ['Stephen', 'Stiles', datetime.date(1987, 7, 25), Decimal('3200.00'), Decimal('50')], ['Joshua', 'Patel', datetime.date(1987, 7, 27), Decimal('2500.00'), Decimal('50')], ['Trenna', 'Rajs', datetime.date(1987, 7, 28), Decimal('3500.00'), Decimal('50')], ['Curtis', 'Davies', datetime.date(1987, 7, 29), Decimal('3100.00'), Decimal('50')], ['Randall', 'Matos', datetime.date(1987, 7, 30), Decimal('2600.00'), Decimal('50')], ['Peter', 'Vargas', datetime.date(1987, 7, 31), Decimal('2500.00'), Decimal('50')], ['John', 'Seo', datetime.date(1987, 7, 26), Decimal('2700.00'), Decimal('50')], ['Adam', 'Fripp', datetime.date(1987, 7, 8), Decimal('8200.00'), Decimal('50')], ['Payam', 'Kaufling', datetime.date(1987, 7, 9), Decimal('7900.00'), Decimal('50')], ['Shanta', 'Vollman', datetime.date(1987, 7, 10), Decimal('6500.00'), Decimal('50')], ['Alana', 'Walsh', datetime.date(1987, 9, 21), Decimal('3100.00'), Decimal('50')], ['Kevin', 'Mourgos', datetime.date(1987, 7, 11), Decimal('5800.00'), Decimal('50')], ['Julia', 'Nayer', datetime.date(1987, 7, 12), Decimal('3200.00'), Decimal('50')], ['Irene', 'Mikkilineni', datetime.date(1987, 7, 13), Decimal('2700.00'), Decimal('50')], ['James', 'Landry', datetime.date(1987, 7, 14), Decimal('2400.00'), Decimal('50')], ['Douglas', 'Grant', datetime.date(1987, 9, 24), Decimal('2600.00'), Decimal('50')], ['Donald', 'OConnell', datetime.date(1987, 9, 23), Decimal('2600.00'), Decimal('50')], ['Kevin', 'Feeney', datetime.date(1987, 9, 22), Decimal('3000.00'), Decimal('50')], ['Alexander', 'Hunold', datetime.date(1987, 6, 20), Decimal('9000.00'), Decimal('60')], ['David', 'Austin', datetime.date(1987, 6, 22), Decimal('4800.00'), Decimal('60')], ['Diana', 'Lorentz', datetime.date(1987, 6, 24), Decimal('4200.00'), Decimal('60')], ['Valli', 'Pataballa', datetime.date(1987, 6, 23), Decimal('4800.00'), Decimal('60')], ['Bruce', 'Ernst', datetime.date(1987, 6, 21), Decimal('6000.00'), Decimal('60')], ['Hermann', 'Baer', datetime.date(1987, 9, 29), Decimal('10000.00'), Decimal('70')], ['Amit', 'Banda', datetime.date(1987, 8, 23), Decimal('6200.00'), Decimal('80')], ['John', 'Russell', datetime.date(1987, 8, 1), Decimal('14000.00'), Decimal('80')], ['Karen', 'Partners', datetime.date(1987, 8, 2), Decimal('13500.00'), Decimal('80')], ['Alberto', 'Errazuriz', datetime.date(1987, 8, 3), Decimal('12000.00'), Decimal('80')], ['Gerald', 'Cambrault', datetime.date(1987, 8, 4), Decimal('11000.00'), Decimal('80')], ['Eleni', 'Zlotkey', datetime.date(1987, 8, 5), Decimal('10500.00'), Decimal('80')], ['Peter', 'Tucker', datetime.date(1987, 8, 6), Decimal('10000.00'), Decimal('80')], ['David', 'Bernstein', datetime.date(1987, 8, 7), Decimal('9500.00'), Decimal('80')], ['Peter', 'Hall', datetime.date(1987, 8, 8), Decimal('9000.00'), Decimal('80')], ['Christopher', 'Olsen', datetime.date(1987, 8, 9), Decimal('8000.00'), Decimal('80')], ['Nanette', 'Cambrault', datetime.date(1987, 8, 10), Decimal('7500.00'), Decimal('80')], ['Oliver', 'Tuvault', datetime.date(1987, 8, 11), Decimal('7000.00'), Decimal('80')], ['Janette', 'King', datetime.date(1987, 8, 12), Decimal('10000.00'), Decimal('80')], ['Patrick', 'Sully', datetime.date(1987, 8, 13), Decimal('9500.00'), Decimal('80')], ['Allan', 'McEwen', datetime.date(1987, 8, 14), Decimal('9000.00'), Decimal('80')], ['Lindsey', 'Smith', datetime.date(1987, 8, 15), Decimal('8000.00'), Decimal('80')], ['Louise', 'Doran', datetime.date(1987, 8, 16), Decimal('7500.00'), Decimal('80')], ['Sarath', 'Sewall', datetime.date(1987, 8, 17), Decimal('7000.00'), Decimal('80')], ['Clara', 'Vishney', datetime.date(1987, 8, 18), Decimal('10500.00'), Decimal('80')], ['Danielle', 'Greene', datetime.date(1987, 8, 19), Decimal('9500.00'), Decimal('80')], ['David', 'Lee', datetime.date(1987, 8, 21), Decimal('6800.00'), Decimal('80')], ['Sundar', 'Ande', datetime.date(1987, 8, 22), Decimal('6400.00'), Decimal('80')], ['Lisa', 'Ozer', datetime.date(1987, 8, 24), Decimal('11500.00'), Decimal('80')], ['Harrison', 'Bloom', datetime.date(1987, 8, 25), Decimal('10000.00'), Decimal('80')], ['Tayler', 'Fox', datetime.date(1987, 8, 26), Decimal('9600.00'), Decimal('80')], ['William', 'Smith', datetime.date(1987, 8, 27), Decimal('7400.00'), Decimal('80')], ['Elizabeth', 'Bates', datetime.date(1987, 8, 28), Decimal('7300.00'), Decimal('80')], ['Sundita', 'Kumar', datetime.date(1987, 8, 29), Decimal('6100.00'), Decimal('80')], ['Ellen', 'Abel', datetime.date(1987, 8, 30), Decimal('11000.00'), Decimal('80')], ['Alyssa', 'Hutton', datetime.date(1987, 8, 31), Decimal('8800.00'), Decimal('80')], ['Jonathon', 'Taylor', datetime.date(1987, 9, 1), Decimal('8600.00'), Decimal('80')], ['Jack', 'Livingston', datetime.date(1987, 9, 2), Decimal('8400.00'), Decimal('80')], ['Charles', 'Johnson', datetime.date(1987, 9, 4), Decimal('6200.00'), Decimal('80')], ['Steven', 'King', datetime.date(1987, 6, 17), Decimal('24000.00'), Decimal('90')], ['Lex', 'De Haan', datetime.date(1987, 6, 19), Decimal('17000.00'), Decimal('90')], ['Neena', 'Kochhar', datetime.date(1987, 6, 18), Decimal('17000.00'), Decimal('90')], ['John', 'Chen', datetime.date(1987, 6, 27), Decimal('8200.00'), Decimal('100')], ['Daniel', 'Faviet', datetime.date(1987, 6, 26), Decimal('9000.00'), Decimal('100')], ['Nancy', 'Greenberg', datetime.date(1987, 6, 25), Decimal('12000.00'), Decimal('100')], ['Luis', 'Popp', datetime.date(1987, 6, 30), Decimal('6900.00'), Decimal('100')], ['Ismael', 'Sciarra', datetime.date(1987, 6, 28), Decimal('7700.00'), Decimal('100')], ['Shelley', 'Higgins', datetime.date(1987, 9, 30), Decimal('12000.00'), Decimal('110')], ['William', 'Gietz', datetime.date(1987, 10, 1), Decimal('8300.00'), Decimal('110')]]","[['Jennifer', 'Whalen', datetime.date(1987, 9, 25), Decimal('4400.00'), Decimal('10')], ['Pat', 'Fay', datetime.date(1987, 9, 27), Decimal('6000.00'), Decimal('20')], ['Sigal', 'Tobias', datetime.date(1987, 7, 4), Decimal('2800.00'), Decimal('30')], ['Guy', 'Himuro', datetime.date(1987, 7, 5), Decimal('2600.00'), Decimal('30')], ['Alexander', 'Khoo', datetime.date(1987, 7, 2), Decimal('3100.00'), Decimal('30')], ['Den', 'Raphaely', datetime.date(1987, 7, 1), Decimal('11000.00'), Decimal('30')], ['Shelli', 'Baida', datetime.date(1987, 7, 3), Decimal('2900.00'), Decimal('30')], ['Karen', 'Colmenares', datetime.date(1987, 7, 6), Decimal('2500.00'), Decimal('30')], ['Susan', 'Mavris', datetime.date(1987, 9, 28), Decimal('6500.00'), Decimal('40')], ['Steven', 'Markle', datetime.date(1987, 7, 15), Decimal('2200.00'), Decimal('50')], ['Laura', 'Bissot', datetime.date(1987, 7, 16), Decimal('3300.00'), Decimal('50')], ['James', 'Marlow', datetime.date(1987, 7, 18), Decimal('2500.00'), Decimal('50')], ['TJ', 'Olson', datetime.date(1987, 7, 19), Decimal('2100.00'), Decimal('50')], ['Jason', 'Mallin', datetime.date(1987, 7, 20), Decimal('3300.00'), Decimal('50')], ['Ki', 'Gee', datetime.date(1987, 7, 22), Decimal('2400.00'), Decimal('50')], ['Kimberely', 'Grant', datetime.date(1987, 9, 3), Decimal('7000.00'), Decimal('50')], ['Hazel', 'Philtanker', datetime.date(1987, 7, 23), Decimal('2200.00'), Decimal('50')], ['Winston', 'Taylor', datetime.date(1987, 9, 5), Decimal('3200.00'), Decimal('50')], ['Jean', 'Fleaur', datetime.date(1987, 9, 6), Decimal('3100.00'), Decimal('50')], ['Girard', 'Geoni', datetime.date(1987, 9, 8), Decimal('2800.00'), Decimal('50')], ['Nandita', 'Sarchand', datetime.date(1987, 9, 9), Decimal('4200.00'), Decimal('50')], ['Alexis', 'Bull', datetime.date(1987, 9, 10), Decimal('4100.00'), Decimal('50')], ['Julia', 'Dellinger', datetime.date(1987, 9, 11), Decimal('3400.00'), Decimal('50')], ['Anthony', 'Cabrio', datetime.date(1987, 9, 12), Decimal('3000.00'), Decimal('50')], ['Kelly', 'Chung', datetime.date(1987, 9, 13), Decimal('3800.00'), Decimal('50')], ['Jennifer', 'Dilly', datetime.date(1987, 9, 14), Decimal('3600.00'), Decimal('50')], ['Timothy', 'Gates', datetime.date(1987, 9, 15), Decimal('2900.00'), Decimal('50')], ['Randall', 'Perkins', datetime.date(1987, 9, 16), Decimal('2500.00'), Decimal('50')], ['Sarah', 'Bell', datetime.date(1987, 9, 17), Decimal('4000.00'), Decimal('50')], ['Britney', 'Everett', datetime.date(1987, 9, 18), Decimal('3900.00'), Decimal('50')], ['Samuel', 'McCain', datetime.date(1987, 9, 19), Decimal('3200.00'), Decimal('50')], ['Vance', 'Jones', datetime.date(1987, 9, 20), Decimal('2800.00'), Decimal('50')], ['Renske', 'Ladwig', datetime.date(1987, 7, 24), Decimal('3600.00'), Decimal('50')], ['Stephen', 'Stiles', datetime.date(1987, 7, 25), Decimal('3200.00'), Decimal('50')], ['Joshua', 'Patel', datetime.date(1987, 7, 27), Decimal('2500.00'), Decimal('50')], ['Trenna', 'Rajs', datetime.date(1987, 7, 28), Decimal('3500.00'), Decimal('50')], ['Curtis', 'Davies', datetime.date(1987, 7, 29), Decimal('3100.00'), Decimal('50')], ['Randall', 'Matos', datetime.date(1987, 7, 30), Decimal('2600.00'), Decimal('50')], ['Peter', 'Vargas', datetime.date(1987, 7, 31), Decimal('2500.00'), Decimal('50')], ['John', 'Seo', datetime.date(1987, 7, 26), Decimal('2700.00'), Decimal('50')], ['Adam', 'Fripp', datetime.date(1987, 7, 8), Decimal('8200.00'), Decimal('50')], ['Payam', 'Kaufling', datetime.date(1987, 7, 9), Decimal('7900.00'), Decimal('50')], ['Shanta', 'Vollman', datetime.date(1987, 7, 10), Decimal('6500.00'), Decimal('50')], ['Alana', 'Walsh', datetime.date(1987, 9, 21), Decimal('3100.00'), Decimal('50')], ['Kevin', 'Mourgos', datetime.date(1987, 7, 11), Decimal('5800.00'), Decimal('50')], ['Julia', 'Nayer', datetime.date(1987, 7, 12), Decimal('3200.00'), Decimal('50')], ['Irene', 'Mikkilineni', datetime.date(1987, 7, 13), Decimal('2700.00'), Decimal('50')], ['James', 'Landry', datetime.date(1987, 7, 14), Decimal('2400.00'), Decimal('50')], ['Douglas', 'Grant', datetime.date(1987, 9, 24), Decimal('2600.00'), Decimal('50')], ['Donald', 'OConnell', datetime.date(1987, 9, 23), Decimal('2600.00'), Decimal('50')], ['Kevin', 'Feeney', datetime.date(1987, 9, 22), Decimal('3000.00'), Decimal('50')], ['Alexander', 'Hunold', datetime.date(1987, 6, 20), Decimal('9000.00'), Decimal('60')], ['David', 'Austin', datetime.date(1987, 6, 22), Decimal('4800.00'), Decimal('60')], ['Diana', 'Lorentz', datetime.date(1987, 6, 24), Decimal('4200.00'), Decimal('60')], ['Valli', 'Pataballa', datetime.date(1987, 6, 23), Decimal('4800.00'), Decimal('60')], ['Bruce', 'Ernst', datetime.date(1987, 6, 21), Decimal('6000.00'), Decimal('60')], ['Hermann', 'Baer', datetime.date(1987, 9, 29), Decimal('10000.00'), Decimal('70')], ['Amit', 'Banda', datetime.date(1987, 8, 23), Decimal('6200.00'), Decimal('80')], ['John', 'Russell', datetime.date(1987, 8, 1), Decimal('14000.00'), Decimal('80')], ['Karen', 'Partners', datetime.date(1987, 8, 2), Decimal('13500.00'), Decimal('80')], ['Alberto', 'Errazuriz', datetime.date(1987, 8, 3), Decimal('12000.00'), Decimal('80')], ['Gerald', 'Cambrault', datetime.date(1987, 8, 4), Decimal('11000.00'), Decimal('80')], ['Eleni', 'Zlotkey', datetime.date(1987, 8, 5), Decimal('10500.00'), Decimal('80')], ['Peter', 'Tucker', datetime.date(1987, 8, 6), Decimal('10000.00'), Decimal('80')], ['David', 'Bernstein', datetime.date(1987, 8, 7), Decimal('9500.00'), Decimal('80')], ['Peter', 'Hall', datetime.date(1987, 8, 8), Decimal('9000.00'), Decimal('80')], ['Christopher', 'Olsen', datetime.date(1987, 8, 9), Decimal('8000.00'), Decimal('80')], ['Nanette', 'Cambrault', datetime.date(1987, 8, 10), Decimal('7500.00'), Decimal('80')], ['Oliver', 'Tuvault', datetime.date(1987, 8, 11), Decimal('7000.00'), Decimal('80')], ['Janette', 'King', datetime.date(1987, 8, 12), Decimal('10000.00'), Decimal('80')], ['Patrick', 'Sully', datetime.date(1987, 8, 13), Decimal('9500.00'), Decimal('80')], ['Allan', 'McEwen', datetime.date(1987, 8, 14), Decimal('9000.00'), Decimal('80')], ['Lindsey', 'Smith', datetime.date(1987, 8, 15), Decimal('8000.00'), Decimal('80')], ['Louise', 'Doran', datetime.date(1987, 8, 16), Decimal('7500.00'), Decimal('80')], ['Sarath', 'Sewall', datetime.date(1987, 8, 17), Decimal('7000.00'), Decimal('80')], ['Clara', 'Vishney', datetime.date(1987, 8, 18), Decimal('10500.00'), Decimal('80')], ['Danielle', 'Greene', datetime.date(1987, 8, 19), Decimal('9500.00'), Decimal('80')], ['David', 'Lee', datetime.date(1987, 8, 21), Decimal('6800.00'), Decimal('80')], ['Sundar', 'Ande', datetime.date(1987, 8, 22), Decimal('6400.00'), Decimal('80')], ['Lisa', 'Ozer', datetime.date(1987, 8, 24), Decimal('11500.00'), Decimal('80')], ['Harrison', 'Bloom', datetime.date(1987, 8, 25), Decimal('10000.00'), Decimal('80')], ['Tayler', 'Fox', datetime.date(1987, 8, 26), Decimal('9600.00'), Decimal('80')], ['William', 'Smith', datetime.date(1987, 8, 27), Decimal('7400.00'), Decimal('80')], ['Elizabeth', 'Bates', datetime.date(1987, 8, 28), Decimal('7300.00'), Decimal('80')], ['Sundita', 'Kumar', datetime.date(1987, 8, 29), Decimal('6100.00'), Decimal('80')], ['Ellen', 'Abel', datetime.date(1987, 8, 30), Decimal('11000.00'), Decimal('80')], ['Alyssa', 'Hutton', datetime.date(1987, 8, 31), Decimal('8800.00'), Decimal('80')], ['Jonathon', 'Taylor', datetime.date(1987, 9, 1), Decimal('8600.00'), Decimal('80')], ['Jack', 'Livingston', datetime.date(1987, 9, 2), Decimal('8400.00'), Decimal('80')], ['Charles', 'Johnson', datetime.date(1987, 9, 4), Decimal('6200.00'), Decimal('80')], ['Steven', 'King', datetime.date(1987, 6, 17), Decimal('24000.00'), Decimal('90')], ['Lex', 'De Haan', datetime.date(1987, 6, 19), Decimal('17000.00'), Decimal('90')], ['Neena', 'Kochhar', datetime.date(1987, 6, 18), Decimal('17000.00'), Decimal('90')], ['John', 'Chen', datetime.date(1987, 6, 27), Decimal('8200.00'), Decimal('100')], ['Daniel', 'Faviet', datetime.date(1987, 6, 26), Decimal('9000.00'), Decimal('100')], ['Nancy', 'Greenberg', datetime.date(1987, 6, 25), Decimal('12000.00'), Decimal('100')], ['Luis', 'Popp', datetime.date(1987, 6, 30), Decimal('6900.00'), Decimal('100')], ['Ismael', 'Sciarra', datetime.date(1987, 6, 28), Decimal('7700.00'), Decimal('100')], ['Shelley', 'Higgins', datetime.date(1987, 9, 30), Decimal('12000.00'), Decimal('110')], ['William', 'Gietz', datetime.date(1987, 10, 1), Decimal('8300.00'), Decimal('110')]]",TRUE
84,Find the ids of the departments where any manager is managing 4 or more employees.,"SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4",SELECT DEPARTMENT_ID FROM employees GROUP BY DEPARTMENT_ID HAVING COUNT(MANAGER_ID) >= 4;,"[[Decimal('100')], [Decimal('60')], [Decimal('30')], [Decimal('50')], [Decimal('80')]]","[[Decimal('60')], [Decimal('80')], [Decimal('100')], [Decimal('30')], [Decimal('50')]]",FALSE
85,display all the information of the employees whose salary if within the range of smallest salary and 2500.,SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500,SELECT * FROM employees WHERE SALARY BETWEEN (SELECT MIN(SALARY) FROM employees) AND 2500;,"[[Decimal('119'), 'Karen', 'Colmenares', 'KCOLMENA', '515.127.4566', datetime.date(1987, 7, 6), 'PU_CLERK', Decimal('2500.00'), Decimal('0.00'), Decimal('114'), Decimal('30')], [Decimal('127'), 'James', 'Landry', 'JLANDRY', '650.124.1334', datetime.date(1987, 7, 14), 'ST_CLERK', Decimal('2400.00'), Decimal('0.00'), Decimal('120'), Decimal('50')], [Decimal('128'), 'Steven', 'Markle', 'SMARKLE', '650.124.1434', datetime.date(1987, 7, 15), 'ST_CLERK', Decimal('2200.00'), Decimal('0.00'), Decimal('120'), Decimal('50')], [Decimal('131'), 'James', 'Marlow', 'JAMRLOW', '650.124.7234', datetime.date(1987, 7, 18), 'ST_CLERK', Decimal('2500.00'), Decimal('0.00'), Decimal('121'), Decimal('50')], [Decimal('132'), 'TJ', 'Olson', 'TJOLSON', '650.124.8234', datetime.date(1987, 7, 19), 'ST_CLERK', Decimal('2100.00'), Decimal('0.00'), Decimal('121'), Decimal('50')], [Decimal('135'), 'Ki', 'Gee', 'KGEE', '650.127.1734', datetime.date(1987, 7, 22), 'ST_CLERK', Decimal('2400.00'), Decimal('0.00'), Decimal('122'), Decimal('50')], [Decimal('136'), 'Hazel', 'Philtanker', 'HPHILTAN', '650.127.1634', datetime.date(1987, 7, 23), 'ST_CLERK', Decimal('2200.00'), Decimal('0.00'), Decimal('122'), Decimal('50')], [Decimal('140'), 'Joshua', 'Patel', 'JPATEL', '650.121.1834', datetime.date(1987, 7, 27), 'ST_CLERK', Decimal('2500.00'), Decimal('0.00'), Decimal('123'), Decimal('50')], [Decimal('144'), 'Peter', 'Vargas', 'PVARGAS', '650.121.2004', datetime.date(1987, 7, 31), 'ST_CLERK', Decimal('2500.00'), Decimal('0.00'), Decimal('124'), Decimal('50')], [Decimal('182'), 'Martha', 'Sullivan', 'MSULLIVA', '650.507.9878', datetime.date(1987, 9, 7), 'SH_CLERK', Decimal('2500.00'), Decimal('0.00'), Decimal('120'), Decimal('50')], [Decimal('191'), 'Randall', 'Perkins', 'RPERKINS', '650.505.4876', datetime.date(1987, 9, 16), 'SH_CLERK', Decimal('2500.00'), Decimal('0.00'), Decimal('122'), Decimal('50')]]","[[Decimal('119'), 'Karen', 'Colmenares', 'KCOLMENA', '515.127.4566', datetime.date(1987, 7, 6), 'PU_CLERK', Decimal('2500.00'), Decimal('0.00'), Decimal('114'), Decimal('30')], [Decimal('127'), 'James', 'Landry', 'JLANDRY', '650.124.1334', datetime.date(1987, 7, 14), 'ST_CLERK', Decimal('2400.00'), Decimal('0.00'), Decimal('120'), Decimal('50')], [Decimal('128'), 'Steven', 'Markle', 'SMARKLE', '650.124.1434', datetime.date(1987, 7, 15), 'ST_CLERK', Decimal('2200.00'), Decimal('0.00'), Decimal('120'), Decimal('50')], [Decimal('131'), 'James', 'Marlow', 'JAMRLOW', '650.124.7234', datetime.date(1987, 7, 18), 'ST_CLERK', Decimal('2500.00'), Decimal('0.00'), Decimal('121'), Decimal('50')], [Decimal('132'), 'TJ', 'Olson', 'TJOLSON', '650.124.8234', datetime.date(1987, 7, 19), 'ST_CLERK', Decimal('2100.00'), Decimal('0.00'), Decimal('121'), Decimal('50')], [Decimal('135'), 'Ki', 'Gee', 'KGEE', '650.127.1734', datetime.date(1987, 7, 22), 'ST_CLERK', Decimal('2400.00'), Decimal('0.00'), Decimal('122'), Decimal('50')], [Decimal('136'), 'Hazel', 'Philtanker', 'HPHILTAN', '650.127.1634', datetime.date(1987, 7, 23), 'ST_CLERK', Decimal('2200.00'), Decimal('0.00'), Decimal('122'), Decimal('50')], [Decimal('140'), 'Joshua', 'Patel', 'JPATEL', '650.121.1834', datetime.date(1987, 7, 27), 'ST_CLERK', Decimal('2500.00'), Decimal('0.00'), Decimal('123'), Decimal('50')], [Decimal('144'), 'Peter', 'Vargas', 'PVARGAS', '650.121.2004', datetime.date(1987, 7, 31), 'ST_CLERK', Decimal('2500.00'), Decimal('0.00'), Decimal('124'), Decimal('50')], [Decimal('182'), 'Martha', 'Sullivan', 'MSULLIVA', '650.507.9878', datetime.date(1987, 9, 7), 'SH_CLERK', Decimal('2500.00'), Decimal('0.00'), Decimal('120'), Decimal('50')], [Decimal('191'), 'Randall', 'Perkins', 'RPERKINS', '650.505.4876', datetime.date(1987, 9, 16), 'SH_CLERK', Decimal('2500.00'), Decimal('0.00'), Decimal('122'), Decimal('50')]]",TRUE
86,"display the employee number, name( first name and last name ), and salary for all employees who earn more than the average salary and who work in a department with any employee with a 'J' in their first name.","SELECT employee_id ,  first_name ,  last_name ,  salary FROM employees WHERE salary  >  ( SELECT AVG (salary) FROM employees ) AND department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%J%')","SELECT e1.EMPLOYEE_ID, e1.FIRST_NAME, e1.LAST_NAME, e1.SALARY FROM employees e1 WHERE e1.SALARY > (SELECT AVG(SALARY) FROM employees) AND e1.DEPARTMENT_ID IN (     SELECT e2.DEPARTMENT_ID     FROM employees e2     WHERE e2.FIRST_NAME LIKE '%J%' );","[[Decimal('108'), 'Nancy', 'Greenberg', Decimal('12000.00')], [Decimal('109'), 'Daniel', 'Faviet', Decimal('9000.00')], [Decimal('110'), 'John', 'Chen', Decimal('8200.00')], [Decimal('111'), 'Ismael', 'Sciarra', Decimal('7700.00')], [Decimal('112'), 'Jose Manuel', 'Urman', Decimal('7800.00')], [Decimal('113'), 'Luis', 'Popp', Decimal('6900.00')], [Decimal('120'), 'Matthew', 'Weiss', Decimal('8000.00')], [Decimal('121'), 'Adam', 'Fripp', Decimal('8200.00')], [Decimal('122'), 'Payam', 'Kaufling', Decimal('7900.00')], [Decimal('123'), 'Shanta', 'Vollman', Decimal('6500.00')], [Decimal('145'), 'John', 'Russell', Decimal('14000.00')], [Decimal('146'), 'Karen', 'Partners', Decimal('13500.00')], [Decimal('147'), 'Alberto', 'Errazuriz', Decimal('12000.00')], [Decimal('148'), 'Gerald', 'Cambrault', Decimal('11000.00')], [Decimal('149'), 'Eleni', 'Zlotkey', Decimal('10500.00')], [Decimal('150'), 'Peter', 'Tucker', Decimal('10000.00')], [Decimal('151'), 'David', 'Bernstein', Decimal('9500.00')], [Decimal('152'), 'Peter', 'Hall', Decimal('9000.00')], [Decimal('153'), 'Christopher', 'Olsen', Decimal('8000.00')], [Decimal('154'), 'Nanette', 'Cambrault', Decimal('7500.00')], [Decimal('155'), 'Oliver', 'Tuvault', Decimal('7000.00')], [Decimal('156'), 'Janette', 'King', Decimal('10000.00')], [Decimal('157'), 'Patrick', 'Sully', Decimal('9500.00')], [Decimal('158'), 'Allan', 'McEwen', Decimal('9000.00')], [Decimal('159'), 'Lindsey', 'Smith', Decimal('8000.00')], [Decimal('160'), 'Louise', 'Doran', Decimal('7500.00')], [Decimal('161'), 'Sarath', 'Sewall', Decimal('7000.00')], [Decimal('162'), 'Clara', 'Vishney', Decimal('10500.00')], [Decimal('163'), 'Danielle', 'Greene', Decimal('9500.00')], [Decimal('164'), 'Mattea', 'Marvins', Decimal('7200.00')], [Decimal('165'), 'David', 'Lee', Decimal('6800.00')], [Decimal('168'), 'Lisa', 'Ozer', Decimal('11500.00')], [Decimal('169'), 'Harrison', 'Bloom', Decimal('10000.00')], [Decimal('170'), 'Tayler', 'Fox', Decimal('9600.00')], [Decimal('171'), 'William', 'Smith', Decimal('7400.00')], [Decimal('172'), 'Elizabeth', 'Bates', Decimal('7300.00')], [Decimal('174'), 'Ellen', 'Abel', Decimal('11000.00')], [Decimal('175'), 'Alyssa', 'Hutton', Decimal('8800.00')], [Decimal('176'), 'Jonathon', 'Taylor', Decimal('8600.00')], [Decimal('177'), 'Jack', 'Livingston', Decimal('8400.00')], [Decimal('178'), 'Kimberely', 'Grant', Decimal('7000.00')]]","[[Decimal('108'), 'Nancy', 'Greenberg', Decimal('12000.00')], [Decimal('109'), 'Daniel', 'Faviet', Decimal('9000.00')], [Decimal('110'), 'John', 'Chen', Decimal('8200.00')], [Decimal('111'), 'Ismael', 'Sciarra', Decimal('7700.00')], [Decimal('112'), 'Jose Manuel', 'Urman', Decimal('7800.00')], [Decimal('113'), 'Luis', 'Popp', Decimal('6900.00')], [Decimal('120'), 'Matthew', 'Weiss', Decimal('8000.00')], [Decimal('121'), 'Adam', 'Fripp', Decimal('8200.00')], [Decimal('122'), 'Payam', 'Kaufling', Decimal('7900.00')], [Decimal('123'), 'Shanta', 'Vollman', Decimal('6500.00')], [Decimal('145'), 'John', 'Russell', Decimal('14000.00')], [Decimal('146'), 'Karen', 'Partners', Decimal('13500.00')], [Decimal('147'), 'Alberto', 'Errazuriz', Decimal('12000.00')], [Decimal('148'), 'Gerald', 'Cambrault', Decimal('11000.00')], [Decimal('149'), 'Eleni', 'Zlotkey', Decimal('10500.00')], [Decimal('150'), 'Peter', 'Tucker', Decimal('10000.00')], [Decimal('151'), 'David', 'Bernstein', Decimal('9500.00')], [Decimal('152'), 'Peter', 'Hall', Decimal('9000.00')], [Decimal('153'), 'Christopher', 'Olsen', Decimal('8000.00')], [Decimal('154'), 'Nanette', 'Cambrault', Decimal('7500.00')], [Decimal('155'), 'Oliver', 'Tuvault', Decimal('7000.00')], [Decimal('156'), 'Janette', 'King', Decimal('10000.00')], [Decimal('157'), 'Patrick', 'Sully', Decimal('9500.00')], [Decimal('158'), 'Allan', 'McEwen', Decimal('9000.00')], [Decimal('159'), 'Lindsey', 'Smith', Decimal('8000.00')], [Decimal('160'), 'Louise', 'Doran', Decimal('7500.00')], [Decimal('161'), 'Sarath', 'Sewall', Decimal('7000.00')], [Decimal('162'), 'Clara', 'Vishney', Decimal('10500.00')], [Decimal('163'), 'Danielle', 'Greene', Decimal('9500.00')], [Decimal('164'), 'Mattea', 'Marvins', Decimal('7200.00')], [Decimal('165'), 'David', 'Lee', Decimal('6800.00')], [Decimal('168'), 'Lisa', 'Ozer', Decimal('11500.00')], [Decimal('169'), 'Harrison', 'Bloom', Decimal('10000.00')], [Decimal('170'), 'Tayler', 'Fox', Decimal('9600.00')], [Decimal('171'), 'William', 'Smith', Decimal('7400.00')], [Decimal('172'), 'Elizabeth', 'Bates', Decimal('7300.00')], [Decimal('174'), 'Ellen', 'Abel', Decimal('11000.00')], [Decimal('175'), 'Alyssa', 'Hutton', Decimal('8800.00')], [Decimal('176'), 'Jonathon', 'Taylor', Decimal('8600.00')], [Decimal('177'), 'Jack', 'Livingston', Decimal('8400.00')], [Decimal('178'), 'Kimberely', 'Grant', Decimal('7000.00')]]",TRUE
87,What are the top 3 artists with the largest number of songs in the language Bangla?,"SELECT T1.artist_name 
FROM artist AS T1 
JOIN song AS T2 ON T1.artist_name  =  T2.artist_name 
WHERE T2.languages  =  'bangla' 
GROUP BY T1.artist_name ORDER BY count(*) DESC LIMIT 3","SELECT artist_name, COUNT(*) as song_count FROM song WHERE languages = 'Bangla' GROUP BY artist_name ORDER BY song_count DESC LIMIT 3;","[['Farida'], ['Prity'], ['Shrikanta']]",[['None']],FALSE
88,List the brands of lenses that took both a picture of mountains with range 'Toubkal Atlas' and a picture of mountains with range 'Lasta Massif',SELECT T3.brand FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id  =  T3.id WHERE T1.range  =  'Toubkal Atlas' INTERSECT SELECT T3.brand FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id  =  T3.id WHERE T1.range  =  'Lasta Massif',"SELECT DISTINCT cl.brand FROM camera_lens cl JOIN photos p ON cl.id = p.camera_lens_id JOIN mountain m ON p.mountain_id = m.id WHERE m.range IN ('Toubkal Atlas', 'Lasta Massif') GROUP BY cl.brand HAVING COUNT(DISTINCT m.range) = 2;",[['Sigma']],[['Sigma']],TRUE
89,Which channels broadcast both in the morning and at night? Give me the channel names.,SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning' INTERSECT SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Night',"SELECT DISTINCT c.Name FROM channel c JOIN broadcast b ON c.Channel_ID = b.Channel_ID WHERE b.Time_of_day IN ('morning', 'night') GROUP BY c.Name HAVING COUNT(DISTINCT b.Time_of_day) = 2;",[['CCTV-1']],[['None']],FALSE
90,find the program owners that have some programs in both morning and night time.,SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  'Morning' INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  'Night',SELECT DISTINCT p.Owner FROM program p JOIN broadcast b ON p.Program_ID = b.Program_ID WHERE b.Time_of_day = 'morning' AND p.Program_ID IN (     SELECT p2.Program_ID     FROM program p2     JOIN broadcast b2 ON p2.Program_ID = b2.Program_ID     WHERE b2.Time_of_day = 'night' );,"[['Southern Media Corporation (SMC)'], ['Beijing Television (BTV)'], ['Hunan Broadcasting System (HBS)']]",[['None']],FALSE
91,"List the subject ID, name of subject and the number of courses available for each subject in ascending order of the course counts.","SELECT T1.subject_id ,  T2.subject_name ,  COUNT(*) 
FROM ""Courses"" AS T1 JOIN ""Subjects"" AS T2 ON T1.subject_id  =  T2.subject_id 
GROUP BY T1.subject_id, T2.subject_name  
ORDER BY COUNT(*) ASC","SELECT s.subject_id, s.subject_name, COUNT(c.course_id) AS number_of_courses FROM Subjects s LEFT JOIN Courses c ON s.subject_id = c.subject_id GROUP BY s.subject_id, s.subject_name ORDER BY number_of_courses ASC;","[[2, 'Arts', 4], [3, 'Language', 5], [1, 'Computer Science', 6]]",[['Error']],FALSE
92,Which claims caused more than 2 settlements or have the maximum claim value? List the date the claim was made and the claim id.,"SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.Claim_id HAVING count(*)  >  2 UNION SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id WHERE T1.Amount_Claimed  =  ( SELECT max(Amount_Claimed) FROM Claims )","SELECT Claims.Claim_ID, Claims.Date_Claim_Made FROM Claims JOIN Settlements ON Claims.Claim_ID = Settlements.Claim_ID GROUP BY Claims.Claim_ID, Claims.Date_Claim_Made HAVING COUNT(Settlements.Settlement_ID) > 2 OR MAX(Claims.Amount_Claimed) = (SELECT MAX(Amount_Claimed) FROM Claims);","[[datetime.date(2017, 10, 21), 801], [datetime.date(2017, 8, 3), 571]]","[[571, datetime.date(2017, 8, 3)], [801, datetime.date(2017, 10, 21)]]",FALSE
93,Give me the the customer details and id for the customers who had two or more policies but did not file any claims.,"SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 EXCEPT SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id JOIN Claims AS T3 ON T2.policy_id  =  T3.policy_id","SELECT Customers.Customer_Details, Customers.Customer_ID FROM Customers JOIN Customer_Policies ON Customers.Customer_ID = Customer_Policies.Customer_ID WHERE Customers.Customer_ID NOT IN (SELECT Customer_Policies.Customer_ID FROM Customer_Policies JOIN Claims ON Customer_Policies.Policy_ID = Claims.Policy_ID) GROUP BY Customers.Customer_ID, Customers.Customer_Details HAVING COUNT(Customer_Policies.Policy_ID) >= 2;","[['Dr. Diana Rath', 4]]","[['Dr. Diana Rath', 4]]",TRUE
94,"Among all the claims, what is the settlement amount of the claim with the largest claim amount? List both the settlement amount and claim amount.","SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Claimed DESC LIMIT 1","SELECT Amount_Claimed, Amount_Settled FROM Claims WHERE Amount_Claimed = (SELECT MAX(Amount_Claimed) FROM Claims);","[[1528, 89632]]","[[89632, 1528]]",FALSE
95,"Give me the claim date, settlement date for all the claims whose claimed amount is larger than the average.","SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Claims WHERE Amount_Claimed  >  ( SELECT avg(Amount_Claimed) FROM Claims )","SELECT Date_Claim_Made, Date_Claim_Settled FROM Claims WHERE Amount_Claimed > (SELECT AVG(Amount_Claimed) FROM Claims);","[[datetime.date(2016, 8, 12), datetime.date(2018, 1, 27)], [datetime.date(2017, 2, 24), datetime.date(2018, 1, 21)], [datetime.date(2018, 6, 14), datetime.date(2017, 12, 20)], [datetime.date(2017, 8, 3), datetime.date(2018, 2, 18)], [datetime.date(2016, 8, 26), datetime.date(2017, 9, 4)], [datetime.date(2018, 7, 13), datetime.date(2017, 11, 22)]]","[[datetime.date(2016, 8, 12), datetime.date(2018, 1, 27)], [datetime.date(2017, 2, 24), datetime.date(2018, 1, 21)], [datetime.date(2018, 6, 14), datetime.date(2017, 12, 20)], [datetime.date(2017, 8, 3), datetime.date(2018, 2, 18)], [datetime.date(2016, 8, 26), datetime.date(2017, 9, 4)], [datetime.date(2018, 7, 13), datetime.date(2017, 11, 22)]]",TRUE
96,What are the first and last names of the first-grade students who are NOT taught by teacher OTHA MOYER?,"SELECT DISTINCT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  1 EXCEPT SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  'OTHA' AND T2.lastname  =  'MOYER'","SELECT list.FirstName, list.LastName FROM list LEFT JOIN teachers ON list.Classroom = teachers.Classroom WHERE list.Grade = 1 AND (teachers.LastName != 'OTHA' OR teachers.FirstName != 'MOYER');","[['RODGER', 'RANSLER'], ['MARCUS', 'RUNKLE'], ['ANTONY', 'BRIGHTBILL'], ['CHANTAL', 'HANNEMANN'], ['REYNALDO', 'BARTKUS'], ['KERI', 'TRAYWICK'], ['PATRINA', 'AMY']]","[['ANTONY', 'BRIGHTBILL'], ['KERI', 'TRAYWICK'], ['RODGER', 'RANSLER'], ['MARCUS', 'RUNKLE'], ['CHANTAL', 'HANNEMANN'], ['REYNALDO', 'BARTKUS'], ['PATRINA', 'AMY'], ['SHANAE', 'BIBB'], ['LANCE', 'HOOSOCK'], ['MEL', 'BALBOA'], ['ANIKA', 'YUEN'], ['EVELINA', 'BROMLEY']]",FALSE
97,Show the names of employees that work for companies with sales bigger than 200.,"SELECT T2.""Name""
FROM employment AS T1 
JOIN people AS T2 ON T1.""People_ID"" =  T2.""People_ID"" 
JOIN company AS T3 ON T1.""Company_ID""  =  T3.""Company_ID""
WHERE T3.""Sales_in_Billion""  >  200",SELECT people.Name FROM people JOIN employment ON people.People_ID = employment.People_ID JOIN company ON employment.Company_ID = company.Company_ID WHERE company.Sales_in_Billion > 200;,"[['Tom Sheehey'], ['Jerry Corcoran'], ['Darryl Kennedy']]",[['Error']],FALSE
98,"Who is the ""CTO"" of club ""Hopkins Student Enterprises""? Show the first name and last name.","SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  'Hopkins Student Enterprises' AND t2.position  =  'CTO'","SELECT Student.Fname, Student.LName FROM Student JOIN Member_of_club ON Student.StuID = Member_of_club.StuID JOIN Club ON Member_of_club.ClubID = Club.ClubID WHERE Member_of_club.Position = 'CTO' AND Club.ClubName = 'Hopkins Student Enterprises';","[['Jandy', 'Nelson']]","[['Jandy', 'Nelson']]",TRUE
99,Find the name and age of the person who is a friend of both Dan and Alice.,"SELECT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' INTERSECT SELECT T1.name ,   T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Alice'","SELECT P.name, P.age FROM Person P JOIN PersonFriend PF ON P.name = PF.friend WHERE PF.name IN ('Dan', 'Alice') GROUP BY P.name, P.age HAVING COUNT(DISTINCT PF.name) = 2;","[['Zach', 45]]",[['None']],FALSE
100,"What are the names, ages, and jobs of all people who are friends with Alice for the longest amount of time?","SELECT T1.name ,  T1.age ,  T1.job FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend =  'Alice' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE friend =  'Alice')","SELECT P.name, P.age, P.job FROM Person P JOIN PersonFriend PF ON P.name = PF.friend WHERE PF.name = 'Alice' AND PF.year = (SELECT MIN(year) FROM PersonFriend WHERE name = 'Alice');","[['Zach', 45, 'doctor']]","[['Bob', 35, 'engineer']]",FALSE
101,Find Alice's friends of friends.,SELECT DISTINCT T4.name FROM PersonFriend AS T1 JOIN Person AS T2 ON T1.name  =  T2.name JOIN PersonFriend AS T3 ON T1.friend  =  T3.name JOIN PersonFriend AS T4 ON T3.friend  =  T4.name WHERE T2.name  =  'Alice' AND T4.name != 'Alice',SELECT pf2.friend  FROM PersonFriend pf1  JOIN PersonFriend pf2 ON pf1.friend = pf2.name  WHERE pf1.name = 'Alice';,[['Zach']],[['Zach']],TRUE
102,What are the names of documents that have both one of the three most common types and one of three most common structures?,"(SELECT document_name FROM documents 
GROUP BY document_type_code, document_name 
ORDER BY count(*) DESC LIMIT 3) 
INTERSECT 
(SELECT document_name FROM documents 
GROUP BY document_structure_code, document_name 
ORDER BY count(*) DESC LIMIT 3)",SELECT document_name FROM Documents WHERE document_type_code IN (     SELECT document_type_code     FROM Documents     GROUP BY document_type_code     ORDER BY COUNT(*) DESC     LIMIT 3 ) AND document_structure_code IN (     SELECT document_structure_code     FROM Documents     GROUP BY document_structure_code     ORDER BY COUNT(*) DESC     LIMIT 3 );,[['How to cook pasta']],"[['Learning English'], ['Learning Database'], ['Learning Japanese'], ['How to cook pasta'], ['Humanity: a fact'], ['Winter Sails'], ['Life about Claude Monet'], ['Relationships between History and Arts']]",FALSE
103,Find names of the document without any images.,SELECT document_name FROM documents EXCEPT SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code JOIN document_sections_images AS t3 ON t2.section_id  =  t3.section_id,SELECT document_name  FROM Documents  WHERE document_code NOT IN (     SELECT document_code      FROM Document_Sections      WHERE section_id IN (         SELECT section_id          FROM Document_Sections_Images     ) );,"[['Learning Database'], ['Life about Claude Monet'], ['How to cook pasta'], ['Learning Japanese'], ['Humanity: a fact']]","[['Learning Database'], ['Learning Japanese'], ['How to cook pasta'], ['Humanity: a fact'], ['Life about Claude Monet']]",FALSE
104,Show the names of products that are in at least two events in ascending alphabetical order of product name.,SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*)  >=  2 ORDER BY T1.Product_Name,SELECT Product_Name FROM Products WHERE Product_ID IN (     SELECT Product_ID     FROM Products_in_Events     GROUP BY Product_ID     HAVING COUNT(Event_ID) >= 2 ) ORDER BY Product_Name ASC;,"[['Men suits'], ['Special Dinning'], ['TV Equipments']]","[['Men suits'], ['Special Dinning'], ['TV Equipments']]",TRUE
105,What are the name and payment method of customers who have both mailshots in 'Order' outcome and mailshots in 'No Response' outcome.,"SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'Order' INTERSECT SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'No Response'","SELECT DISTINCT c.customer_name, c.payment_method FROM Customers c JOIN Mailshot_Customers mc1 ON c.customer_id = mc1.customer_id JOIN Mailshot_Customers mc2 ON c.customer_id = mc2.customer_id WHERE mc1.outcome_code = 'Order' AND mc2.outcome_code = 'No Response';","[['Wendell', 'Credit Card'], ['Carlotta', 'Direct Debit']]","[['Carlotta', 'Direct Debit'], ['Wendell', 'Credit Card']]",FALSE
106,Find the name and address of the customers who have both New and Pending orders.,"SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  'New' INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  'Pending'","SELECT Customers.customer_name, Customers.customer_address FROM Customers JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id WHERE Customer_Orders.order_status_code IN ('New', 'Pending') GROUP BY Customers.customer_id HAVING COUNT(DISTINCT Customer_Orders.order_status_code) = 2;","[['Lexus', '9581 Will Flat Suite 272\nEast Cathryn, WY 30751-4404']]","[['Lexus', '9581 Will Flat Suite 272\nEast Cathryn, WY 30751-4404']]",TRUE
107,What are the ids of all products that were either ordered more than 3 times or have a cumulative amount purchased of above 80000?,"SELECT product_id
FROM Order_Items
GROUP BY product_id
HAVING COUNT(*) > 3
UNION
SELECT product_id
FROM Product_Suppliers
GROUP BY product_id
HAVING SUM(CAST(total_amount_purchased AS numeric)) > 80000;",SELECT product_id  FROM Order_Items  GROUP BY product_id  HAVING COUNT(order_id) > 3  UNION  SELECT product_id  FROM Product_Suppliers  WHERE CAST(total_amount_purchased AS INTEGER) > 80000;,"[[5], [4], [8]]",[['Error']],FALSE
108,What are the distinct names of customers who have purchased a keyboard?,SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id JOIN products AS T4 ON T3.product_id  =  T4.product_id WHERE T4.product_name  =  'keyboard',SELECT DISTINCT Customers.customer_name FROM Customers JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id JOIN Order_Items ON Customer_Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id WHERE Products.product_name = 'keyboard';,"[['Cordell'], ['Jon']]","[['Cordell'], ['Jon']]",TRUE
109,Find the name and gender of the staff who has been assigned the job of Sales Person but never Clerical Staff.,"SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  'Sales Person' EXCEPT SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  'Clerical Staff'","SELECT Staff.staff_name, Staff.staff_gender FROM Staff INNER JOIN Staff_Department_Assignments ON Staff.staff_id = Staff_Department_Assignments.staff_id WHERE Staff_Department_Assignments.job_title_code = 'Sales Person' AND Staff.staff_id NOT IN (     SELECT Staff.staff_id     FROM Staff     INNER JOIN Staff_Department_Assignments ON Staff.staff_id = Staff_Department_Assignments.staff_id     WHERE Staff_Department_Assignments.job_title_code = 'Clerical Staff' );","[['Melody', '1'], ['Sabrina', '1'], ['Zakary', '1']]","[['Zakary', '1'], ['Sabrina', '1'], ['Melody', '1']]",FALSE
110,"Please show the names of aircrafts associated with airport with name ""London Gatwick"".","SELECT T1.""Aircraft"" FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.""Aircraft_ID""  =  T2.""Aircraft_ID"" JOIN airport AS T3 ON T2.""Airport_ID""  =  T3.""Airport_ID"" WHERE T3.""Airport_Name""  =  'London Gatwick'",SELECT aircraft.Aircraft FROM aircraft JOIN airport_aircraft ON aircraft.Aircraft_ID = airport_aircraft.Aircraft_ID JOIN airport ON airport_aircraft.Airport_ID = airport.Airport_ID WHERE airport.Airport_Name = 'London Gatwick';,[['Robinson R-22']],[['Error']],FALSE
111,find the name and age of the pilot who has won the most number of times among the pilots who are younger than 30.,"SELECT t1.""Name"" ,  t1.""Age"" 
FROM pilot AS t1 
JOIN MATCH AS t2 ON t1.""Pilot_Id""  =  t2.""Winning_Pilot"" 
WHERE t1.""Age""  <  30 
GROUP BY t1.""Name"" ,  t1.""Age"" 
ORDER BY count(*) DESC LIMIT 1","SELECT p.""Name"", p.""Age"" FROM pilot p WHERE p.""Pilot_Id"" = (   SELECT m.""Winning_Pilot""   FROM match m   WHERE m.""Winning_Pilot"" IN (     SELECT ""Pilot_Id""     FROM pilot     WHERE ""Age"" < 30   )   GROUP BY m.""Winning_Pilot""   ORDER BY COUNT(*) DESC   LIMIT 1 );","[['Ayana Spencer', 25]]","[['Ayana Spencer', 25]]",TRUE
112,"How many services has each resident requested? List the resident id, details, and the count in descending order of the count.","SELECT T1.resident_id ,  T1.other_details ,  count(*) 
FROM Residents AS T1 
JOIN Residents_Services AS T2 ON T1.resident_id  =  T2.resident_id 
GROUP BY T1.resident_id, T1.other_details  
ORDER BY count(*) DESC","SELECT resident_id, other_details, COUNT(service_id) AS service_count FROM Residents_Services GROUP BY resident_id, other_details ORDER BY service_count DESC;","[[28, 'Miss Alanis Lockman', 1], [87, 'Mrs. Raphaelle Fisher', 1], [67, 'Terrill Bernhard', 1], [6, 'Anderson Batz', 1], [45, 'Prof. Nasir Hoppe', 1], [47, 'Tiffany Jaskolski', 1], [43, 'Elroy Schuster', 1], [90, 'Cassie Johnson', 1], [88, 'Jacques Glover II', 1], [23, 'Jess Wyman', 1], [83, 'Loy Walter', 1]]","[[47, 'Unsatisfied', 1], [43, 'Unsatisfied', 1], [6, 'Satisfied', 1], [87, 'Unsatisfied', 1], [83, 'Unsatisfied', 1], [67, 'Unsatisfied', 1], [88, 'Unsatisfied', 1], [45, 'Unsatisfied', 1], [23, 'Unsatisfied', 1], [28, 'Unsatisfied', 1], [90, 'Unsatisfied', 1]]",FALSE
113,"Which city is the headquarter of the store named ""Blackville"" in?","SELECT t3.""Headquartered_City"" 
FROM store AS t1 
JOIN store_district AS t2 ON t1.""Store_ID"" =  t2.""Store_ID"" 
JOIN district AS t3 ON t2.""District_ID""  =  t3.""District_ID"" 
WHERE t1.""Store_Name""  =  'Blackville'",SELECT district.Headquartered_City FROM district JOIN store_district ON district.District_ID = store_district.District_ID JOIN store ON store_district.Store_ID = store.Store_ID WHERE store.Store_Name = 'Blackville';,[['Bhakkar City']],[['Error']],FALSE
114,Find the number of stores in each city.,"SELECT t3.""Headquartered_City"" ,  count(*) 
FROM store AS t1 
JOIN store_district AS t2 ON t1.""Store_ID""  =  t2.""Store_ID""
JOIN district AS t3 ON t2.""District_ID""  =  t3.""District_ID""
GROUP BY t3.""Headquartered_City""","SELECT d.Headquartered_City, COUNT(s.Store_ID)  FROM district d  JOIN store_district sd ON d.District_ID = sd.District_ID  JOIN store s ON sd.Store_ID = s.Store_ID  GROUP BY d.Headquartered_City;","[['Hafizabad City', 1], ['Bhakkar City', 1], ['Bahawalpur City', 1], ['Khanewal City', 2]]",[['Error']],FALSE
115,How many stores are headquarted in each city?,"SELECT t3.""Headquartered_City"" ,  count(*) 
FROM store AS t1 
JOIN store_district AS t2 ON t1.""Store_ID""  =  t2.""Store_ID""
JOIN district AS t3 ON t2.""District_ID""  =  t3.""District_ID"" 
GROUP BY t3.""Headquartered_City""","SELECT d.Headquartered_City, COUNT(s.Store_ID)  FROM district d  JOIN store_district sd ON d.District_ID = sd.District_ID  JOIN store s ON sd.Store_ID = s.Store_ID  GROUP BY d.Headquartered_City;","[['Hafizabad City', 1], ['Bhakkar City', 1], ['Bahawalpur City', 1], ['Khanewal City', 2]]",[['Error']],FALSE
116,Find the city with the most number of stores.,"SELECT t3.""Headquartered_City""
FROM store AS t1 
JOIN store_district AS t2 ON t1.""Store_ID""  =  t2.""Store_ID""
JOIN district AS t3 ON t2.""District_ID""  =  t3.""District_ID"" 
GROUP BY t3.""Headquartered_City""
ORDER BY count(*) DESC LIMIT 1","SELECT ""Headquartered_City"" FROM ""district"" JOIN ""store_district"" ON ""district"".""District_ID"" = ""store_district"".""District_ID"" GROUP BY ""Headquartered_City"" ORDER BY COUNT(""store_district"".""Store_ID"") DESC LIMIT 1;",[['Khanewal City']],[['Khanewal City']],TRUE
117,What is the city with the most number of flagship stores?,"SELECT t3.""Headquartered_City"" FROM ""store"" AS t1 JOIN ""store_district"" AS t2 ON t1.""Store_ID"" = t2.""Store_ID"" JOIN ""district"" AS t3 ON t2.""District_ID"" = t3.""District_ID"" GROUP BY t3.""Headquartered_City"" ORDER BY count(*) DESC LIMIT 1","SELECT ""Headquartered_City"" FROM ""district"" JOIN ""store_district"" ON ""district"".""District_ID"" = ""store_district"".""District_ID"" JOIN ""store"" ON ""store_district"".""Store_ID"" = ""store"".""Store_ID"" WHERE ""store"".""Type"" = 'flagship' GROUP BY ""Headquartered_City"" ORDER BY COUNT(*) DESC LIMIT 1;",[['Khanewal City']],[['None']],FALSE
118,Find the names of districts where have both city mall and village store type stores.,"SELECT t3.""District_name"" FROM ""store"" AS t1 JOIN ""store_district"" AS t2 ON t1.""Store_ID"" = t2.""Store_ID"" JOIN ""district"" AS t3 ON t2.""District_ID"" = t3.""District_ID"" WHERE t1.""Type"" = 'City Mall' INTERSECT SELECT t3.""District_name"" FROM store AS t1 JOIN ""store_district"" AS t2 ON t1.""Store_ID"" = t2.""Store_ID"" JOIN ""district"" AS t3 ON t2.""District_ID"" = t3.""District_ID"" WHERE t1.""Type"" = 'Village Store';","SELECT DISTINCT d.District_name FROM district d JOIN store_district sd ON d.District_ID = sd.District_ID JOIN store s ON sd.Store_ID = s.Store_ID WHERE s.Type IN ('city mall', 'village store') GROUP BY d.District_name HAVING COUNT(DISTINCT s.Type) = 2;",[['Khanewal District']],[['Error']],FALSE
119,What are the names of the districts that have both mall and village store style shops?,"SELECT t3.""District_name"" FROM ""store"" AS t1 JOIN ""store_district"" AS t2 ON t1.""Store_ID"" = t2.""Store_ID"" JOIN ""district"" AS t3 ON t2.""District_ID"" = t3.""District_ID"" WHERE t1.""Type"" = 'City Mall' INTERSECT SELECT t3.""District_name"" FROM store AS t1 JOIN ""store_district"" AS t2 ON t1.""Store_ID"" = t2.""Store_ID"" JOIN ""district"" AS t3 ON t2.""District_ID"" = t3.""District_ID"" WHERE t1.""Type"" = 'Village Store';","SELECT DISTINCT d.District_name FROM district d JOIN store_district sd ON d.District_ID = sd.District_ID JOIN store s ON sd.Store_ID = s.Store_ID WHERE s.Type IN ('mall', 'village') GROUP BY d.District_name HAVING COUNT(DISTINCT s.Type) = 2;",[['Khanewal District']],[['Error']],FALSE
120,Find the names of states that have some college students playing in goalie and mid positions.,SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie' INTERSECT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid',"SELECT DISTINCT College.state FROM College JOIN Tryout ON College.cName = Tryout.cName WHERE Tryout.pPos IN ('goalie', 'mid');",[['LA']],"[['AZ'], ['LA'], ['OK']]",FALSE
121,What are the names of the states that have some college students playing in the positions of goalie and mid-field?,SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie' INTERSECT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid',"SELECT DISTINCT College.state FROM College JOIN Tryout ON College.cName = Tryout.cName WHERE Tryout.pPos IN ('goalie', 'mid-field');",[['LA']],"[['AZ'], ['LA']]",FALSE
122,Find the names of states that have some college students playing in the mid position but not in the goalie position.,SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie',SELECT DISTINCT state  FROM College  WHERE cName IN (     SELECT cName      FROM Tryout      WHERE pPos = 'mid'  )  AND cName NOT IN (     SELECT cName      FROM Tryout      WHERE pPos = 'goalie' );,[['OK']],[['OK']],TRUE
123,What are the names of all the states with college students playing in the mid position but no goalies?,SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie',SELECT DISTINCT c.state FROM College c JOIN Tryout t ON c.cName = t.cName WHERE t.pPos = 'mid' AND c.cName NOT IN (   SELECT c.cName   FROM College c   JOIN Tryout t ON c.cName = t.cName   WHERE t.pPos = 'goalie' );,[['OK']],[['OK']],TRUE
124,How many states that have some college students playing in the mid position but not in the goalie position.,SELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie') as T,SELECT COUNT(DISTINCT c.state)  FROM College c  JOIN Tryout t ON c.cName = t.cName  WHERE t.pPos = 'mid'  AND c.cName NOT IN (   SELECT cName    FROM Tryout    WHERE pPos = 'goalie' );,[[1]],[[1]],TRUE
125,What is the count of states with college students playing in the mid position but not as goalies?,SELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie') as T,SELECT COUNT(DISTINCT c.state)  FROM College c  JOIN Tryout t ON c.cName = t.cName  WHERE t.pPos = 'mid' AND t.pID NOT IN  (SELECT pID FROM Tryout WHERE pPos = 'goalie');,[[1]],[[2]],FALSE
126,Show names of shops and the carriers of devices they have in stock.,"SELECT T3.""Shop_Name"", T2.""Carrier"" 
FROM ""stock"" AS T1 JOIN ""device"" AS T2 ON T1.""Device_ID"" = T2.""Device_ID"" 
JOIN ""shop"" AS T3 ON T1.""Shop_ID"" = T3.""Shop_ID""","SELECT shop.Shop_Name, device.Carrier FROM shop JOIN stock ON shop.Shop_ID = stock.Shop_ID JOIN device ON stock.Device_ID = device.Device_ID;","[['Dinas Device', 'Vodafone AU'], ['Best Buy', 'Vodafone AU'], ['Ferndale', 'Vodafone AU'], ['Apple', 'Vodafone AU'], ['Dinas Device', 'Bell Mobility'], ['ATnT', 'Vodafone AU'], ['Ferndale', 'Bell Mobility'], ['Gelli repair', 'Bell Mobility']]",[['Error']],FALSE
127,Show the name of the shop that has the most kind of devices in stock.,"SELECT T2.""Shop_Name"" FROM ""stock"" AS T1 JOIN ""shop"" AS T2 ON T1.""Shop_ID"" = T2.""Shop_ID"" GROUP BY T1.""Shop_ID"", T2.""Shop_Name"" ORDER BY COUNT(*) DESC LIMIT 1","SELECT ""Shop_Name"" FROM ""shop"" JOIN ""stock"" ON ""shop"".""Shop_ID"" = ""stock"".""Shop_ID"" GROUP BY ""Shop_Name"" ORDER BY COUNT(DISTINCT ""Device_ID"") DESC LIMIT 1;",[['Dinas Device']],[['Dinas Device']],TRUE
128,Which product has the most problems? Give me the number of problems and the product name.,"SELECT count(*) ,  T1.product_name FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name ORDER BY count(*) DESC LIMIT 1","SELECT product_name, COUNT(*) AS number_of_problems FROM Product JOIN Problems ON Product.product_id = Problems.product_id GROUP BY product_name ORDER BY number_of_problems DESC LIMIT 1;","[[4, 'rose']]","[['rose', 4]]",FALSE
129,What are the product ids for the problems reported by Christop Berge with closure authorised by Ashley Medhurst?,SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = 'Christop' AND T2.staff_last_name = 'Berge' INTERSECT SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = 'Ashley' AND T2.staff_last_name = 'Medhurst',SELECT product_id  FROM Problems  JOIN Staff AS reported_by ON Problems.reported_by_staff_id = reported_by.staff_id  JOIN Staff AS authorised_by ON Problems.closure_authorised_by_staff_id = authorised_by.staff_id  WHERE reported_by.staff_first_name = 'Christop' AND reported_by.staff_last_name = 'Berge'  AND authorised_by.staff_first_name = 'Ashley' AND authorised_by.staff_last_name = 'Medhurst';,[[8]],[[8]],TRUE
130,What are the names of the members and branches at which they are registered sorted by year of registration?,"SELECT T3.name ,  T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id ORDER BY T1.register_year","SELECT member.Name, branch.Name, membership_register_branch.Register_Year FROM member JOIN membership_register_branch ON member.Member_ID = membership_register_branch.Member_ID JOIN branch ON membership_register_branch.Branch_ID = branch.Branch_ID ORDER BY membership_register_branch.Register_Year;","[['Trevard Lindley', 'Brooke Greville'], ['Myron Pryor', 'Zytogorski'], ['Johnny Williams', 'Popert'], ['Jeremy Jarmon', 'Stanley'], ['Ventrell Jenkins', 'Alexandre'], ['Braxton Kelley', 'Cochrane'], ['Corey Peters', 'Alexandre'], ['Micah Johnson', 'Taverner']]","[['Trevard Lindley', 'Brooke Greville', '2016'], ['Myron Pryor', 'Zytogorski', '2016'], ['Johnny Williams', 'Popert', '2016'], ['Jeremy Jarmon', 'Stanley', '2016'], ['Ventrell Jenkins', 'Alexandre', '2016'], ['Braxton Kelley', 'Cochrane', '2016'], ['Corey Peters', 'Alexandre', '2017'], ['Micah Johnson', 'Taverner', '2017']]",FALSE
131,What is the name and opening year for the branch that registered the most members in 2016?,"SELECT T2.name ,T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id WHERE T1.register_year = '2016' GROUP BY T2.branch_id ORDER BY count(*) DESC LIMIT 1","SELECT branch.Name, branch.Open_year FROM branch JOIN membership_register_branch ON branch.Branch_ID = membership_register_branch.Branch_ID WHERE membership_register_branch.Register_Year = '2016' GROUP BY branch.Branch_ID ORDER BY COUNT(membership_register_branch.Member_ID) DESC LIMIT 1;","[['Alexandre', '2001']]","[['Alexandre', '2001']]",TRUE
132,What are the product ids and color descriptions for products with two or more characteristics?,"SELECT t1.product_id, t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code JOIN product_characteristics AS t3 ON t1.product_id = t3.product_id GROUP BY t1.product_id, t2.color_description HAVING count(*) >= 2","SELECT P.product_id, C.color_description FROM Products P JOIN Ref_Colors C ON P.color_code = C.color_code WHERE P.product_id IN (     SELECT PC.product_id     FROM Product_Characteristics PC     GROUP BY PC.product_id     HAVING COUNT(PC.characteristic_id) >= 2 )","[[6, 'blue'], [7, 'red'], [11, 'black'], [12, 'blue']]","[[7, 'red'], [12, 'blue'], [6, 'blue'], [11, 'black']]",FALSE
133,Show the names of customers who use Credit Card payment method and have more than 2 orders.,SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.payment_method_code  =  'Credit Card' GROUP BY T1.customer_id HAVING count(*)  >  2,SELECT c.customer_name FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id WHERE c.payment_method_code = 'Credit Card' GROUP BY c.customer_name HAVING COUNT(co.order_id) > 2;,"[['Sterling'], ['Cleo']]","[['Cleo'], ['Sterling']]",FALSE
134,What are the name and phone of the customer with the most ordered product quantity?,"SELECT T1.customer_name, T1.customer_phone FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id JOIN order_items AS T3 ON T3.order_id = T2.order_id GROUP BY T1.customer_id ORDER BY SUM(CAST(t3.order_quantity AS integer)) DESC LIMIT 1","SELECT c.customer_name, c.customer_phone FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id JOIN Order_Items oi ON co.order_id = oi.order_id GROUP BY c.customer_id ORDER BY SUM(oi.order_quantity::INTEGER) DESC LIMIT 1;","[['Cleo', '1-202-928-5395']]","[['Cleo', '1-202-928-5395']]",TRUE
135,What is the name of the dorm with both a TV Lounge and Study Room listed as amenities?,SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' INTERSECT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room',"SELECT Dorm.dorm_name FROM Dorm JOIN Has_amenity ON Dorm.dormid = Has_amenity.dormid JOIN Dorm_amenity ON Has_amenity.amenid = Dorm_amenity.amenid WHERE Dorm_amenity.amenity_name IN ('TV Lounge', 'Study Room') GROUP BY Dorm.dorm_name HAVING COUNT(DISTINCT Dorm_amenity.amenity_name) = 2;","[['Dorm-plex 2000'], ['Anonymous Donor Hall']]","[['Anonymous Donor Hall'], ['Dorm-plex 2000']]",FALSE
136,Find the first name of students who are living in the dorm that has most number of amenities.,SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T2.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid  =  T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid  =  T5.amenid GROUP BY T3.dormid ORDER BY count(*) DESC LIMIT 1),SELECT Fname  FROM Student  WHERE StuID IN (     SELECT stuid      FROM Lives_in      WHERE dormid IN (         SELECT dormid          FROM Has_amenity          GROUP BY dormid          ORDER BY COUNT(amenid) DESC          LIMIT 1     ) );,"[['Linda'], ['Tracy'], ['Shiela'], ['Dinesh'], ['Paul'], ['Lisa'], ['Jandy'], ['Eric'], ['Derek'], ['David'], ['Steven'], ['Charles'], ['Susan'], ['Mark'], ['Bruce'], ['Michael'], ['Ian'], ['George'], ['Michael'], ['David'], ['Stacy'], ['Mark'], ['Paul'], ['Eric'], ['Jun'], ['Lisa'], ['Sarah'], ['Eric'], ['William'], ['Eric'], ['Sarah']]","[['Ian'], ['Susan'], ['Mark'], ['George'], ['Jandy'], ['Derek'], ['Paul'], ['Eric'], ['David'], ['Steven']]",FALSE
137,What are the amenities in the dorm that a student who has the last name of Smith lives in?,SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid JOIN lives_in AS T4 ON T4.dormid  =  T1.dormid JOIN student AS T5 ON T5.stuid  =  T4.stuid WHERE T5.lname  =  'Smith',SELECT Dorm_amenity.amenity_name FROM Dorm_amenity JOIN Has_amenity ON Dorm_amenity.amenid = Has_amenity.amenid JOIN Lives_in ON Has_amenity.dormid = Lives_in.dormid JOIN Student ON Lives_in.stuid = Student.StuID WHERE Student.LName = 'Smith';,"[['TV Lounge'], ['Study Room'], ['Carpeted Rooms'], ['4 Walls'], ['Roof'], ['Ethernet Ports'], ['Air Conditioning'], ['Heat'], ['Study Room'], ['Carpeted Rooms'], ['4 Walls'], ['Roof'], ['Heat']]","[['TV Lounge'], ['Study Room'], ['Carpeted Rooms'], ['4 Walls'], ['Roof'], ['Ethernet Ports'], ['Air Conditioning'], ['Heat'], ['Study Room'], ['Carpeted Rooms'], ['4 Walls'], ['Roof'], ['Heat']]",TRUE
138,What are the emails of customers who have filed complaints on the product which has had the greatest number of complaints?,SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) LIMIT 1,SELECT c.email_address FROM Customers c JOIN Complaints com ON c.customer_id = com.customer_id WHERE com.product_id = (     SELECT product_id     FROM Complaints     GROUP BY product_id     ORDER BY COUNT(*) DESC     LIMIT 1 );,[['ubeier@example.org']],"[['cayla.satterfield@example.net'], ['vbogisich@example.org'], ['vbogisich@example.org'], ['ubeier@example.org'], ['lavonne.frami@example.com'], ['rzulauf@example.org']]",FALSE
139,Which products has been complained by the customer who has filed least amount of complaints?,"SELECT t1.product_name FROM products AS t1 JOIN complaints AS t2 ON t1.product_id = t2.product_id JOIN customers AS t3 ON t2.customer_id = t3.customer_id GROUP BY t3.customer_id, t1.product_name ORDER BY COUNT(*) LIMIT 1",SELECT P.product_name FROM Products P JOIN Complaints C ON P.product_id = C.product_id WHERE C.customer_id = (     SELECT customer_id     FROM Complaints     GROUP BY customer_id     ORDER BY COUNT(*) ASC     LIMIT 1 );,[['Mouse']],[['The Great Gatsby']],FALSE
140,Return the names of products that have had complaints filed by the customer who has filed the fewest complaints.,"SELECT t1.product_name FROM products AS t1 JOIN complaints AS t2 ON t1.product_id = t2.product_id JOIN customers AS t3 ON t2.customer_id = t3.customer_id GROUP BY t3.customer_id, t1.product_name ORDER BY COUNT(*) LIMIT 1",SELECT P.product_name FROM Products P JOIN Complaints C ON P.product_id = C.product_id WHERE C.customer_id = (     SELECT customer_id     FROM Complaints     GROUP BY customer_id     ORDER BY COUNT(*) ASC     LIMIT 1 );,[['Mouse']],[['The Great Gatsby']],FALSE
141,What are the names of the tourist attractions and the dates when the tourists named Vincent or Vivian visited there?,"SELECT T1.Name, T3.Visit_Date FROM Tourist_Attractions AS T1 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID JOIN VISITORS AS T2 ON T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = 'Vincent' OR T2.Tourist_Details = 'Vivian'","SELECT Tourist_Attractions.Name, Visits.Visit_Date FROM Tourist_Attractions JOIN Visits ON Tourist_Attractions.Tourist_Attraction_ID = Visits.Tourist_Attraction_ID JOIN Visitors ON Visits.Tourist_ID = Visitors.Tourist_ID WHERE Visitors.Tourist_Details LIKE 'Vincent%' OR Visitors.Tourist_Details LIKE 'Vivian%';","[['flying elephant', Timestamp('2013-08-06 05:35:51')], ['fun shops', Timestamp('2013-10-27 09:56:08')], ['fun games', Timestamp('2017-03-19 08:48:19')], ['parking', Timestamp('2007-09-17 10:12:45')]]","[['flying elephant', Timestamp('2013-08-06 05:35:51')], ['fun shops', Timestamp('2013-10-27 09:56:08')], ['fun games', Timestamp('2017-03-19 08:48:19')], ['parking', Timestamp('2007-09-17 10:12:45')]]",TRUE
142,Find the tourist attractions that have parking or shopping as their feature details. What are the names of the attractions?,SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'shopping',"SELECT ta.Name FROM Tourist_Attractions AS ta JOIN Tourist_Attraction_Features AS taf ON ta.Tourist_Attraction_ID = taf.Tourist_Attraction_ID JOIN Features AS f ON taf.Feature_ID = f.Feature_ID WHERE f.Feature_Details IN ('parking', 'shopping');","[['US museum'], ['impressions de France'], ['flying elephant'], ['cafe'], ['parking'], ['jungle cruise'], ['fun games'], ['exploration trial'], ['presidents hall']]","[['flying elephant'], ['film festival'], ['US museum'], ['US museum'], ['exploration trial'], ['presidents hall'], ['jungle cruise'], ['cafe'], ['parking']]",FALSE
143,Give me the name of the customer who ordered the most items in total.,SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id GROUP BY t1.customer_name ORDER BY SUM(CAST(t3.order_quantity AS integer)) DESC LIMIT 1,SELECT c.customer_name FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id JOIN Order_Items oi ON co.order_id = oi.order_id GROUP BY c.customer_name ORDER BY SUM(oi.order_quantity) DESC LIMIT 1;,[['Clifford Pagac']],[['Error']],FALSE
144,What is the payment method of the customer that has purchased the least quantity of items?,"SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id GROUP BY t1.customer_name, t1.payment_method ORDER BY SUM(CAST(t3.order_quantity AS integer)) LIMIT 1","SELECT c.payment_method FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id JOIN Order_Items oi ON co.order_id = oi.order_id GROUP BY c.customer_id, c.payment_method ORDER BY SUM(CAST(oi.order_quantity AS INTEGER)) ASC LIMIT 1;",[['Credit Card']],[['Credit Card']],TRUE
145,Tell me the payment method used by the customer who ordered the least amount of goods in total.,"SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id GROUP BY t1.customer_name, t1.payment_method ORDER BY SUM(CAST(t3.order_quantity AS integer)) LIMIT 1","SELECT c.payment_method FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id JOIN Order_Items oi ON co.order_id = oi.order_id GROUP BY c.customer_id, c.payment_method ORDER BY SUM(oi.order_quantity::integer) ASC LIMIT 1;",[['Credit Card']],[['Credit Card']],TRUE
146,What are names of customers who never ordered product Latte.,SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte',SELECT customer_name  FROM Customers  WHERE customer_id NOT IN (     SELECT Customer_Orders.customer_id      FROM Customer_Orders      JOIN Order_Items ON Customer_Orders.order_id = Order_Items.order_id      JOIN Products ON Order_Items.product_id = Products.product_id      WHERE product_details = 'Latte' );,"[['Prof. Alexzander Hamill'], ['Tillman Ernser'], ['Prof. Ibrahim Bashirian'], ['Dr. Julia Wuckert MD'], ['Alexane Kilback'], ['Eunice Morar'], ['Prof. Reyes Berge II'], ['Devin Mills'], ['Mozell Morissette'], ['Miss Aliyah Witting'], ['Maudie Kertzmann'], ['Rodrick Heaney'], ['Kitty Padberg III']]","[['Dr. Julia Wuckert MD'], ['Tillman Ernser'], ['Rodrick Heaney'], ['Prof. Alexzander Hamill'], ['Prof. Reyes Berge II'], ['Maudie Kertzmann'], ['Mozell Morissette'], ['Eunice Morar'], ['Devin Mills'], ['Kitty Padberg III'], ['Miss Aliyah Witting'], ['Alexane Kilback'], ['Prof. Ibrahim Bashirian']]",FALSE
147,What are the names of customers who have purchased both products Latte and Americano?,SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Americano',"SELECT DISTINCT c.customer_name FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id JOIN Order_Items oi ON co.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE p.product_details IN ('Latte', 'Americano') GROUP BY c.customer_name HAVING COUNT(DISTINCT p.product_details) = 2;",[['Clifford Pagac']],[['Clifford Pagac']],TRUE
148,What are the famous titles of artists who have not only had volumes that spent more than 2 weeks on top but also volumes that spent less than 2 weeks on top?,SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  2 INTERSECT SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  <  2,SELECT DISTINCT artist.Famous_Title FROM artist JOIN volume ON artist.Artist_ID = volume.Artist_ID WHERE volume.Weeks_on_Top > 2 AND artist.Artist_ID IN (     SELECT artist.Artist_ID     FROM artist     JOIN volume ON artist.Artist_ID = volume.Artist_ID     WHERE volume.Weeks_on_Top < 2 );,[['Bergen 1996']],[['Bergen 1996']],TRUE
149,Find the last name of the first ever contact person of the organization with the highest UK Vat number.,SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.uk_vat_number  =  (SELECT max(uk_vat_number) FROM organizations) ORDER BY t2.date_contact_to ASC LIMIT 1,SELECT individual_last_name FROM Individuals WHERE individual_id = (     SELECT individual_id     FROM Organization_Contact_Individuals     WHERE organization_id = (         SELECT organization_id         FROM Organizations         ORDER BY uk_vat_number DESC         LIMIT 1     )     ORDER BY date_contact_from     LIMIT 1 );,[['Jacobs']],[['Rutherford']],FALSE
150,What is the last name of the first individual contacted from the organization with the maximum UK Vat number across all organizations?,SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.uk_vat_number  =  (SELECT max(uk_vat_number) FROM organizations) ORDER BY t2.date_contact_to ASC LIMIT 1,SELECT individual_last_name  FROM Individuals  WHERE individual_id = (     SELECT individual_id      FROM Organization_Contact_Individuals      WHERE organization_id = (         SELECT organization_id          FROM Organizations          ORDER BY uk_vat_number DESC LIMIT 1     )      ORDER BY date_contact_from ASC LIMIT 1 );,[['Jacobs']],[['Rutherford']],FALSE
151,Which is the email of the party that has used the services the most number of times?,SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1,"SELECT party_email  FROM Parties  WHERE party_id = (     SELECT customer_id      FROM (         SELECT customer_id, COUNT(*)          FROM Party_Services          GROUP BY customer_id          ORDER BY COUNT(*) DESC          LIMIT 1     ) AS most_services );",[['frida57@example.org']],[['frida57@example.org']],TRUE
152,Return the party email that has used party services the greatest number of times.,SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1,"SELECT party_email  FROM Parties  WHERE party_id = (     SELECT customer_id      FROM (         SELECT customer_id, COUNT(*)          FROM Party_Services          GROUP BY customer_id          ORDER BY COUNT(*) DESC          LIMIT 1     ) AS subquery );",[['frida57@example.org']],[['frida57@example.org']],TRUE
153,What are the statement id and statement detail for the statement that has the most corresponding accounts?,"SELECT T1.statement_id, T2.statement_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id = T2.statement_id GROUP BY T1.statement_id, T2.statement_details ORDER BY count(*) DESC LIMIT 1","SELECT Statement_ID, Statement_Details FROM Statements WHERE Statement_ID IN (     SELECT Statement_ID     FROM Accounts     GROUP BY Statement_ID     ORDER BY COUNT(*) DESC     LIMIT 1 );","[[57, 'Open Project']]","[[57, 'Open Project']]",TRUE
154,What is the area of the appelation that produces the highest number of wines before the year of 2010?,"SELECT T1.Area FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T2.year < 2010 GROUP BY T2.Appelation, T1.Area ORDER BY count(*) DESC LIMIT 1",SELECT appellations.Area FROM appellations JOIN wine ON appellations.Appelation = wine.Appelation WHERE wine.Year < 2010 GROUP BY appellations.Area ORDER BY COUNT(wine.No) DESC LIMIT 1;,[['North Coast']],[['North Coast']],TRUE
155,What is the area for the appelation which produced the most wines prior to 2010?,"SELECT T1.Area FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T2.year < 2010 GROUP BY T2.Appelation, T1.Area ORDER BY count(*) DESC LIMIT 1",SELECT appellations.Area FROM appellations JOIN wine ON appellations.Appelation = wine.Appelation WHERE wine.Year < 2010 GROUP BY appellations.Area ORDER BY COUNT(wine.No) DESC LIMIT 1;,[['North Coast']],[['North Coast']],TRUE
156,What is the color of the grape whose wine products has the highest average price?,"SELECT T1.Color FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape GROUP BY T2.Grape, T1.Color ORDER BY AVG(Price) DESC LIMIT 1",SELECT g.Color FROM grapes g JOIN wine w ON g.Grape = w.Grape GROUP BY g.Color ORDER BY AVG(w.Price) DESC LIMIT 1;,[['White']],[['White']],TRUE
157,Give the color of the grape whose wine products have the highest average price?,"SELECT T1.Color FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape GROUP BY T2.Grape, T1.Color ORDER BY AVG(Price) DESC LIMIT 1",SELECT g.Color FROM grapes g JOIN wine w ON g.Grape = w.Grape GROUP BY g.Color ORDER BY AVG(w.Price) DESC LIMIT 1;,[['White']],[['White']],TRUE
158,Find the country of all appelations who have at most three wines.,"select DISTINCT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation GROUP BY T1.County, T2.Appelation HAVING count(*) <= 3",SELECT a.County FROM appellations a WHERE (   SELECT COUNT(*)   FROM wine w   WHERE w.Appelation = a.Appelation ) <= 3;,"[['Napa'], ['Sonoma'], ['Santa Barbara']]","[['Sonoma'], ['Amador'], ['N/A'], ['Mendocino'], ['San Luis Obispo'], ['Napa'], ['Sonoma'], ['Calaveras'], ['N/A'], ['Napa'], ['N/A'], ['Sonoma'], ['Monterey'], ['Contra Costa'], ['Sonoma'], ['San Luis Obispo'], ['Amador'], ['Sonoma'], ['Lake'], ['Santa Barbara'], ['Napa'], ['Sonoma'], ['Lake'], ['Alameda'], ['San Joaquin'], ['Mendocino'], ['Monterey'], ['San Benito'], ['Napa'], ['N/A'], ['N/A'], ['Napa'], ['San Luis Obispo'], ['Lake'], ['Sonoma'], ['Sonoma'], ['Napa'], ['San Luis Obispo'], ['Santa Barbara'], ['N/A'], ['Monterey'], ['Santa Barbara'], ['Santa Barbara'], ['Amador'], ['N/A'], ['Solano'], ['Sonoma'], ['Sonoma'], ['Sonoma'], ['N/A'], ['Napa'], ['Napa'], ['Santa Barbara'], ['Napa'], ['Yolo'], ['Napa']]",FALSE
159,What are the countries for appelations with at most 3 wines?,"select DISTINCT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation GROUP BY T1.County, T2.Appelation HAVING count(*) <= 3",SELECT County  FROM appellations  WHERE Appelation IN (   SELECT Appelation    FROM wine    GROUP BY Appelation    HAVING COUNT(*) <= 3 );,"[['Napa'], ['Sonoma'], ['Santa Barbara']]","[['Sonoma'], ['Santa Barbara'], ['Sonoma'], ['Napa']]",FALSE
160,Find the top 3 wineries with the greatest number of wines made of white color grapes.,SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE  =  T2.GRAPE WHERE T1.Color  =  'White' GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3,"SELECT Winery, COUNT(*) as WineCount FROM wine JOIN grapes ON wine.Grape = grapes.Grape WHERE grapes.Color = 'white' GROUP BY Winery ORDER BY WineCount DESC LIMIT 3;","[['Altamura'], ['Brander'], ['Capture']]",[['None']],FALSE
161,Which 3 wineries produce the most wines made from white grapes?,SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE  =  T2.GRAPE WHERE T1.Color  =  'White' GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3,"SELECT Winery, COUNT(*) as WineCount FROM wine JOIN grapes ON wine.Grape = grapes.Grape WHERE grapes.Color = 'White' GROUP BY Winery ORDER BY WineCount DESC LIMIT 3;","[['Altamura'], ['Brander'], ['Capture']]","[['Altamura', 1], ['Brander', 1], ['Capture', 1]]",FALSE
162,"What are the names of the stations which serve both ""Ananthapuri Express"" and ""Guruvayur Express"" trains?",SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id WHERE T3.Name  =  'Ananthapuri Express' INTERSECT SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id WHERE T3.Name  =  'Guruvayur Express',"SELECT station.Name FROM station JOIN train_station ON station.Station_ID = train_station.Station_ID JOIN train ON train_station.Train_ID = train.Train_ID WHERE train.Name IN ('Ananthapuri Express', 'Guruvayur Express') GROUP BY station.Name HAVING COUNT(DISTINCT train.Name) = 2;",[['London Waterloo']],[['London Waterloo']],TRUE
163,What is the city with the most customers?,SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1;,"SELECT city, COUNT(*) as num_customers FROM Customers JOIN Addresses ON Customers.customer_address_id = Addresses.address_id GROUP BY city ORDER BY num_customers DESC LIMIT 1;",[['South Richieport']],"[['South Richieport', 4]]",FALSE
164,What are the first and last name of the faculty who has the most students?,"SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1","SELECT F.Fname, F.Lname FROM Faculty F JOIN Advisor A ON F.FacID = A.Advisor GROUP BY F.Fname, F.Lname ORDER BY COUNT(A.StuID) DESC LIMIT 1;","[['David', 'Yarowsky']]",[['Error']],FALSE
165,Find the first names of the faculty members who participate in Canoeing and Kayaking.,SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' INTERSECT SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Kayaking',"SELECT Fname  FROM Faculty  WHERE FacID IN (     SELECT FacID      FROM Faculty_Participates_in      WHERE actid IN (         SELECT actid          FROM Activity          WHERE activity_name IN ('Canoeing', 'Kayaking')     ) );","[['Taylor'], ['Salzberg'], ['Jones'], ['Giuliano'], ['Wolff'], ['Beach'], ['Houlahan'], ['Smith'], ['Burzio'], ['Goodrich'], ['Yarowsky'], ['Goldman'], ['Frank'], ['Naiman'], ['Amir'], ['Cheng'], ['Hall'], ['Angelopoulou']]","[['Yair'], ['Scott'], ['Louis'], ['Michael'], ['Luigi']]",FALSE
166,What are the first names of the faculty members playing both Canoeing and Kayaking?,SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' INTERSECT SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Kayaking',"SELECT Fname  FROM Faculty  WHERE FacID IN (     SELECT FacID      FROM Faculty_Participates_in      WHERE actid IN (         SELECT actid          FROM Activity          WHERE activity_name IN ('Canoeing', 'Kayaking')     )     GROUP BY FacID      HAVING COUNT(DISTINCT actid) = 2 );","[['Taylor'], ['Salzberg'], ['Jones'], ['Giuliano'], ['Wolff'], ['Beach'], ['Houlahan'], ['Smith'], ['Burzio'], ['Goodrich'], ['Yarowsky'], ['Goldman'], ['Frank'], ['Naiman'], ['Amir'], ['Cheng'], ['Hall'], ['Angelopoulou']]",[['None']],FALSE
167,Find the id of the customer who made the most orders.,SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1,SELECT customer_id FROM Orders GROUP BY customer_id ORDER BY COUNT(*) DESC LIMIT 1;,[[2]],[[15]],FALSE
168,List the count and id of each product in all the orders.,"SELECT count(*) , T3.product_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id JOIN products AS T3 ON T2.product_id = T3.product_id GROUP BY T3.product_id","SELECT product_id, COUNT(*)  FROM Order_Items  GROUP BY product_id;","[[2, 4], [2, 14], [2, 11], [1, 7], [3, 15], [1, 12], [2, 3], [1, 1], [1, 8]]","[[11, 2], [15, 3], [3, 2], [4, 2], [14, 2], [7, 1], [12, 1], [1, 1], [8, 1]]",FALSE
169,"For each product, return its id and the number of times it was ordered.","SELECT count(*) , T3.product_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id JOIN products AS T3 ON T2.product_id = T3.product_id GROUP BY T3.product_id","SELECT Products.product_id, COUNT(Order_Items.order_id) AS times_ordered FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id GROUP BY Products.product_id;","[[2, 4], [2, 14], [2, 11], [1, 7], [3, 15], [1, 12], [2, 3], [1, 1], [1, 8]]","[[4, 2], [14, 2], [11, 2], [7, 1], [15, 3], [12, 1], [3, 2], [1, 1], [8, 1]]",FALSE
170,List the name and count of each product in all orders.,"SELECT T3.product_name , count(*) FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id JOIN products AS T3 ON T2.product_id = T3.product_id GROUP BY T3.product_id","SELECT Products.product_name, COUNT(*)  FROM Products  JOIN Order_Items ON Products.product_id = Order_Items.product_id  GROUP BY Products.product_name;","[['food', 2], ['music', 2], ['phone', 2], ['clothes', 1], ['music', 3], ['phone', 1], ['food', 2], ['food', 1], ['book', 1]]","[['food', 5], ['book', 1], ['phone', 3], ['clothes', 1], ['music', 5]]",FALSE
171,"For each product, show its name and the number of times it was ordered.","SELECT T3.product_name , count(*) FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id JOIN products AS T3 ON T2.product_id = T3.product_id GROUP BY T3.product_id","SELECT Products.product_name, COUNT(Order_Items.order_id) AS number_of_orders FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id GROUP BY Products.product_name;","[['food', 2], ['music', 2], ['phone', 2], ['clothes', 1], ['music', 3], ['phone', 1], ['food', 2], ['food', 1], ['book', 1]]","[['food', 5], ['book', 1], ['phone', 3], ['clothes', 1], ['music', 5]]",FALSE
172,What is the id of the order which has the most items?,SELECT T1.order_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id ORDER BY count(*) DESC LIMIT 1,SELECT order_id  FROM Order_Items  GROUP BY order_id  ORDER BY COUNT(*) DESC  LIMIT 1;,[[15]],[[15]],TRUE
173,Which order deals with the most items? Return the order id.,SELECT T1.order_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id ORDER BY count(*) DESC LIMIT 1,"SELECT order_id, COUNT(order_item_id) AS item_count FROM Order_Items GROUP BY order_id ORDER BY item_count DESC LIMIT 1;",[[15]],"[[15, 3]]",FALSE
174,"List the names of the customers who have once bought product ""food"".",SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id JOIN order_items AS T3 ON T2.order_id = T3.order_id JOIN products AS T4 ON T3.product_id = T4.product_id WHERE T4.product_name = 'food' GROUP BY T1.customer_id HAVING count(*) >= 1,SELECT DISTINCT c.customer_name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE p.product_name = 'food';,"[['George'], ['Alberto'], ['Hadley'], ['Violet'], ['Devan']]","[['Alberto'], ['Devan'], ['George'], ['Hadley'], ['Violet']]",FALSE
175,"What are the names of the customers who bought product ""food"" at least once?",SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id JOIN order_items AS T3 ON T2.order_id = T3.order_id JOIN products AS T4 ON T3.product_id = T4.product_id WHERE T4.product_name = 'food' GROUP BY T1.customer_id HAVING count(*) >= 1,SELECT DISTINCT customer_name  FROM Customers  JOIN Orders ON Customers.customer_id = Orders.customer_id  JOIN Order_Items ON Orders.order_id = Order_Items.order_id  JOIN Products ON Order_Items.product_id = Products.product_id  WHERE product_name = 'food';,"[['George'], ['Alberto'], ['Hadley'], ['Violet'], ['Devan']]","[['Alberto'], ['Devan'], ['George'], ['Hadley'], ['Violet']]",FALSE
176,"List the names of customers who have once canceled the purchase of the product ""food"" (the item status is ""Cancel"").",SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id JOIN order_items AS T3 ON T2.order_id = T3.order_id JOIN products AS T4 ON T3.product_id = T4.product_id WHERE T3.order_item_status = 'Cancel' AND T4.product_name = 'food' GROUP BY T1.customer_id HAVING count(*) >= 1,SELECT DISTINCT c.customer_name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE oi.order_item_status = 'Cancel' AND p.product_name = 'food';,"[['George'], ['Devan']]","[['Devan'], ['George']]",FALSE
177,"Which customers have ever canceled the purchase of the product ""food"" (the item status is ""Cancel"")?",SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id JOIN order_items AS T3 ON T2.order_id = T3.order_id JOIN products AS T4 ON T3.product_id = T4.product_id WHERE T3.order_item_status = 'Cancel' AND T4.product_name = 'food' GROUP BY T1.customer_id HAVING count(*) >= 1,SELECT DISTINCT Customers.customer_name FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id WHERE Order_Items.order_item_status = 'Cancel' AND Products.product_name = 'food';,"[['George'], ['Devan']]","[['Devan'], ['George']]",FALSE
178,"What are the ids, names and genders of the architects who built two bridges or one mill?","SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  2 UNION SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  1","SELECT architect.id, architect.name, architect.gender FROM architect WHERE (SELECT COUNT(*) FROM bridge WHERE bridge.architect_id = architect.id) = 2 OR (SELECT COUNT(*) FROM mill WHERE mill.architect_id = architect.id) = 1;","[['2', 'Frank Gehry', 'male'], ['4', 'Mies Van Der Rohe', 'male'], ['3', 'Zaha Hadid', 'female']]","[['2', 'Frank Gehry', 'male'], ['3', 'Zaha Hadid', 'female'], ['4', 'Mies Van Der Rohe', 'male']]",FALSE
179,Find the first name and age of students who have a dog but do not have a cat as a pet.,"SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')","SELECT Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'Dog' AND Student.StuID NOT IN (     SELECT Student.StuID     FROM Student     JOIN Has_Pet ON Student.StuID = Has_Pet.StuID     JOIN Pets ON Has_Pet.PetID = Pets.PetID     WHERE Pets.PetType = 'Cat' );","[['Tracy', 19], ['Tracy', 19]]",[['None']],FALSE
180,What is the first name of every student who has a dog but does not have a cat?,"SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",SELECT Fname  FROM Student  WHERE StuID IN (     SELECT StuID      FROM Has_Pet      WHERE PetID IN (         SELECT PetID          FROM Pets          WHERE PetType = 'dog'     ) )  AND StuID NOT IN (     SELECT StuID      FROM Has_Pet      WHERE PetID IN (         SELECT PetID          FROM Pets          WHERE PetType = 'cat'     ) );,"[['Tracy', 19], ['Tracy', 19]]",[['Tracy']],FALSE
181,Which countries in europe have at least 3 car manufacturers?,SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;,SELECT countries.CountryName FROM countries JOIN continents ON countries.Continent = continents.ContId JOIN car_makers ON countries.CountryId = car_makers.Country WHERE continents.Continent = 'europe' GROUP BY countries.CountryName HAVING COUNT(car_makers.Id) >= 3;,"[['france'], ['germany']]","[['france'], ['germany']]",TRUE
182,What are the names of all European countries with at least 3 manufacturers?,SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;,SELECT countries.CountryName FROM countries JOIN continents ON countries.Continent = continents.ContId JOIN car_makers ON countries.CountryId = car_makers.Country WHERE continents.Continent = 'Europe' GROUP BY countries.CountryName HAVING COUNT(car_makers.Id) >= 3;,"[['france'], ['germany']]",[['None']],FALSE
183,Which models are lighter than 3500 but not built by the 'Ford Motor Company'?,SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';,SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight < 3500 AND car_makers.FullName != 'Ford Motor Company';,"[['amc'], ['plymouth']]","[['plymouth'], ['amc']]",FALSE
184,Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .,"select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;","SELECT cm.Id, cm.Maker FROM car_makers cm WHERE (     SELECT COUNT(DISTINCT ml.Model)     FROM model_list ml     WHERE ml.Maker = cm.Id ) >= 2 AND (     SELECT COUNT(DISTINCT cm2.Id)     FROM car_makers cm2     WHERE cm2.Country = cm.Country ) > 3;","[[4, 'gm']]","[[2, 'volkswagen'], [4, 'gm'], [5, 'ford'], [6, 'chrysler'], [8, 'nissan'], [13, 'daimler benz'], [19, 'toyota']]",FALSE
185,What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?,"SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;","SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(DISTINCT model_list.ModelId) >= 2 AND COUNT(car_names.MakeId) > 3;","[[4, 'gm']]","[[4, 'gm']]",TRUE
186,What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?,"SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';","SELECT DISTINCT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker WHERE countries.CountryId IN (     SELECT Country     FROM car_makers     GROUP BY Country     HAVING COUNT(Id) > 3 ) OR model_list.Model = 'fiat';","[[1, 'usa'], [4, 'japan'], [2, 'germany'], [5, 'italy']]","[[1, 'usa'], [4, 'japan'], [2, 'germany'], [5, 'italy']]",TRUE
187,What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?,"select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';","SELECT DISTINCT countries.CountryId, countries.CountryName FROM countries LEFT JOIN car_makers ON countries.CountryId = car_makers.Country LEFT JOIN model_list ON car_makers.Id = model_list.Maker WHERE countries.CountryId IN (     SELECT Country     FROM car_makers     GROUP BY Country     HAVING COUNT(Id) > 3 ) OR model_list.Model = 'fiat';","[[1, 'usa'], [4, 'japan'], [2, 'germany'], [5, 'italy']]","[[1, 'usa'], [4, 'japan'], [2, 'germany'], [5, 'italy']]",TRUE
188,What are the id and name of the museum visited most times?,"SELECT t2.""Museum_ID"", t1.""Name"" FROM ""museum"" AS t1 JOIN ""visit"" AS t2 ON t1.""Museum_ID"" = t2.""Museum_ID"" GROUP BY t2.""Museum_ID"", t1.""Name"" ORDER BY count(*) DESC LIMIT 1","SELECT museum.Museum_ID, museum.Name FROM museum JOIN visit ON museum.Museum_ID = visit.Museum_ID GROUP BY museum.Museum_ID, museum.Name ORDER BY COUNT(*) DESC LIMIT 1;","[[2, 'Capital Plaza Museum']]",[['Error']],FALSE
189,What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?,"SELECT t1.""Name"" FROM ""visitor"" AS t1 JOIN ""visit"" AS t2 ON t1.""ID"" = t2.""visitor_ID"" JOIN ""museum"" AS t3 ON t3.""Museum_ID"" = t2.""Museum_ID"" WHERE t3.""Open_Year"" < '2009' INTERSECT SELECT t1.""Name"" FROM ""visitor"" AS t1 JOIN ""visit"" AS t2 ON t1.""ID"" = t2.""visitor_ID"" JOIN ""museum"" AS t3 ON t3.""Museum_ID"" = t2.""Museum_ID"" WHERE t3.""Open_Year"" > '2011';",SELECT v.Name FROM visitor v WHERE EXISTS (     SELECT 1     FROM visit vt     JOIN museum m ON vt.Museum_ID = m.Museum_ID     WHERE vt.visitor_ID = v.ID AND m.Open_Year < '2009' ) AND EXISTS (     SELECT 1     FROM visit vt     JOIN museum m ON vt.Museum_ID = m.Museum_ID     WHERE vt.visitor_ID = v.ID AND m.Open_Year > '2011' );,[['Fernando Gago']],[['Error']],FALSE
190,What are the ids and names of the battles that led to more than 10 people killed in total.,"SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10","SELECT battle.id, battle.name FROM battle JOIN ship ON battle.id = ship.lost_in_battle JOIN death ON ship.id = death.caused_by_ship_id GROUP BY battle.id, battle.name HAVING SUM(death.killed) > 10;","[[5, 'Battle of Messinopolis'], [6, 'Battle of Boruy'], [8, 'Siege of Constantinople']]","[[5, 'Battle of Messinopolis'], [6, 'Battle of Boruy'], [8, 'Siege of Constantinople']]",TRUE
191,Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.,"SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1","SELECT Owners.owner_id, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id, Owners.last_name ORDER BY COUNT(Treatments.treatment_id) DESC LIMIT 1;","[[14, 'Funk']]","[[14, 'Funk']]",TRUE
192,Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.,"SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1","SELECT Owners.owner_id, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id, Owners.last_name ORDER BY SUM(Treatments.cost_of_treatment) DESC LIMIT 1;","[[14, 'Funk']]","[[3, 'Stoltenberg']]",FALSE
193,Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.,"SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1","SELECT owner_id, zip_code FROM Owners WHERE owner_id IN (     SELECT owner_id     FROM Dogs     JOIN Treatments ON Dogs.dog_id = Treatments.dog_id     GROUP BY owner_id     ORDER BY SUM(cost_of_treatment) DESC     LIMIT 1 );","[[3, '02647']]","[[3, '02647']]",TRUE
194,Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.,"SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1","SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id, Owners.zip_code ORDER BY SUM(Treatments.cost_of_treatment) DESC LIMIT 1;","[[3, '02647']]","[[3, '02647']]",TRUE
195,List the names of the dogs of the rarest breed and the treatment dates of them.,"SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )","SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Dogs.breed_code = (     SELECT breed_code     FROM Dogs     GROUP BY breed_code     ORDER BY COUNT(*) ASC     LIMIT 1 );","[['Holden', Timestamp('2018-03-23 13:52:10')], ['Troy', Timestamp('2018-03-11 04:23:15')], ['Troy', Timestamp('2018-02-28 17:09:43')], ['Jesus', Timestamp('2018-03-16 10:27:36')], ['Troy', Timestamp('2018-03-04 20:33:43')]]","[['Holden', Timestamp('2018-03-23 13:52:10')], ['Troy', Timestamp('2018-03-11 04:23:15')], ['Troy', Timestamp('2018-02-28 17:09:43')], ['Jesus', Timestamp('2018-03-16 10:27:36')], ['Troy', Timestamp('2018-03-04 20:33:43')]]",TRUE
196,Which dogs are of the rarest breed? Show their names and treatment dates.,"SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )","SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Dogs.breed_code = (     SELECT breed_code     FROM Dogs     GROUP BY breed_code     ORDER BY COUNT(*) ASC     LIMIT 1 );","[['Holden', Timestamp('2018-03-23 13:52:10')], ['Troy', Timestamp('2018-03-11 04:23:15')], ['Troy', Timestamp('2018-02-28 17:09:43')], ['Jesus', Timestamp('2018-03-16 10:27:36')], ['Troy', Timestamp('2018-03-04 20:33:43')]]","[['Holden', Timestamp('2018-03-23 13:52:10')], ['Troy', Timestamp('2018-03-11 04:23:15')], ['Troy', Timestamp('2018-02-28 17:09:43')], ['Jesus', Timestamp('2018-03-16 10:27:36')], ['Troy', Timestamp('2018-03-04 20:33:43')]]",TRUE
,,,,,,114