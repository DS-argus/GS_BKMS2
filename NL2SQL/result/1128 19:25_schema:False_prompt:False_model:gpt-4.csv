,true_SQL,qSQL,true_SQL_result,qSQL_result,equality
0,SELECT count(*) FROM department WHERE department_id NOT IN (SELECT department_id FROM management);,SELECT COUNT(*)  FROM departments  WHERE head_id IS NOT IN (SELECT id FROM heads);,[[11]],[['Error']],FALSE
1,SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Treasury' INTERSECT SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Homeland Security',"SELECT Treasury.state_of_birth, Homeland_Security.state_of_birth FROM  (SELECT state_of_birth FROM Secretary WHERE department = 'Treasury') AS Treasury, (SELECT state_of_birth FROM Secretary WHERE department = 'Homeland Security') AS Homeland_Security WHERE Treasury.state_of_birth = Homeland_Security.state_of_birth;",[['California']],[['Error']],FALSE
2,"SELECT T1.department_id ,  T1.name ,  count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id HAVING count(*)  >  1","SELECT department_id AS id, department_name AS name, COUNT(department_head) AS number_of_heads FROM departments GROUP BY department_id, department_name HAVING COUNT(department_head) > 1;","[[2, 'Treasury', 2]]",[['Error']],FALSE
3,"SELECT T1.Official_Name
FROM city AS T1
JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID
GROUP BY T1.Official_Name, T2.Host_city_ID
HAVING COUNT(*) > 1;",SELECT official_name  FROM cities  WHERE city_id IN (     SELECT city_id      FROM competitions      GROUP BY city_id      HAVING COUNT(*) > 1 );,[['Aroostook']],[['Error']],FALSE
4,"SELECT T1.Official_Name
FROM city AS T1
JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID
GROUP BY T1.Official_Name, T2.Host_city_ID
HAVING COUNT(*) > 1;",SELECT official_name  FROM cities  WHERE city_id IN (     SELECT city_id      FROM competitions      GROUP BY city_id      HAVING COUNT(*) > 1 );,[['Aroostook']],[['Error']],FALSE
5,"SELECT T3.course_name, count(T1.student_id) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T3.course_name;","SELECT course_name, COUNT(student_id) as registered_students FROM courses JOIN registrations ON courses.course_id = registrations.course_id GROUP BY course_name;","[['statistics', 4], ['French', 2], ['data structure', 1], ['English', 2]]",[['Error']],FALSE
6,"SELECT T3.course_name, count(T1.student_id) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T3.course_name;","SELECT course_id, COUNT(student_id) AS number_of_students, course_name  FROM course_registration  INNER JOIN courses ON course_registration.course_id = courses.id  GROUP BY course_id, course_name;","[['statistics', 4], ['French', 2], ['data structure', 1], ['English', 2]]",[['Error']],FALSE
7,SELECT T1.name FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T1.name  HAVING count(*)  >  (SELECT count(*) FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 WHERE T1.name  =  'Tyler Swift'),SELECT name  FROM users  WHERE followers > (SELECT followers FROM users WHERE name = 'Tyler Swift');,[['Iron Man']],[['Error']],FALSE
8,SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  'Boeing 737-800',SELECT name  FROM employees  WHERE id NOT IN (     SELECT employee_id      FROM certificates      WHERE certificate_name = 'Boeing 737-800' );,"[['Joseph Thompson'], ['Karen Scott'], ['Angela Martinez'], ['Jennifer Thomas'], ['Patricia Jones'], ['Eric Cooper'], ['Linda Davis'], ['Chad Stewart'], ['Robert Brown'], ['William Moore'], ['Haywood Kelly'], ['Richard Jackson'], ['Donald King'], ['William Jones'], ['William Ward'], ['Michael Miller'], ['Lawrence Sperry'], ['David Anderson'], ['Elizabeth Taylor'], ['Barbara Wilson'], ['Milo Brooks'], ['Dorthy Lewis']]",[['Error']],FALSE
9,SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  'Boeing 737-800',SELECT name  FROM employees  WHERE id NOT IN (     SELECT employee_id      FROM certifications      WHERE aircraft_model = 'Boeing 737-800' );,"[['Joseph Thompson'], ['Karen Scott'], ['Angela Martinez'], ['Jennifer Thomas'], ['Patricia Jones'], ['Eric Cooper'], ['Linda Davis'], ['Chad Stewart'], ['Robert Brown'], ['William Moore'], ['Haywood Kelly'], ['Richard Jackson'], ['Donald King'], ['William Jones'], ['William Ward'], ['Michael Miller'], ['Lawrence Sperry'], ['David Anderson'], ['Elizabeth Taylor'], ['Barbara Wilson'], ['Milo Brooks'], ['Dorthy Lewis']]",[['Error']],FALSE
10,SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1,"Assuming we have tables ""employees"" with columns ""name"" and ""salary"", ""certificates"" with column ""employee_id"", and ""aircrafts"" with columns ""certificate_id"" and ""distance"", the SQL query could look like this:  ```sql SELECT e.name, e.salary FROM employees e JOIN (     SELECT c.employee_id     FROM certificates c     JOIN aircrafts a ON a.certificate_id = c.id     WHERE a.distance > 5000     GROUP BY c.employee_id     ORDER BY COUNT(*) DESC     LIMIT 1 ) AS subquery ON e.id = subquery.employee_id; ```  This query first selects the employee who has the most certificates on aircrafts with a distance more than 5000, and then retrieves the name and salary of that employee. Please adjust the table and column names according to your database schema.",[['Lisa Walker']],[['Error']],FALSE
11,SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1,"Assuming there is a table named ""employees"" with columns ""name"" and ""salary"", and another table named ""certificates"" with columns ""employee_id"" and ""plane_fly_range"", the SQL query could look like this:  ```sql SELECT e.name, e.salary FROM employees e JOIN (     SELECT c.employee_id, COUNT(*) as certificate_count     FROM certificates c     WHERE c.plane_fly_range > 5000     GROUP BY c.employee_id ) subq ON e.id = subq.employee_id ORDER BY subq.certificate_count DESC LIMIT 1; ```  This query first creates a subquery that counts the number of certificates for each employee where the plane_fly_range is more than 5000. It then joins this subquery with the employees table on the employee_id, orders the result by the certificate count in descending order, and finally limits the result to the top 1.",[['Lisa Walker']],[['Error']],FALSE
12,"SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  'Milk' INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  'Cat')","SELECT last_name, age  FROM students  WHERE allergies LIKE '%milk%' AND allergies LIKE '%cat%';","[['Apap', 18], ['Lee', 17]]",[['Error']],FALSE
13,"SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  'Milk' INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  'Cat')","SELECT last_name, age FROM students WHERE allergies LIKE '%milk%' AND allergies LIKE '%cat%';","[['Apap', 18], ['Lee', 17]]",[['Error']],FALSE
14,"SELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  'Milk' EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  'Cat')","SELECT first_name, gender FROM students WHERE allergy = 'milk' AND allergy != 'cat';","[['Mark', 'M']]",[['Error']],FALSE
15,"SELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  'Milk' EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  'Cat')","SELECT first_name, gender  FROM students  WHERE allergy = 'milk' AND pet_tolerance = 'cats';","[['Mark', 'M']]",[['Error']],FALSE
16,SELECT avg(age) FROM Student WHERE StuID IN ( SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  'food' INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  'animal'),"SELECT AVG(age)  FROM students  WHERE allergies IN ('food', 'animal');",[[Decimal('18.3333333333333333')]],[['Error']],FALSE
17,SELECT avg(age) FROM Student WHERE StuID IN ( SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  'food' INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  'animal'),SELECT AVG(age)  FROM students  WHERE allergies LIKE '%food%' AND allergies LIKE '%animal%';,[[Decimal('18.3333333333333333')]],[['Error']],FALSE
18,SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1),SELECT policy_type  FROM policies  WHERE customer_id = (     SELECT customer_id      FROM policies      GROUP BY customer_id      ORDER BY COUNT(*) DESC      LIMIT 1 );,"[['Mortgage Insurance            '], ['Property Insurance            ']]",[['Error']],FALSE
19,"SELECT name ,  trade_name FROM medicine EXCEPT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id JOIN enzyme AS T3 ON T3.id  =  T2.enzyme_id WHERE T3.product  =  'Protoporphyrinogen IX'","SELECT medicine_name, trade_name  FROM medicines  WHERE medicine_id NOT IN (     SELECT medicine_id      FROM medicine_enzyme_interactions      WHERE enzyme_id IN (         SELECT enzyme_id          FROM enzymes          WHERE product = 'Heme'     ) );","[['Aripiprazole', 'Abilify'], ['Olanzapine', 'Zyprexa'], ['Clozapine', 'Clozaril'], ['Remoxipride', 'Roxiam'], ['Blonanserin', 'Lonasen'], ['Asenapine', 'Saphris'], ['Lurasidone', 'Latuda'], ['Carpipramine', 'Prazinil'], ['Perospirone', 'Lullan'], ['Iloperidone', 'Fanapt'], ['Paliperidone', 'Invega'], ['Sertindole', 'Serdolect'], ['Melperone', 'Buronil'], ['Sulpiride', 'Sulpirid'], ['Risperidone', 'Risperdal'], ['Amisulpride', 'Solian'], ['Zotepine', 'Nipolept'], ['Clocapramine', 'Clofekton'], ['Mosapramine', 'Cremin'], ['Quetiapine', 'Seroquel']]",[['Error']],FALSE
20,"SELECT name ,  trade_name FROM medicine EXCEPT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id JOIN enzyme AS T3 ON T3.id  =  T2.enzyme_id WHERE T3.product  =  'Protoporphyrinogen IX'","SELECT medicine_name, trade_name  FROM medicines  WHERE NOT EXISTS (     SELECT 1      FROM interactions      WHERE interactions.medicine_id = medicines.id      AND interactions.enzyme_product = 'Heme' );","[['Aripiprazole', 'Abilify'], ['Olanzapine', 'Zyprexa'], ['Clozapine', 'Clozaril'], ['Remoxipride', 'Roxiam'], ['Blonanserin', 'Lonasen'], ['Asenapine', 'Saphris'], ['Lurasidone', 'Latuda'], ['Carpipramine', 'Prazinil'], ['Perospirone', 'Lullan'], ['Iloperidone', 'Fanapt'], ['Paliperidone', 'Invega'], ['Sertindole', 'Serdolect'], ['Melperone', 'Buronil'], ['Sulpiride', 'Sulpirid'], ['Risperidone', 'Risperdal'], ['Amisulpride', 'Solian'], ['Zotepine', 'Nipolept'], ['Clocapramine', 'Clofekton'], ['Mosapramine', 'Cremin'], ['Quetiapine', 'Seroquel']]",[['Error']],FALSE
21,SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Provisional' INTERSECT SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Full',"SELECT screen_pixels  FROM phones  WHERE accreditation_type IN ('Full', 'Provisional')  GROUP BY screen_pixels  HAVING COUNT(DISTINCT accreditation_type) = 2;","[['640 _ 200'], ['160 _ 256'], ['320 _ 256']]",[['Error']],FALSE
22,SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  'Forward' INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  'Defender',SELECT DISTINCT country_name  FROM countries  WHERE country_id IN (     SELECT country_id      FROM players      WHERE position = 'forward' )  AND country_id IN (     SELECT country_id      FROM players      WHERE position = 'defender' );,[['United States']],[['Error']],FALSE
23,SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  'Forward' INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  'Defender',"SELECT DISTINCT country_name  FROM countries  JOIN players ON countries.id = players.country_id  WHERE players.position IN ('Forward', 'Defender');",[['United States']],[['Error']],FALSE
24,SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  'Confirmed' INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  'Provisional',SELECT apartment_number  FROM apartments  WHERE id IN (     SELECT apartment_id      FROM bookings      WHERE status_code = 'Provisional' )  AND id IN (     SELECT apartment_id      FROM bookings      WHERE status_code = 'Confirmed' );,"[['Apt. 859  '], ['Suite 693 '], ['Suite 749 ']]",[['Error']],FALSE
25,"SELECT T1.apt_number 
FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id 
WHERE T2.available_yn  =  false  
INTERSECT 
SELECT T1.apt_number 
FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id 
WHERE T2.available_yn  =  true","SELECT apartment_number  FROM apartments  WHERE unit_status IN (0, 1);","[['Apt. 411  '], ['Apt. 837  ']]",[['Error']],FALSE
26,"SELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1","SELECT stadium.id, stadium.name FROM stadium JOIN injury_accidents ON stadium.id = injury_accidents.stadium_id GROUP BY stadium.id ORDER BY COUNT(injury_accidents.id) DESC LIMIT 1;","[[10, 'Louisiana Superdome']]",[['Error']],FALSE
27,"SELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1","SELECT stadium.id, stadium.name FROM stadium JOIN injury_accidents ON stadium.id = injury_accidents.stadium_id GROUP BY stadium.id ORDER BY COUNT(injury_accidents.id) DESC LIMIT 1;","[[10, 'Louisiana Superdome']]",[['Error']],FALSE
28,SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Walter Samuel' INTERSECT SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Thiago Motta',"SELECT stadium_name  FROM Injuries  WHERE player_name IN ('Walter Samuel', 'Thiago Motta')  GROUP BY stadium_name  HAVING COUNT(DISTINCT player_name) = 2;",[['Bank of America Stadium']],[['Error']],FALSE
29,"SELECT count(DISTINCT T2.id) ,  count(DISTINCT T3.id) ,  T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name  =  T2.dept_name JOIN instructor AS T3 ON T1.dept_name  =  T3.dept_name GROUP BY T3.dept_name","SELECT department,         COUNT(DISTINCT CASE WHEN role = 'student' THEN id END) AS total_students,         COUNT(DISTINCT CASE WHEN role = 'instructor' THEN id END) AS total_instructors  FROM users  GROUP BY department;","[[1, 2, 'Biology'], [1, 4, 'Cybernetics'], [1, 4, 'English'], [1, 1, 'Finance'], [1, 6, 'Statistics']]",[['Error']],FALSE
30,"SELECT count(DISTINCT T2.id) ,  count(DISTINCT T3.id) ,  T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name  =  T2.dept_name JOIN instructor AS T3 ON T1.dept_name  =  T3.dept_name GROUP BY T3.dept_name","SELECT department,         COUNT(CASE WHEN role = 'student' THEN 1 END) AS students,         COUNT(CASE WHEN role = 'instructor' THEN 1 END) AS instructors  FROM users  GROUP BY department;","[[1, 2, 'Biology'], [1, 4, 'Cybernetics'], [1, 4, 'English'], [1, 1, 'Finance'], [1, 6, 'Statistics']]",[['Error']],FALSE
31,"SELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name","SELECT product_name, COUNT(DISTINCT customer_id) as number_of_customers FROM orders INNER JOIN products ON orders.product_id = products.product_id GROUP BY product_name;","[['TV', 1], ['Harry Potter 3', 4], ['Harry Potter 2', 1], ['Arts', 2], ['Learning English', 1], ['Harry Potter 4', 1], ['Fans', 1], ['Chocolate', 1], ['Hard Drive', 2], ['Beer Menus', 1]]",[['Error']],FALSE
32,SELECT T4.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id  =  T2.people_id JOIN people AS T3 ON T1.female_id  =  T3.people_id JOIN church AS T4 ON T4.church_id  =  T1.church_id WHERE T2.age  >  30 OR T3.age  >  30,SELECT church_name  FROM weddings  WHERE person_age > 30;,"[['Pure Church of Christ'], ['Church of Christ (Parrishite)']]",[['Error']],FALSE
33,"SELECT T1.theme ,  T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.ticket_price  >  (SELECT avg(ticket_price) FROM exhibition)","SELECT artists.name, exhibitions.theme FROM artists JOIN exhibitions ON artists.id = exhibitions.artist_id WHERE exhibitions.ticket_price > (SELECT AVG(ticket_price) FROM exhibitions);","[['Santa Claus', 'Vijay Singh'], ['Christmas stocking', 'John Daly'], ['Spring', 'Nick Price']]",[['Error']],FALSE
34,SELECT T3.name FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id JOIN artist AS T3 ON T3.artist_id  =  T2.artist_id GROUP BY T3.artist_id HAVING avg(T1.attendance)  >  200,SELECT artist_name  FROM artists  WHERE (SELECT AVG(attendance) FROM exhibitions WHERE artists.artist_id = exhibitions.artist_id) > 200;,"[['Jeff Sluman'], ['Nick Price'], ['John Daly'], ['Vijay Singh']]",[['Error']],FALSE
35,"SELECT T1.title 
FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id 
WHERE T2.rank  >  3 
INTERSECT 
SELECT T1.title 
FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id 
GROUP BY T1.title 
HAVING avg(T2.rating)  >  5",SELECT name FROM items WHERE rank > 3 AND average_rating > 5;,"[['cup'], ['comb']]",[['Error']],FALSE
36,SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM checking) INTERSECT SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM savings),SELECT name  FROM accounts  WHERE checking_balance > (SELECT AVG(checking_balance) FROM accounts)  AND savings_balance < (SELECT AVG(savings_balance) FROM accounts);,"[['Weeks'], ['Granger'], ['Brown']]",[['Error']],FALSE
37,SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings)),SELECT checking_balance  FROM accounts  WHERE savings_balance > (SELECT AVG(savings_balance) FROM accounts);,[[2000.0]],[['Error']],FALSE
38,"SELECT T1.name ,  T2.balance + T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  >  (SELECT avg(balance) FROM savings)","SELECT name, (checking_balance + savings_balance) AS total_balance FROM accounts WHERE savings_balance > (SELECT AVG(savings_balance) FROM accounts);","[['Wang', 1000001999.0]]",[['Error']],FALSE
39,"SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC","SELECT name, checking_balance, savings_balance  FROM accounts  ORDER BY (checking_balance + savings_balance) DESC;","[[2000.0, 999999999.0, 'Wang'], [3000.0, 230000.0, ""O'mahony""], [10000.0, 200000.0, 'Brown'], [10000.0, 80000.0, 'Granger'], [7000.0, 60.0, 'Weeks'], [77.0, 240.0, 'Porter']]",[['Error']],FALSE
40,SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T1.name  =  'CACHEbox' INTERSECT SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T1.name  =  'Fasterfox',"SELECT browser_name  FROM browser_compatibility  WHERE software_name IN ('CACHEbox', 'Fasterfox')  GROUP BY browser_name  HAVING COUNT(DISTINCT software_name) = 2;","[['Firefox'], ['Internet Explorer']]",[['Error']],FALSE
41,SELECT T2.school_name FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN endowment AS T3 ON T2.school_id  =  T3.school_id GROUP BY T2.school_name HAVING sum(T1.budgeted)  >  100 OR sum(T3.amount)  >  10,SELECT name FROM schools WHERE total_budget > 100 OR total_endowment > 10;,"[['Culver Community'], ['Knox Community'], ['Bremen'], ['Glenn'], ['Jimtown']]",[['Error']],FALSE
42,SELECT count(*) FROM (SELECT school_id FROM endowment WHERE amount  >  8.5 GROUP BY school_id HAVING count(*)  >  1) as T,SELECT COUNT(DISTINCT school_id)  FROM schools  JOIN donations ON schools.school_id = donations.school_id  WHERE donations.amount < 8.5  GROUP BY schools.school_id  HAVING COUNT(DISTINCT donations.donator_id) > 1;,[[2]],[['Error']],FALSE
43,SELECT count(*) FROM building WHERE height_feet  >  (SELECT avg(height_feet) FROM building) OR floors  >  (SELECT avg(floors) FROM building),SELECT COUNT(*)  FROM buildings  WHERE height > (SELECT AVG(height) FROM buildings)  OR floors > (SELECT AVG(floors) FROM buildings);,[[4]],[['Error']],FALSE
44,SELECT T2.Name FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID  =  T2.Phone_ID GROUP BY T2.Name HAVING sum(T1.Num_of_stock)  >=  2000 ORDER BY sum(T1.Num_of_stock) DESC,SELECT name  FROM phones  WHERE total_stocks > 2000  ORDER BY total_stocks DESC;,"[['IPhone 6s'], ['IPhone 5s'], ['IPhone X']]",[['Error']],FALSE
45,SELECT member_name FROM member EXCEPT SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id,SELECT member_name  FROM members  WHERE member_id NOT IN (SELECT member_id FROM events WHERE member_id IS NOT NULL);,"[['Hon Bruce Baird'], ['Mark Baker'], ['Hon Tony Abbott'], ['Peter Andren'], ['Hon Kim Beazley'], ['Hon Kevin Andrews'], ['Hon Arch Bevis'], ['Hon Fran Bailey']]",[['Error']],FALSE
46,"SELECT Employees.employee_name, count(*)
FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id 
GROUP BY Employees.employee_name, Circulation_History.draft_number , Circulation_History.copy_number
ORDER BY count(*) 
DESC LIMIT 1;","SELECT employee.name, COUNT(circulation_history.id) AS number_of_documents FROM employee JOIN circulation_history ON employee.id = circulation_history.employee_id GROUP BY employee.name ORDER BY number_of_documents DESC LIMIT 1;","[['Kenyon', 1]]",[['Error']],FALSE
47,"SELECT T3.service_id ,  T4.Service_Type_Code 
FROM participants AS T1 
JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID 
JOIN EVENTS AS T3 ON T2.Event_ID   =  T3.Event_ID 
JOIN services AS T4 ON T3.service_id  =  T4.service_id 
GROUP BY T3.service_id, T4.Service_Type_Code  
ORDER BY count(*) ASC LIMIT 1","SELECT service_id, type  FROM services  GROUP BY service_id, type  ORDER BY COUNT(participants) ASC  LIMIT 1;","[[6, 'Birth Proof    ']]",[['Error']],FALSE
48,SELECT campus FROM campuses WHERE LOCATION  =  'Northridge' AND county  =  'Los Angeles' UNION SELECT campus FROM campuses WHERE LOCATION  =  'San Francisco' AND county  =  'San Francisco',SELECT name FROM campuses WHERE (city = 'Northridge' AND state = 'Los Angeles') OR (city = 'San Francisco' AND state = 'San Francisco');,"[['California State University-Northridge'], ['San Francisco State University']]",[['Error']],FALSE
49,SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND faculty  >  (SELECT max(faculty) FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND T1.county  =  'Orange'),SELECT campus_name  FROM Campus  WHERE number_of_faculties > ALL (SELECT number_of_faculties                                   FROM Campus                                   WHERE county = 'Orange'                                   AND year = 2002);,[['Long Beach State University']],[['Error']],FALSE
50,"SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  'James Cameron')","SELECT title, director  FROM movies  WHERE star > (SELECT AVG(star) FROM movies WHERE director = 'James Cameron');","[['Snow White', None], ['Avatar', 'James Cameron']]",[['Error']],FALSE
51,"SELECT mID ,  avg(stars) FROM Rating WHERE mID NOT IN (SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  'Brittany Harris') GROUP BY mID","SELECT movie_id, AVG(rating_star)  FROM reviews  WHERE reviewer_name != 'Brittany Harris'  GROUP BY movie_id;","[[101, Decimal('3.0000000000000000')], [104, Decimal('2.5000000000000000')], [107, Decimal('4.0000000000000000')], [106, Decimal('4.5000000000000000')]]",[['Error']],FALSE
52,SELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1),"Assuming you have a table ""cities"" with a column ""name"" for city names, a table ""counties"" with a column ""name"" for county names, a table ""police_officers"" with a column ""number"" for the number of police officers, and a column ""county_id"" in both ""cities"" and ""police_officers"" tables to link the cities and police officers to their respective counties, the SQL query could look like this:  ```sql SELECT cities.name FROM cities WHERE cities.county_id = (     SELECT police_officers.county_id     FROM police_officers     GROUP BY police_officers.county_id     ORDER BY SUM(police_officers.number) DESC     LIMIT 1 ); ```  This query first finds the county with the largest number of police officers, then selects the names of the cities in that county.","[['Aguas Buenas'], ['Aibonito']]",[['Error']],FALSE
53,"SELECT T1.cmi_cross_ref_id ,  T1.source_system_code FROM CMI_Cross_References AS T1 JOIN Council_Tax AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id GROUP BY T1.cmi_cross_ref_id HAVING count(*)  >=  1","SELECT cmi_cross_reference_id, source_system_code  FROM cmi_cross_reference  WHERE EXISTS (SELECT 1 FROM council_tax WHERE cmi_cross_reference.cmi_cross_reference_id = council_tax.cmi_cross_reference_id);","[[101, 'Tax            '], [103, 'Tax            '], [104, 'Tax            '], [105, 'Tax            '], [106, 'Tax            '], [102, 'Tax            ']]",[['Error']],FALSE
54,"SELECT T2.cmi_cross_ref_id ,  T2.master_customer_id ,  count(*) FROM Business_Rates AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id GROUP BY T2.cmi_cross_ref_id","SELECT cmi_cross_reference_id, master_customer_id, COUNT(business_rate) AS number_of_business_rates FROM your_table_name GROUP BY cmi_cross_reference_id, master_customer_id;","[[95, 2, 1], [99, 9, 1], [49, 1, 1]]",[['Error']],FALSE
55,"SELECT sum(number_deaths) ,  sum(damage_millions_USD) FROM storm WHERE max_speed  >  (SELECT avg(max_speed) FROM storm)","SELECT SUM(deaths), SUM(damage)  FROM storms  WHERE max_speed > (SELECT AVG(max_speed) FROM storms);","[[5.0, 40.529]]",[['Error']],FALSE
56,SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING sum(T2.number_city_affected)  >=  10,"SELECT storm_name  FROM storms  WHERE storm_id IN (     SELECT storm_id      FROM (         SELECT storm_id, COUNT(DISTINCT region_id) as region_count          FROM storm_regions          GROUP BY storm_id          HAVING COUNT(DISTINCT region_id) >= 2     ) AS regions      WHERE storm_id IN (         SELECT storm_id          FROM (             SELECT storm_id, COUNT(DISTINCT city_id) as city_count              FROM storm_cities              GROUP BY storm_id              HAVING COUNT(DISTINCT city_id) >= 10         ) AS cities     ) );","[['Five'], ['One']]",[['Error']],FALSE
57,SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2,SELECT name FROM storms WHERE id NOT IN (     SELECT storm_id FROM storm_regions     GROUP BY storm_id     HAVING COUNT(region_id) >= 2 );,"[['Two'], ['Three'], ['Eight'], ['Nine'], ['Six'], ['Seven'], ['Four'], ['9 cyclones']]",[['Error']],FALSE
58,SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Afghanistan' INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Albania',SELECT name  FROM storms  WHERE affected_regions LIKE '%Afghanistan%'  AND affected_regions LIKE '%Albania%';,[['One']],[['Error']],FALSE
59,SELECT Nationality FROM journalist WHERE Years_working  >  10 INTERSECT SELECT Nationality FROM journalist WHERE Years_working  <  3,SELECT nation  FROM journalists  WHERE id IN (     SELECT journalist_id      FROM journalists      WHERE years_of_working > 10 )  AND id IN (     SELECT journalist_id      FROM journalists      WHERE years_of_working < 3 );,[['England']],[['Error']],FALSE
60,"SELECT T3.Name ,  COUNT(*) FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID GROUP BY T3.Name","SELECT journalists.name, COUNT(events.id) AS number_of_events_reported FROM journalists JOIN events ON journalists.id = events.journalist_id GROUP BY journalists.name;","[['Tony Waddington', 1], ['John Meaney', 1], ['Jackie Waring', 2], ['Ray Ferris', 1], ['Herbert Swindells', 1], ['Tom Briggs', 1]]",[['Error']],FALSE
61,SELECT T3.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID GROUP BY T3.Name HAVING COUNT(*)  >  1,SELECT journalist_name  FROM journalists  WHERE (SELECT COUNT(*) FROM events WHERE events.journalist_id = journalists.journalist_id) > 1;,[['Jackie Waring']],[['Error']],FALSE
62,SELECT TIME FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = 'Linda' AND Student.Lname = 'Smith' AND Restaurant.ResName = 'Subway';,SELECT visit_date  FROM visits  WHERE visitor_name = 'Linda Smith' AND place_visited = 'Subway';,[[1507572900000000000]],[['Error']],FALSE
63,"SELECT Restaurant.ResName ,  sum(Visits_Restaurant.Spent) FROM Visits_Restaurant JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID GROUP BY Restaurant.ResID ORDER BY sum(Visits_Restaurant.Spent) ASC LIMIT 1;","SELECT restaurant, SUM(time_spent) as total_time FROM students_visits GROUP BY restaurant ORDER BY total_time ASC LIMIT 1;","[['Subway', 6.53]]",[['Error']],FALSE
64,SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  'USA' AND t2.authorder  =  2 AND t1.lname  =  'Turon',SELECT * FROM papers  WHERE institution = 'USA'  AND second_author = 'Turon';,[['Functional Pearl: Modular Rollback through Control Logging']],[['Error']],FALSE
65,"SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.fname ,  t1.lname ORDER BY count(*) DESC LIMIT 1",SELECT author_last_name  FROM authors  JOIN papers ON authors.author_id = papers.author_id  GROUP BY authors.author_id  ORDER BY COUNT(papers.paper_id) DESC  LIMIT 1;,[['Hinze']],[['Error']],FALSE
66,SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE '%Monadic%',SELECT authors.last_name  FROM authors  JOIN papers ON authors.id = papers.author_id  WHERE papers.title LIKE '%Monadic%';,"[['Gibbons'], ['Hinze']]",[['Error']],FALSE
67,"SELECT T1.cust_name ,  T1.acc_type 
FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id 
GROUP BY T1.cust_name, T1.acc_type  
HAVING sum(T2.amount)  >  5000","SELECT customers.name, customers.account_balance FROM customers JOIN loans ON customers.id = loans.customer_id GROUP BY customers.id HAVING SUM(loans.amount) > 5000;","[['Mary', 'saving    ']]",[['Error']],FALSE
68,SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100 GROUP BY T2.bname ORDER BY sum(T1.amount) DESC LIMIT 1,SELECT branch_name  FROM bank_branch  JOIN loans ON bank_branch.branch_id = loans.branch_id  JOIN customers ON loans.customer_id = customers.customer_id  WHERE customers.credit_score < 100  GROUP BY branch_name  ORDER BY SUM(loans.amount) DESC  LIMIT 1;,[['downtown']],[['Error']],FALSE
69,"SELECT T1.asset_id ,  T1.asset_details FROM Assets AS T1 JOIN Asset_Parts AS T2 ON T1.asset_id  =  T2.asset_id GROUP BY T1.asset_id HAVING count(*)  =  2 INTERSECT SELECT T1.asset_id ,  T1.asset_details FROM Assets AS T1 JOIN Fault_Log AS T2 ON T1.asset_id  =  T2.asset_id GROUP BY T1.asset_id HAVING count(*)  <  2","SELECT asset_id, detail  FROM assets  WHERE number_of_parts = 2 AND (SELECT COUNT(*) FROM fault_logs WHERE fault_logs.asset_id = assets.asset_id) < 2;","[[2, 'dell laptop2'], [15, 'system3']]",[['Error']],FALSE
70,"SELECT T1.company_id ,  T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Engineers AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id HAVING count(*)  >=  2 UNION SELECT T3.company_id ,  T3.company_name FROM Third_Party_Companies AS T3 JOIN Maintenance_Contracts AS T4 ON T3.company_id  =  T4.maintenance_contract_company_id GROUP BY T3.company_id HAVING count(*)  >=  2","SELECT company_id, company_name  FROM third_party_companies  WHERE (SELECT COUNT(*) FROM maintenance_engineers WHERE third_party_companies.company_id = maintenance_engineers.company_id) >= 2  OR (SELECT COUNT(*) FROM maintenance_contracts WHERE third_party_companies.company_id = maintenance_contracts.company_id) >= 2;","[[15, 'Rau, Ullrich and King'], [11, 'Kuvalis, Boehm and Hettinger'], [2, 'McDermott Group'], [13, ""Greenholt-D'Amore""], [6, 'Grimes, Mosciski and Renner'], [4, 'Dooley-Langosh'], [3, 'Schuppe-Carroll']]",[['Error']],FALSE
71,"SELECT T1.part_id ,  T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id JOIN Skills_Required_To_Fix AS T3 ON T2.part_fault_id  =  T3.part_fault_id GROUP BY T1.part_id ORDER BY count(*) DESC LIMIT 1","SELECT part_id, part_name  FROM parts  ORDER BY required_skills DESC  LIMIT 1;","[[1, 'top']]",[['Error']],FALSE
72,"SELECT count(*) ,  class_room FROM CLASS GROUP BY class_room HAVING count(*)  >=  2","SELECT classroom, COUNT(*) as num_classes FROM classes GROUP BY classroom HAVING COUNT(*) >= 2;","[[4, 'KLR200'], [2, 'BUS252'], [2, 'BUS311'], [3, 'KLR209']]",[['Error']],FALSE
73,"SELECT count(*) ,  T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code",SELECT COUNT(DISTINCT professor_name) FROM professors;,"[[12, 'A&SCI'], [10, 'BUS']]",[['Error']],FALSE
74,"SELECT T2.dept_name ,  avg(T1.stu_gpa) 
FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code 
GROUP BY T2.dept_name  
ORDER BY avg(T1.stu_gpa) 
DESC LIMIT 1","SELECT department.name, AVG(student.gpa) AS average_gpa FROM department JOIN student ON department.id = student.department_id GROUP BY department.name ORDER BY average_gpa DESC LIMIT 1;","[['Computer Info. Systems', Decimal('3.1800000000000000')]]",[['Error']],FALSE
75,"SELECT T3.dept_name 
FROM course AS T1 
JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code 
JOIN department AS T3 ON T1.dept_code  =  T3.dept_code 
GROUP BY T3.dept_name  
ORDER BY sum(T1.crs_credit) DESC LIMIT 1",SELECT department.name  FROM department  JOIN classes ON department.id = classes.department_id  GROUP BY department.name  ORDER BY SUM(classes.credits) DESC  LIMIT 1;,[['Computer Info. Systems']],[['Error']],FALSE
76,SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code WHERE T4.dept_name  =  'Accounting',SELECT COUNT(*)  FROM students  WHERE class_id IN (     SELECT class_id      FROM classes      WHERE professor_id IN (         SELECT professor_id          FROM professors          WHERE department = 'accounting'     ) );,[[2]],[['Error']],FALSE
77,"SELECT T4.dept_name 
FROM CLASS AS T1 
JOIN enroll AS T2 ON T1.class_code  =  T2.class_code 
JOIN course AS T3 ON T1.crs_code  =  T3.crs_code 
JOIN department AS T4 ON T3.dept_code  =  T4.dept_code 
GROUP BY T4.dept_name 
ORDER BY count(*) DESC LIMIT 1","SELECT department_name  FROM departments  WHERE department_id = (     SELECT department_id      FROM (         SELECT department_id, COUNT(*) as student_count          FROM students          GROUP BY department_id          ORDER BY student_count DESC          LIMIT 1     ) AS subquery );",[['Computer Info. Systems']],[['Error']],FALSE
78,SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Accounting' INTERSECT SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Computer Info. Systems',"SELECT first_name  FROM students  WHERE student_id IN (     SELECT student_id      FROM enrollments      WHERE class_id IN (         SELECT class_id          FROM classes          WHERE department IN ('Accounting', 'Computer Info. Systems')     ) );","[['Anne'], ['William']]",[['Error']],FALSE
79,"SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description ,  T5.dept_name FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num JOIN department AS T5 ON T4.dept_code  =  T5.dept_code","SELECT instructors.first_name, instructors.office, courses.description, departments.name FROM instructors JOIN courses_instructors ON instructors.id = courses_instructors.instructor_id JOIN courses ON courses_instructors.course_id = courses.id JOIN departments ON courses.department_id = departments.id;","[['Arnelle', 'KLR 229D', 'Accounting I', 'Accounting'], ['Arnelle', 'KLR 229D', 'Accounting I', 'Accounting'], ['Robert', 'BBG 208', 'Accounting I', 'Sociology'], ['Ismael', 'KLR 244', 'Accounting II', 'Accounting'], ['Ismael', 'KLR 244', 'Accounting II', 'Accounting'], ['Carlos', 'KLR 300', 'Intro. to Microcomputing', 'Computer Info. Systems'], ['Gerald', 'KLR 211', 'Intro. to Microcomputing', 'Accounting'], ['Carlos', 'KLR 300', 'Intro. to Microcomputing', 'Computer Info. Systems'], ['Peter', 'KLR 203E', 'Database Design and Implementation', 'Computer Info. Systems'], ['Gerald', 'KLR 211', 'Intro. to Statistics', 'Accounting'], ['Gerald', 'KLR 211', 'Intro. to Statistics', 'Accounting'], ['Peter', 'KLR 203E', 'Statistical Applications', 'Computer Info. Systems'], ['Peter', 'KLR 203E', 'Statistical Applications', 'Computer Info. Systems']]",[['Error']],FALSE
80,"SELECT T2.emp_fname ,  T1.class_room FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Accounting'","SELECT professors.first_name, courses.classroom FROM professors JOIN courses ON professors.id = courses.professor_id WHERE professors.department = 'Accounting';","[['Arnelle', 'BUS311'], ['Arnelle', 'BUS200'], ['Ismael', 'BUS311'], ['Ismael', 'BUS252'], ['Gerald', 'KLR211'], ['Gerald', 'KLR200'], ['Gerald', 'KLR200']]",[['Error']],FALSE
81,"SELECT t1.manufacturer_id ,  t1.num_of_shops FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id  =  t2.manufacturer_id ORDER BY t2.Price_in_Dollar DESC LIMIT 1","SELECT company_id, COUNT(shop_id) as number_of_shops FROM companies JOIN shops ON companies.id = shops.company_id JOIN furniture ON shops.id = furniture.shop_id WHERE furniture.price = (SELECT MAX(price) FROM furniture) GROUP BY company_id;","[[7, 4]]",[['Error']],FALSE
82,SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id  =  t3.manufacturer_id WHERE t1.num_of_component  <  6 INTERSECT SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id  =  t3.manufacturer_id WHERE t1.num_of_component  >  10,SELECT company_name  FROM companies  WHERE company_id IN (     SELECT company_id      FROM furnitures      WHERE number_of_components < 6 )  AND company_id IN (     SELECT company_id      FROM furnitures      WHERE number_of_components > 10 );,[['Tomorrow']],[['Error']],FALSE
83,"SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY department_id","SELECT first_name, last_name, hire_date, salary, department_number FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY department_number ASC;","[['Jennifer', 'Whalen', datetime.date(1987, 9, 25), Decimal('4400.00'), Decimal('10')], ['Pat', 'Fay', datetime.date(1987, 9, 27), Decimal('6000.00'), Decimal('20')], ['Sigal', 'Tobias', datetime.date(1987, 7, 4), Decimal('2800.00'), Decimal('30')], ['Guy', 'Himuro', datetime.date(1987, 7, 5), Decimal('2600.00'), Decimal('30')], ['Alexander', 'Khoo', datetime.date(1987, 7, 2), Decimal('3100.00'), Decimal('30')], ['Den', 'Raphaely', datetime.date(1987, 7, 1), Decimal('11000.00'), Decimal('30')], ['Shelli', 'Baida', datetime.date(1987, 7, 3), Decimal('2900.00'), Decimal('30')], ['Karen', 'Colmenares', datetime.date(1987, 7, 6), Decimal('2500.00'), Decimal('30')], ['Susan', 'Mavris', datetime.date(1987, 9, 28), Decimal('6500.00'), Decimal('40')], ['Steven', 'Markle', datetime.date(1987, 7, 15), Decimal('2200.00'), Decimal('50')], ['Laura', 'Bissot', datetime.date(1987, 7, 16), Decimal('3300.00'), Decimal('50')], ['James', 'Marlow', datetime.date(1987, 7, 18), Decimal('2500.00'), Decimal('50')], ['TJ', 'Olson', datetime.date(1987, 7, 19), Decimal('2100.00'), Decimal('50')], ['Jason', 'Mallin', datetime.date(1987, 7, 20), Decimal('3300.00'), Decimal('50')], ['Ki', 'Gee', datetime.date(1987, 7, 22), Decimal('2400.00'), Decimal('50')], ['Kimberely', 'Grant', datetime.date(1987, 9, 3), Decimal('7000.00'), Decimal('50')], ['Hazel', 'Philtanker', datetime.date(1987, 7, 23), Decimal('2200.00'), Decimal('50')], ['Winston', 'Taylor', datetime.date(1987, 9, 5), Decimal('3200.00'), Decimal('50')], ['Jean', 'Fleaur', datetime.date(1987, 9, 6), Decimal('3100.00'), Decimal('50')], ['Girard', 'Geoni', datetime.date(1987, 9, 8), Decimal('2800.00'), Decimal('50')], ['Nandita', 'Sarchand', datetime.date(1987, 9, 9), Decimal('4200.00'), Decimal('50')], ['Alexis', 'Bull', datetime.date(1987, 9, 10), Decimal('4100.00'), Decimal('50')], ['Julia', 'Dellinger', datetime.date(1987, 9, 11), Decimal('3400.00'), Decimal('50')], ['Anthony', 'Cabrio', datetime.date(1987, 9, 12), Decimal('3000.00'), Decimal('50')], ['Kelly', 'Chung', datetime.date(1987, 9, 13), Decimal('3800.00'), Decimal('50')], ['Jennifer', 'Dilly', datetime.date(1987, 9, 14), Decimal('3600.00'), Decimal('50')], ['Timothy', 'Gates', datetime.date(1987, 9, 15), Decimal('2900.00'), Decimal('50')], ['Randall', 'Perkins', datetime.date(1987, 9, 16), Decimal('2500.00'), Decimal('50')], ['Sarah', 'Bell', datetime.date(1987, 9, 17), Decimal('4000.00'), Decimal('50')], ['Britney', 'Everett', datetime.date(1987, 9, 18), Decimal('3900.00'), Decimal('50')], ['Samuel', 'McCain', datetime.date(1987, 9, 19), Decimal('3200.00'), Decimal('50')], ['Vance', 'Jones', datetime.date(1987, 9, 20), Decimal('2800.00'), Decimal('50')], ['Renske', 'Ladwig', datetime.date(1987, 7, 24), Decimal('3600.00'), Decimal('50')], ['Stephen', 'Stiles', datetime.date(1987, 7, 25), Decimal('3200.00'), Decimal('50')], ['Joshua', 'Patel', datetime.date(1987, 7, 27), Decimal('2500.00'), Decimal('50')], ['Trenna', 'Rajs', datetime.date(1987, 7, 28), Decimal('3500.00'), Decimal('50')], ['Curtis', 'Davies', datetime.date(1987, 7, 29), Decimal('3100.00'), Decimal('50')], ['Randall', 'Matos', datetime.date(1987, 7, 30), Decimal('2600.00'), Decimal('50')], ['Peter', 'Vargas', datetime.date(1987, 7, 31), Decimal('2500.00'), Decimal('50')], ['John', 'Seo', datetime.date(1987, 7, 26), Decimal('2700.00'), Decimal('50')], ['Adam', 'Fripp', datetime.date(1987, 7, 8), Decimal('8200.00'), Decimal('50')], ['Payam', 'Kaufling', datetime.date(1987, 7, 9), Decimal('7900.00'), Decimal('50')], ['Shanta', 'Vollman', datetime.date(1987, 7, 10), Decimal('6500.00'), Decimal('50')], ['Alana', 'Walsh', datetime.date(1987, 9, 21), Decimal('3100.00'), Decimal('50')], ['Kevin', 'Mourgos', datetime.date(1987, 7, 11), Decimal('5800.00'), Decimal('50')], ['Julia', 'Nayer', datetime.date(1987, 7, 12), Decimal('3200.00'), Decimal('50')], ['Irene', 'Mikkilineni', datetime.date(1987, 7, 13), Decimal('2700.00'), Decimal('50')], ['James', 'Landry', datetime.date(1987, 7, 14), Decimal('2400.00'), Decimal('50')], ['Douglas', 'Grant', datetime.date(1987, 9, 24), Decimal('2600.00'), Decimal('50')], ['Donald', 'OConnell', datetime.date(1987, 9, 23), Decimal('2600.00'), Decimal('50')], ['Kevin', 'Feeney', datetime.date(1987, 9, 22), Decimal('3000.00'), Decimal('50')], ['Alexander', 'Hunold', datetime.date(1987, 6, 20), Decimal('9000.00'), Decimal('60')], ['David', 'Austin', datetime.date(1987, 6, 22), Decimal('4800.00'), Decimal('60')], ['Diana', 'Lorentz', datetime.date(1987, 6, 24), Decimal('4200.00'), Decimal('60')], ['Valli', 'Pataballa', datetime.date(1987, 6, 23), Decimal('4800.00'), Decimal('60')], ['Bruce', 'Ernst', datetime.date(1987, 6, 21), Decimal('6000.00'), Decimal('60')], ['Hermann', 'Baer', datetime.date(1987, 9, 29), Decimal('10000.00'), Decimal('70')], ['Amit', 'Banda', datetime.date(1987, 8, 23), Decimal('6200.00'), Decimal('80')], ['John', 'Russell', datetime.date(1987, 8, 1), Decimal('14000.00'), Decimal('80')], ['Karen', 'Partners', datetime.date(1987, 8, 2), Decimal('13500.00'), Decimal('80')], ['Alberto', 'Errazuriz', datetime.date(1987, 8, 3), Decimal('12000.00'), Decimal('80')], ['Gerald', 'Cambrault', datetime.date(1987, 8, 4), Decimal('11000.00'), Decimal('80')], ['Eleni', 'Zlotkey', datetime.date(1987, 8, 5), Decimal('10500.00'), Decimal('80')], ['Peter', 'Tucker', datetime.date(1987, 8, 6), Decimal('10000.00'), Decimal('80')], ['David', 'Bernstein', datetime.date(1987, 8, 7), Decimal('9500.00'), Decimal('80')], ['Peter', 'Hall', datetime.date(1987, 8, 8), Decimal('9000.00'), Decimal('80')], ['Christopher', 'Olsen', datetime.date(1987, 8, 9), Decimal('8000.00'), Decimal('80')], ['Nanette', 'Cambrault', datetime.date(1987, 8, 10), Decimal('7500.00'), Decimal('80')], ['Oliver', 'Tuvault', datetime.date(1987, 8, 11), Decimal('7000.00'), Decimal('80')], ['Janette', 'King', datetime.date(1987, 8, 12), Decimal('10000.00'), Decimal('80')], ['Patrick', 'Sully', datetime.date(1987, 8, 13), Decimal('9500.00'), Decimal('80')], ['Allan', 'McEwen', datetime.date(1987, 8, 14), Decimal('9000.00'), Decimal('80')], ['Lindsey', 'Smith', datetime.date(1987, 8, 15), Decimal('8000.00'), Decimal('80')], ['Louise', 'Doran', datetime.date(1987, 8, 16), Decimal('7500.00'), Decimal('80')], ['Sarath', 'Sewall', datetime.date(1987, 8, 17), Decimal('7000.00'), Decimal('80')], ['Clara', 'Vishney', datetime.date(1987, 8, 18), Decimal('10500.00'), Decimal('80')], ['Danielle', 'Greene', datetime.date(1987, 8, 19), Decimal('9500.00'), Decimal('80')], ['David', 'Lee', datetime.date(1987, 8, 21), Decimal('6800.00'), Decimal('80')], ['Sundar', 'Ande', datetime.date(1987, 8, 22), Decimal('6400.00'), Decimal('80')], ['Lisa', 'Ozer', datetime.date(1987, 8, 24), Decimal('11500.00'), Decimal('80')], ['Harrison', 'Bloom', datetime.date(1987, 8, 25), Decimal('10000.00'), Decimal('80')], ['Tayler', 'Fox', datetime.date(1987, 8, 26), Decimal('9600.00'), Decimal('80')], ['William', 'Smith', datetime.date(1987, 8, 27), Decimal('7400.00'), Decimal('80')], ['Elizabeth', 'Bates', datetime.date(1987, 8, 28), Decimal('7300.00'), Decimal('80')], ['Sundita', 'Kumar', datetime.date(1987, 8, 29), Decimal('6100.00'), Decimal('80')], ['Ellen', 'Abel', datetime.date(1987, 8, 30), Decimal('11000.00'), Decimal('80')], ['Alyssa', 'Hutton', datetime.date(1987, 8, 31), Decimal('8800.00'), Decimal('80')], ['Jonathon', 'Taylor', datetime.date(1987, 9, 1), Decimal('8600.00'), Decimal('80')], ['Jack', 'Livingston', datetime.date(1987, 9, 2), Decimal('8400.00'), Decimal('80')], ['Charles', 'Johnson', datetime.date(1987, 9, 4), Decimal('6200.00'), Decimal('80')], ['Steven', 'King', datetime.date(1987, 6, 17), Decimal('24000.00'), Decimal('90')], ['Lex', 'De Haan', datetime.date(1987, 6, 19), Decimal('17000.00'), Decimal('90')], ['Neena', 'Kochhar', datetime.date(1987, 6, 18), Decimal('17000.00'), Decimal('90')], ['John', 'Chen', datetime.date(1987, 6, 27), Decimal('8200.00'), Decimal('100')], ['Daniel', 'Faviet', datetime.date(1987, 6, 26), Decimal('9000.00'), Decimal('100')], ['Nancy', 'Greenberg', datetime.date(1987, 6, 25), Decimal('12000.00'), Decimal('100')], ['Luis', 'Popp', datetime.date(1987, 6, 30), Decimal('6900.00'), Decimal('100')], ['Ismael', 'Sciarra', datetime.date(1987, 6, 28), Decimal('7700.00'), Decimal('100')], ['Shelley', 'Higgins', datetime.date(1987, 9, 30), Decimal('12000.00'), Decimal('110')], ['William', 'Gietz', datetime.date(1987, 10, 1), Decimal('8300.00'), Decimal('110')]]",[['Error']],FALSE
84,"SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4",SELECT department_id  FROM departments  WHERE manager_id IN (     SELECT manager_id      FROM employees      GROUP BY manager_id      HAVING COUNT(employee_id) >= 4 );,"[[Decimal('100')], [Decimal('60')], [Decimal('30')], [Decimal('50')], [Decimal('80')]]","[[Decimal('30')], [Decimal('50')], [Decimal('60')], [Decimal('80')], [Decimal('90')], [Decimal('100')]]",FALSE
85,SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500,SELECT * FROM employees WHERE salary >= (SELECT MIN(salary) FROM employees) AND salary <= 2500;,"[[Decimal('119'), 'Karen', 'Colmenares', 'KCOLMENA', '515.127.4566', datetime.date(1987, 7, 6), 'PU_CLERK', Decimal('2500.00'), Decimal('0.00'), Decimal('114'), Decimal('30')], [Decimal('127'), 'James', 'Landry', 'JLANDRY', '650.124.1334', datetime.date(1987, 7, 14), 'ST_CLERK', Decimal('2400.00'), Decimal('0.00'), Decimal('120'), Decimal('50')], [Decimal('128'), 'Steven', 'Markle', 'SMARKLE', '650.124.1434', datetime.date(1987, 7, 15), 'ST_CLERK', Decimal('2200.00'), Decimal('0.00'), Decimal('120'), Decimal('50')], [Decimal('131'), 'James', 'Marlow', 'JAMRLOW', '650.124.7234', datetime.date(1987, 7, 18), 'ST_CLERK', Decimal('2500.00'), Decimal('0.00'), Decimal('121'), Decimal('50')], [Decimal('132'), 'TJ', 'Olson', 'TJOLSON', '650.124.8234', datetime.date(1987, 7, 19), 'ST_CLERK', Decimal('2100.00'), Decimal('0.00'), Decimal('121'), Decimal('50')], [Decimal('135'), 'Ki', 'Gee', 'KGEE', '650.127.1734', datetime.date(1987, 7, 22), 'ST_CLERK', Decimal('2400.00'), Decimal('0.00'), Decimal('122'), Decimal('50')], [Decimal('136'), 'Hazel', 'Philtanker', 'HPHILTAN', '650.127.1634', datetime.date(1987, 7, 23), 'ST_CLERK', Decimal('2200.00'), Decimal('0.00'), Decimal('122'), Decimal('50')], [Decimal('140'), 'Joshua', 'Patel', 'JPATEL', '650.121.1834', datetime.date(1987, 7, 27), 'ST_CLERK', Decimal('2500.00'), Decimal('0.00'), Decimal('123'), Decimal('50')], [Decimal('144'), 'Peter', 'Vargas', 'PVARGAS', '650.121.2004', datetime.date(1987, 7, 31), 'ST_CLERK', Decimal('2500.00'), Decimal('0.00'), Decimal('124'), Decimal('50')], [Decimal('182'), 'Martha', 'Sullivan', 'MSULLIVA', '650.507.9878', datetime.date(1987, 9, 7), 'SH_CLERK', Decimal('2500.00'), Decimal('0.00'), Decimal('120'), Decimal('50')], [Decimal('191'), 'Randall', 'Perkins', 'RPERKINS', '650.505.4876', datetime.date(1987, 9, 16), 'SH_CLERK', Decimal('2500.00'), Decimal('0.00'), Decimal('122'), Decimal('50')]]","[[Decimal('119'), 'Karen', 'Colmenares', 'KCOLMENA', '515.127.4566', datetime.date(1987, 7, 6), 'PU_CLERK', Decimal('2500.00'), Decimal('0.00'), Decimal('114'), Decimal('30')], [Decimal('127'), 'James', 'Landry', 'JLANDRY', '650.124.1334', datetime.date(1987, 7, 14), 'ST_CLERK', Decimal('2400.00'), Decimal('0.00'), Decimal('120'), Decimal('50')], [Decimal('128'), 'Steven', 'Markle', 'SMARKLE', '650.124.1434', datetime.date(1987, 7, 15), 'ST_CLERK', Decimal('2200.00'), Decimal('0.00'), Decimal('120'), Decimal('50')], [Decimal('131'), 'James', 'Marlow', 'JAMRLOW', '650.124.7234', datetime.date(1987, 7, 18), 'ST_CLERK', Decimal('2500.00'), Decimal('0.00'), Decimal('121'), Decimal('50')], [Decimal('132'), 'TJ', 'Olson', 'TJOLSON', '650.124.8234', datetime.date(1987, 7, 19), 'ST_CLERK', Decimal('2100.00'), Decimal('0.00'), Decimal('121'), Decimal('50')], [Decimal('135'), 'Ki', 'Gee', 'KGEE', '650.127.1734', datetime.date(1987, 7, 22), 'ST_CLERK', Decimal('2400.00'), Decimal('0.00'), Decimal('122'), Decimal('50')], [Decimal('136'), 'Hazel', 'Philtanker', 'HPHILTAN', '650.127.1634', datetime.date(1987, 7, 23), 'ST_CLERK', Decimal('2200.00'), Decimal('0.00'), Decimal('122'), Decimal('50')], [Decimal('140'), 'Joshua', 'Patel', 'JPATEL', '650.121.1834', datetime.date(1987, 7, 27), 'ST_CLERK', Decimal('2500.00'), Decimal('0.00'), Decimal('123'), Decimal('50')], [Decimal('144'), 'Peter', 'Vargas', 'PVARGAS', '650.121.2004', datetime.date(1987, 7, 31), 'ST_CLERK', Decimal('2500.00'), Decimal('0.00'), Decimal('124'), Decimal('50')], [Decimal('182'), 'Martha', 'Sullivan', 'MSULLIVA', '650.507.9878', datetime.date(1987, 9, 7), 'SH_CLERK', Decimal('2500.00'), Decimal('0.00'), Decimal('120'), Decimal('50')], [Decimal('191'), 'Randall', 'Perkins', 'RPERKINS', '650.505.4876', datetime.date(1987, 9, 16), 'SH_CLERK', Decimal('2500.00'), Decimal('0.00'), Decimal('122'), Decimal('50')]]",TRUE
86,"SELECT employee_id ,  first_name ,  last_name ,  salary FROM employees WHERE salary  >  ( SELECT AVG (salary) FROM employees ) AND department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%J%')","SELECT e.employee_number, e.first_name, e.last_name, e.salary FROM employees e JOIN departments d ON e.department_id = d.department_id WHERE e.salary > (SELECT AVG(salary) FROM employees) AND EXISTS (     SELECT 1     FROM employees e2     WHERE e2.department_id = d.department_id     AND e2.first_name LIKE '%J%' );","[[Decimal('108'), 'Nancy', 'Greenberg', Decimal('12000.00')], [Decimal('109'), 'Daniel', 'Faviet', Decimal('9000.00')], [Decimal('110'), 'John', 'Chen', Decimal('8200.00')], [Decimal('111'), 'Ismael', 'Sciarra', Decimal('7700.00')], [Decimal('112'), 'Jose Manuel', 'Urman', Decimal('7800.00')], [Decimal('113'), 'Luis', 'Popp', Decimal('6900.00')], [Decimal('120'), 'Matthew', 'Weiss', Decimal('8000.00')], [Decimal('121'), 'Adam', 'Fripp', Decimal('8200.00')], [Decimal('122'), 'Payam', 'Kaufling', Decimal('7900.00')], [Decimal('123'), 'Shanta', 'Vollman', Decimal('6500.00')], [Decimal('145'), 'John', 'Russell', Decimal('14000.00')], [Decimal('146'), 'Karen', 'Partners', Decimal('13500.00')], [Decimal('147'), 'Alberto', 'Errazuriz', Decimal('12000.00')], [Decimal('148'), 'Gerald', 'Cambrault', Decimal('11000.00')], [Decimal('149'), 'Eleni', 'Zlotkey', Decimal('10500.00')], [Decimal('150'), 'Peter', 'Tucker', Decimal('10000.00')], [Decimal('151'), 'David', 'Bernstein', Decimal('9500.00')], [Decimal('152'), 'Peter', 'Hall', Decimal('9000.00')], [Decimal('153'), 'Christopher', 'Olsen', Decimal('8000.00')], [Decimal('154'), 'Nanette', 'Cambrault', Decimal('7500.00')], [Decimal('155'), 'Oliver', 'Tuvault', Decimal('7000.00')], [Decimal('156'), 'Janette', 'King', Decimal('10000.00')], [Decimal('157'), 'Patrick', 'Sully', Decimal('9500.00')], [Decimal('158'), 'Allan', 'McEwen', Decimal('9000.00')], [Decimal('159'), 'Lindsey', 'Smith', Decimal('8000.00')], [Decimal('160'), 'Louise', 'Doran', Decimal('7500.00')], [Decimal('161'), 'Sarath', 'Sewall', Decimal('7000.00')], [Decimal('162'), 'Clara', 'Vishney', Decimal('10500.00')], [Decimal('163'), 'Danielle', 'Greene', Decimal('9500.00')], [Decimal('164'), 'Mattea', 'Marvins', Decimal('7200.00')], [Decimal('165'), 'David', 'Lee', Decimal('6800.00')], [Decimal('168'), 'Lisa', 'Ozer', Decimal('11500.00')], [Decimal('169'), 'Harrison', 'Bloom', Decimal('10000.00')], [Decimal('170'), 'Tayler', 'Fox', Decimal('9600.00')], [Decimal('171'), 'William', 'Smith', Decimal('7400.00')], [Decimal('172'), 'Elizabeth', 'Bates', Decimal('7300.00')], [Decimal('174'), 'Ellen', 'Abel', Decimal('11000.00')], [Decimal('175'), 'Alyssa', 'Hutton', Decimal('8800.00')], [Decimal('176'), 'Jonathon', 'Taylor', Decimal('8600.00')], [Decimal('177'), 'Jack', 'Livingston', Decimal('8400.00')], [Decimal('178'), 'Kimberely', 'Grant', Decimal('7000.00')]]",[['Error']],FALSE
87,"SELECT T1.artist_name 
FROM artist AS T1 
JOIN song AS T2 ON T1.artist_name  =  T2.artist_name 
WHERE T2.languages  =  'bangla' 
GROUP BY T1.artist_name ORDER BY count(*) DESC LIMIT 3","SELECT artist_name, COUNT(song_id) AS number_of_songs FROM artists JOIN songs ON artists.artist_id = songs.artist_id WHERE songs.language = 'Bangla' GROUP BY artist_name ORDER BY number_of_songs DESC LIMIT 3;","[['Farida'], ['Prity'], ['Shrikanta']]",[['Error']],FALSE
88,SELECT T3.brand FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id  =  T3.id WHERE T1.range  =  'Toubkal Atlas' INTERSECT SELECT T3.brand FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id  =  T3.id WHERE T1.range  =  'Lasta Massif',SELECT DISTINCT lens_brand FROM lenses JOIN pictures ON lenses.lens_id = pictures.lens_id JOIN mountains ON pictures.mountain_id = mountains.mountain_id WHERE mountains.range = 'Toubkal Atlas' AND lenses.lens_id IN (     SELECT lenses.lens_id     FROM lenses     JOIN pictures ON lenses.lens_id = pictures.lens_id     JOIN mountains ON pictures.mountain_id = mountains.mountain_id     WHERE mountains.range = 'Lasta Massif' );,[['Sigma']],[['Error']],FALSE
89,SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning' INTERSECT SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Night',SELECT channel_name  FROM channels  WHERE broadcast_time = 'morning' AND broadcast_time = 'night';,[['CCTV-1']],[['Error']],FALSE
90,SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  'Morning' INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  'Night',SELECT owner  FROM programs  WHERE program_time = 'morning'  AND owner IN (SELECT owner FROM programs WHERE program_time = 'night');,"[['Southern Media Corporation (SMC)'], ['Beijing Television (BTV)'], ['Hunan Broadcasting System (HBS)']]",[['Error']],FALSE
91,"SELECT T1.subject_id ,  T2.subject_name ,  COUNT(*) 
FROM ""Courses"" AS T1 JOIN ""Subjects"" AS T2 ON T1.subject_id  =  T2.subject_id 
GROUP BY T1.subject_id, T2.subject_name  
ORDER BY COUNT(*) ASC","SELECT subject_id, subject_name, COUNT(course_id) AS course_count FROM subjects JOIN courses ON subjects.subject_id = courses.subject_id GROUP BY subjects.subject_id, subjects.subject_name ORDER BY course_count ASC;","[[2, 'Arts', 4], [3, 'Language', 5], [1, 'Computer Science', 6]]",[['Error']],FALSE
92,"SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.Claim_id HAVING count(*)  >  2 UNION SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id WHERE T1.Amount_Claimed  =  ( SELECT max(Amount_Claimed) FROM Claims )","SELECT claim_date, claim_id  FROM claims  WHERE settlements > 2 OR claim_value = (SELECT MAX(claim_value) FROM claims);","[[datetime.date(2017, 10, 21), 801], [datetime.date(2017, 8, 3), 571]]",[['Error']],FALSE
93,"SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 EXCEPT SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id JOIN Claims AS T3 ON T2.policy_id  =  T3.policy_id","SELECT customer_details, id  FROM customers  WHERE id IN (     SELECT customer_id      FROM policies      GROUP BY customer_id      HAVING COUNT(policy_id) >= 2 )  AND id NOT IN (     SELECT customer_id      FROM claims );","[['Dr. Diana Rath', 4]]",[['Error']],FALSE
94,"SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Claimed DESC LIMIT 1","SELECT settlement_amount, claim_amount  FROM claims  ORDER BY claim_amount DESC  LIMIT 1;","[[1528, 89632]]",[['Error']],FALSE
95,"SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Claims WHERE Amount_Claimed  >  ( SELECT avg(Amount_Claimed) FROM Claims )","SELECT claim_date, settlement_date  FROM claims  WHERE claimed_amount > (SELECT AVG(claimed_amount) FROM claims);","[[datetime.date(2016, 8, 12), datetime.date(2018, 1, 27)], [datetime.date(2017, 2, 24), datetime.date(2018, 1, 21)], [datetime.date(2018, 6, 14), datetime.date(2017, 12, 20)], [datetime.date(2017, 8, 3), datetime.date(2018, 2, 18)], [datetime.date(2016, 8, 26), datetime.date(2017, 9, 4)], [datetime.date(2018, 7, 13), datetime.date(2017, 11, 22)]]",[['Error']],FALSE
96,"SELECT DISTINCT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  1 EXCEPT SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  'OTHA' AND T2.lastname  =  'MOYER'","SELECT first_name, last_name  FROM students  WHERE grade = 1 AND teacher_id NOT IN (SELECT teacher_id FROM teachers WHERE name = 'OTHA MOYER');","[['RODGER', 'RANSLER'], ['MARCUS', 'RUNKLE'], ['ANTONY', 'BRIGHTBILL'], ['CHANTAL', 'HANNEMANN'], ['REYNALDO', 'BARTKUS'], ['KERI', 'TRAYWICK'], ['PATRINA', 'AMY']]",[['Error']],FALSE
97,"SELECT T2.""Name""
FROM employment AS T1 
JOIN people AS T2 ON T1.""People_ID"" =  T2.""People_ID"" 
JOIN company AS T3 ON T1.""Company_ID""  =  T3.""Company_ID""
WHERE T3.""Sales_in_Billion""  >  200",SELECT employees.name  FROM employees  JOIN companies ON employees.company_id = companies.id  WHERE companies.sales > 200;,"[['Tom Sheehey'], ['Jerry Corcoran'], ['Darryl Kennedy']]",[['Error']],FALSE
98,"SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  'Hopkins Student Enterprises' AND t2.position  =  'CTO'","SELECT first_name, last_name  FROM club_members  WHERE club_name = 'Hopkins Student Enterprises' AND position = 'CTO';","[['Jandy', 'Nelson']]",[['Error']],FALSE
99,"SELECT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' INTERSECT SELECT T1.name ,   T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Alice'","SELECT name, age  FROM person  WHERE id IN (     SELECT person_id      FROM friendship      WHERE friend_id IN (         SELECT id          FROM person          WHERE name IN ('Dan', 'Alice')     )     GROUP BY person_id      HAVING COUNT(person_id) = 2 );","[['Zach', 45]]",[['Error']],FALSE
100,"SELECT T1.name ,  T1.age ,  T1.job FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend =  'Alice' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE friend =  'Alice')","Assuming there is a table ""people"" with columns ""name"", ""age"", ""job"", and a table ""friendships"" with columns ""person1"", ""person2"", ""friendship_start_date"", the SQL query could look like this:  ```sql SELECT p.name, p.age, p.job FROM people p JOIN friendships f ON p.name = f.person1 OR p.name = f.person2 WHERE (f.person1 = 'Alice' OR f.person2 = 'Alice') AND f.friendship_start_date =      (SELECT MIN(friendship_start_date)      FROM friendships      WHERE person1 = 'Alice' OR person2 = 'Alice') ```   This query assumes that the ""friendships"" table contains pairs of friends and the date when their friendship started. The subquery finds the earliest friendship date for Alice, and the main query selects the names, ages, and jobs of all people who became friends with Alice on that date.","[['Zach', 45, 'doctor']]",[['Error']],FALSE
101,SELECT DISTINCT T4.name FROM PersonFriend AS T1 JOIN Person AS T2 ON T1.name  =  T2.name JOIN PersonFriend AS T3 ON T1.friend  =  T3.name JOIN PersonFriend AS T4 ON T3.friend  =  T4.name WHERE T2.name  =  'Alice' AND T4.name != 'Alice',"Assuming you have a table named ""friends"" with columns ""person1"" and ""person2"" representing the friendship between two people, the SQL query could look like this:  ```sql SELECT DISTINCT f2.person2 AS friend_of_friend FROM friends f1 JOIN friends f2 ON f1.person2 = f2.person1 WHERE f1.person1 = 'Alice' AND f2.person2 != 'Alice' ```  This query first finds all friends of Alice (f1.person2) and then finds their friends (f2.person2). The DISTINCT keyword is used to eliminate duplicates, and the condition f2.person2 != 'Alice' ensures that Alice is not included in the list of friends of friends.",[['Zach']],[['Error']],FALSE
102,"(SELECT document_name FROM documents 
GROUP BY document_type_code, document_name 
ORDER BY count(*) DESC LIMIT 3) 
INTERSECT 
(SELECT document_name FROM documents 
GROUP BY document_structure_code, document_name 
ORDER BY count(*) DESC LIMIT 3)","Assuming we have a table named ""documents"" with columns ""name"", ""type"", and ""structure"", the SQL query would look like this:  ```sql SELECT name  FROM documents  WHERE type IN (     SELECT type      FROM documents      GROUP BY type      ORDER BY COUNT(*) DESC      LIMIT 3 )  AND structure IN (     SELECT structure      FROM documents      GROUP BY structure      ORDER BY COUNT(*) DESC      LIMIT 3 ); ```  This query first identifies the three most common types and structures in the documents table, and then selects the names of the documents that have both one of these types and one of these structures.",[['How to cook pasta']],[['Error']],FALSE
103,SELECT document_name FROM documents EXCEPT SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code JOIN document_sections_images AS t3 ON t2.section_id  =  t3.section_id,SELECT name FROM documents WHERE NOT EXISTS (SELECT * FROM images WHERE documents.id = images.document_id);,"[['Learning Database'], ['Life about Claude Monet'], ['How to cook pasta'], ['Learning Japanese'], ['Humanity: a fact']]",[['Error']],FALSE
104,SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*)  >=  2 ORDER BY T1.Product_Name,SELECT product_name  FROM products  GROUP BY product_name  HAVING COUNT(event_id) >= 2  ORDER BY product_name ASC;,"[['Men suits'], ['Special Dinning'], ['TV Equipments']]",[['Error']],FALSE
105,"SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'Order' INTERSECT SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'No Response'","SELECT name, payment_method  FROM customers  WHERE id IN (     SELECT customer_id      FROM mailshots      WHERE outcome = 'Order' )  AND id IN (     SELECT customer_id      FROM mailshots      WHERE outcome = 'No Response' );","[['Wendell', 'Credit Card'], ['Carlotta', 'Direct Debit']]",[['Error']],FALSE
106,"SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  'New' INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  'Pending'","SELECT name, address  FROM customers  WHERE id IN (     SELECT customer_id      FROM orders      WHERE status IN ('New', 'Pending')      GROUP BY customer_id      HAVING COUNT(DISTINCT status) = 2 );","[['Lexus', '9581 Will Flat Suite 272\nEast Cathryn, WY 30751-4404']]",[['Error']],FALSE
107,"SELECT product_id
FROM Order_Items
GROUP BY product_id
HAVING COUNT(*) > 3
UNION
SELECT product_id
FROM Product_Suppliers
GROUP BY product_id
HAVING SUM(CAST(total_amount_purchased AS numeric)) > 80000;",SELECT product_id  FROM orders  GROUP BY product_id  HAVING COUNT(order_id) > 3 OR SUM(quantity) * AVG(price) > 80000;,"[[5], [4], [8]]",[['Error']],FALSE
108,SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id JOIN products AS T4 ON T3.product_id  =  T4.product_id WHERE T4.product_name  =  'keyboard',SELECT DISTINCT customers.name  FROM customers  JOIN purchases ON customers.id = purchases.customer_id  JOIN products ON purchases.product_id = products.id  WHERE products.name = 'keyboard';,"[['Cordell'], ['Jon']]",[['Error']],FALSE
109,"SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  'Sales Person' EXCEPT SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  'Clerical Staff'","SELECT name, gender  FROM staff  WHERE job_title = 'Sales Person'  AND job_title != 'Clerical Staff';","[['Melody', '1'], ['Sabrina', '1'], ['Zakary', '1']]",[['Error']],FALSE
110,"SELECT T1.""Aircraft"" FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.""Aircraft_ID""  =  T2.""Aircraft_ID"" JOIN airport AS T3 ON T2.""Airport_ID""  =  T3.""Airport_ID"" WHERE T3.""Airport_Name""  =  'London Gatwick'",SELECT aircrafts.name  FROM aircrafts  JOIN airports ON aircrafts.airport_id = airports.id  WHERE airports.name = 'London Gatwick';,[['Robinson R-22']],[['Error']],FALSE
111,"SELECT t1.""Name"" ,  t1.""Age"" 
FROM pilot AS t1 
JOIN MATCH AS t2 ON t1.""Pilot_Id""  =  t2.""Winning_Pilot"" 
WHERE t1.""Age""  <  30 
GROUP BY t1.""Name"" ,  t1.""Age"" 
ORDER BY count(*) DESC LIMIT 1","SELECT name, age  FROM pilots  WHERE age < 30  GROUP BY name, age  ORDER BY COUNT(wins) DESC  LIMIT 1;","[['Ayana Spencer', 25]]",[['Error']],FALSE
112,"SELECT T1.resident_id ,  T1.other_details ,  count(*) 
FROM Residents AS T1 
JOIN Residents_Services AS T2 ON T1.resident_id  =  T2.resident_id 
GROUP BY T1.resident_id, T1.other_details  
ORDER BY count(*) DESC","SELECT resident_id, details, COUNT(service_id) AS service_count FROM resident_services GROUP BY resident_id, details ORDER BY service_count DESC;","[[28, 'Miss Alanis Lockman', 1], [87, 'Mrs. Raphaelle Fisher', 1], [67, 'Terrill Bernhard', 1], [6, 'Anderson Batz', 1], [45, 'Prof. Nasir Hoppe', 1], [47, 'Tiffany Jaskolski', 1], [43, 'Elroy Schuster', 1], [90, 'Cassie Johnson', 1], [88, 'Jacques Glover II', 1], [23, 'Jess Wyman', 1], [83, 'Loy Walter', 1]]",[['Error']],FALSE
113,"SELECT t3.""Headquartered_City"" 
FROM store AS t1 
JOIN store_district AS t2 ON t1.""Store_ID"" =  t2.""Store_ID"" 
JOIN district AS t3 ON t2.""District_ID""  =  t3.""District_ID"" 
WHERE t1.""Store_Name""  =  'Blackville'",SELECT city  FROM stores  WHERE store_name = 'Blackville';,[['Bhakkar City']],[['Error']],FALSE
114,"SELECT t3.""Headquartered_City"" ,  count(*) 
FROM store AS t1 
JOIN store_district AS t2 ON t1.""Store_ID""  =  t2.""Store_ID""
JOIN district AS t3 ON t2.""District_ID""  =  t3.""District_ID""
GROUP BY t3.""Headquartered_City""","SELECT city, COUNT(*)  FROM stores  GROUP BY city;","[['Hafizabad City', 1], ['Bhakkar City', 1], ['Bahawalpur City', 1], ['Khanewal City', 2]]",[['Error']],FALSE
115,"SELECT t3.""Headquartered_City"" ,  count(*) 
FROM store AS t1 
JOIN store_district AS t2 ON t1.""Store_ID""  =  t2.""Store_ID""
JOIN district AS t3 ON t2.""District_ID""  =  t3.""District_ID"" 
GROUP BY t3.""Headquartered_City""","SELECT city, COUNT(*)  FROM stores  GROUP BY city;","[['Hafizabad City', 1], ['Bhakkar City', 1], ['Bahawalpur City', 1], ['Khanewal City', 2]]",[['Error']],FALSE
116,"SELECT t3.""Headquartered_City""
FROM store AS t1 
JOIN store_district AS t2 ON t1.""Store_ID""  =  t2.""Store_ID""
JOIN district AS t3 ON t2.""District_ID""  =  t3.""District_ID"" 
GROUP BY t3.""Headquartered_City""
ORDER BY count(*) DESC LIMIT 1","SELECT city, COUNT(*) as store_count FROM stores GROUP BY city ORDER BY store_count DESC LIMIT 1;",[['Khanewal City']],[['Error']],FALSE
117,"SELECT t3.""Headquartered_City"" FROM ""store"" AS t1 JOIN ""store_district"" AS t2 ON t1.""Store_ID"" = t2.""Store_ID"" JOIN ""district"" AS t3 ON t2.""District_ID"" = t3.""District_ID"" GROUP BY t3.""Headquartered_City"" ORDER BY count(*) DESC LIMIT 1",SELECT city  FROM stores  WHERE type = 'flagship'  GROUP BY city  ORDER BY COUNT(*) DESC  LIMIT 1;,[['Khanewal City']],[['Error']],FALSE
118,"SELECT t3.""District_name"" FROM ""store"" AS t1 JOIN ""store_district"" AS t2 ON t1.""Store_ID"" = t2.""Store_ID"" JOIN ""district"" AS t3 ON t2.""District_ID"" = t3.""District_ID"" WHERE t1.""Type"" = 'City Mall' INTERSECT SELECT t3.""District_name"" FROM store AS t1 JOIN ""store_district"" AS t2 ON t1.""Store_ID"" = t2.""Store_ID"" JOIN ""district"" AS t3 ON t2.""District_ID"" = t3.""District_ID"" WHERE t1.""Type"" = 'Village Store';",SELECT DISTINCT district_name  FROM districts  WHERE district_id IN (     SELECT district_id      FROM stores      WHERE store_type = 'city mall' )  AND district_id IN (     SELECT district_id      FROM stores      WHERE store_type = 'village store' );,[['Khanewal District']],[['Error']],FALSE
119,"SELECT t3.""District_name"" FROM ""store"" AS t1 JOIN ""store_district"" AS t2 ON t1.""Store_ID"" = t2.""Store_ID"" JOIN ""district"" AS t3 ON t2.""District_ID"" = t3.""District_ID"" WHERE t1.""Type"" = 'City Mall' INTERSECT SELECT t3.""District_name"" FROM store AS t1 JOIN ""store_district"" AS t2 ON t1.""Store_ID"" = t2.""Store_ID"" JOIN ""district"" AS t3 ON t2.""District_ID"" = t3.""District_ID"" WHERE t1.""Type"" = 'Village Store';","SELECT district_name  FROM districts  WHERE district_id IN (     SELECT district_id      FROM shops      WHERE shop_style IN ('mall', 'village store')     GROUP BY district_id      HAVING COUNT(DISTINCT shop_style) = 2 );",[['Khanewal District']],[['Error']],FALSE
120,SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie' INTERSECT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid',SELECT state_name  FROM states  WHERE EXISTS (     SELECT 1      FROM college_students      WHERE college_students.state_id = states.state_id      AND (college_students.position = 'goalie' OR college_students.position = 'mid') );,[['LA']],[['Error']],FALSE
121,SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie' INTERSECT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid',"SELECT DISTINCT state_name  FROM college_students  INNER JOIN sports ON college_students.id = sports.student_id  WHERE sports.position IN ('goalie', 'mid-field');",[['LA']],[['Error']],FALSE
122,SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie',SELECT DISTINCT state_name  FROM college_students  WHERE position = 'mid'  AND state_name NOT IN (SELECT state_name FROM college_students WHERE position = 'goalie');,[['OK']],[['Error']],FALSE
123,SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie',SELECT DISTINCT state_name  FROM states  JOIN colleges ON states.state_id = colleges.state_id  JOIN students ON colleges.college_id = students.college_id  JOIN positions ON students.position_id = positions.position_id  WHERE positions.position_name = 'mid'  AND NOT EXISTS (     SELECT 1      FROM students s2      JOIN positions p2 ON s2.position_id = p2.position_id      WHERE p2.position_name = 'goalie'      AND s2.college_id = students.college_id );,[['OK']],[['Error']],FALSE
124,SELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie') as T,SELECT COUNT(DISTINCT state)  FROM college_students  WHERE position = 'mid'  AND state NOT IN (SELECT state FROM college_students WHERE position = 'goalie');,[[1]],[['Error']],FALSE
125,SELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie') as T,SELECT COUNT(DISTINCT state)  FROM college_students  WHERE position = 'mid' AND position != 'goalie';,[[1]],[['Error']],FALSE
126,"SELECT T3.""Shop_Name"", T2.""Carrier"" 
FROM ""stock"" AS T1 JOIN ""device"" AS T2 ON T1.""Device_ID"" = T2.""Device_ID"" 
JOIN ""shop"" AS T3 ON T1.""Shop_ID"" = T3.""Shop_ID""","SELECT shops.name, devices.carrier FROM shops JOIN stock ON shops.id = stock.shop_id JOIN devices ON stock.device_id = devices.id;","[['Dinas Device', 'Vodafone AU'], ['Best Buy', 'Vodafone AU'], ['Ferndale', 'Vodafone AU'], ['Apple', 'Vodafone AU'], ['Dinas Device', 'Bell Mobility'], ['ATnT', 'Vodafone AU'], ['Ferndale', 'Bell Mobility'], ['Gelli repair', 'Bell Mobility']]",[['Error']],FALSE
127,"SELECT T2.""Shop_Name"" FROM ""stock"" AS T1 JOIN ""shop"" AS T2 ON T1.""Shop_ID"" = T2.""Shop_ID"" GROUP BY T1.""Shop_ID"", T2.""Shop_Name"" ORDER BY COUNT(*) DESC LIMIT 1",SELECT shop_name  FROM shops  JOIN inventory ON shops.shop_id = inventory.shop_id  GROUP BY shop_name  ORDER BY COUNT(DISTINCT device_id) DESC  LIMIT 1;,[['Dinas Device']],[['Error']],FALSE
128,"SELECT count(*) ,  T1.product_name FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name ORDER BY count(*) DESC LIMIT 1","SELECT product_name, COUNT(*) AS problem_count FROM problems GROUP BY product_name ORDER BY problem_count DESC LIMIT 1;","[[4, 'rose']]",[['Error']],FALSE
129,SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = 'Christop' AND T2.staff_last_name = 'Berge' INTERSECT SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = 'Ashley' AND T2.staff_last_name = 'Medhurst',SELECT product_id  FROM problems  WHERE reported_by = 'Christop Berge' AND closure_authorised_by = 'Ashley Medhurst';,[[8]],[['Error']],FALSE
130,"SELECT T3.name ,  T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id ORDER BY T1.register_year","SELECT members.name, branches.branch_name  FROM members  JOIN branches ON members.branch_id = branches.id  ORDER BY members.registration_year;","[['Trevard Lindley', 'Brooke Greville'], ['Myron Pryor', 'Zytogorski'], ['Johnny Williams', 'Popert'], ['Jeremy Jarmon', 'Stanley'], ['Ventrell Jenkins', 'Alexandre'], ['Braxton Kelley', 'Cochrane'], ['Corey Peters', 'Alexandre'], ['Micah Johnson', 'Taverner']]",[['Error']],FALSE
131,"SELECT T2.name ,T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id WHERE T1.register_year = '2016' GROUP BY T2.branch_id ORDER BY count(*) DESC LIMIT 1","SELECT branch_name, opening_year  FROM branches  WHERE branch_id = (     SELECT branch_id      FROM memberships      WHERE registration_year = 2016      GROUP BY branch_id      ORDER BY COUNT(*) DESC      LIMIT 1 );","[['Alexandre', '2001']]",[['Error']],FALSE
132,"SELECT t1.product_id, t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code JOIN product_characteristics AS t3 ON t1.product_id = t3.product_id GROUP BY t1.product_id, t2.color_description HAVING count(*) >= 2","SELECT product_id, color_description  FROM products  WHERE (SELECT COUNT(*) FROM characteristics WHERE characteristics.product_id = products.product_id) >= 2;","[[6, 'blue'], [7, 'red'], [11, 'black'], [12, 'blue']]",[['Error']],FALSE
133,SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.payment_method_code  =  'Credit Card' GROUP BY T1.customer_id HAVING count(*)  >  2,SELECT customers.name  FROM customers  JOIN orders ON customers.id = orders.customer_id  JOIN payment_methods ON orders.payment_method_id = payment_methods.id  WHERE payment_methods.method = 'Credit Card'  GROUP BY customers.name  HAVING COUNT(orders.id) > 2;,"[['Sterling'], ['Cleo']]",[['Error']],FALSE
134,"SELECT T1.customer_name, T1.customer_phone FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id JOIN order_items AS T3 ON T3.order_id = T2.order_id GROUP BY T1.customer_id ORDER BY SUM(CAST(t3.order_quantity AS integer)) DESC LIMIT 1","Assuming you have two tables: ""orders"" with columns ""customer_id"" and ""product_quantity"", and ""customers"" with columns ""id"", ""name"", and ""phone"". The SQL query would be:  ```sql SELECT c.name, c.phone FROM customers c JOIN (     SELECT customer_id, SUM(product_quantity) as total_quantity     FROM orders     GROUP BY customer_id     ORDER BY total_quantity DESC     LIMIT 1 ) o ON c.id = o.customer_id; ```  This query first calculates the total product quantity for each customer in the subquery, then orders them in descending order and takes the top one. It then joins this result with the customers table to get the name and phone of the customer.","[['Cleo', '1-202-928-5395']]",[['Error']],FALSE
135,SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' INTERSECT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room',SELECT name  FROM dorm  WHERE amenities LIKE '%TV Lounge%' AND amenities LIKE '%Study Room%';,"[['Dorm-plex 2000'], ['Anonymous Donor Hall']]",[['Error']],FALSE
136,SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T2.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid  =  T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid  =  T5.amenid GROUP BY T3.dormid ORDER BY count(*) DESC LIMIT 1),SELECT students.first_name FROM students JOIN dorms ON students.dorm_id = dorms.id WHERE dorms.id = (     SELECT dorm_id     FROM amenities     GROUP BY dorm_id     ORDER BY COUNT(*) DESC     LIMIT 1 ),"[['Linda'], ['Tracy'], ['Shiela'], ['Dinesh'], ['Paul'], ['Lisa'], ['Jandy'], ['Eric'], ['Derek'], ['David'], ['Steven'], ['Charles'], ['Susan'], ['Mark'], ['Bruce'], ['Michael'], ['Ian'], ['George'], ['Michael'], ['David'], ['Stacy'], ['Mark'], ['Paul'], ['Eric'], ['Jun'], ['Lisa'], ['Sarah'], ['Eric'], ['William'], ['Eric'], ['Sarah']]",[['Error']],FALSE
137,SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid JOIN lives_in AS T4 ON T4.dormid  =  T1.dormid JOIN student AS T5 ON T5.stuid  =  T4.stuid WHERE T5.lname  =  'Smith',SELECT amenities  FROM dorms  WHERE dorm_id IN (     SELECT dorm_id      FROM students      WHERE last_name = 'Smith' );,"[['TV Lounge'], ['Study Room'], ['Carpeted Rooms'], ['4 Walls'], ['Roof'], ['Ethernet Ports'], ['Air Conditioning'], ['Heat'], ['Study Room'], ['Carpeted Rooms'], ['4 Walls'], ['Roof'], ['Heat']]",[['Error']],FALSE
138,SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) LIMIT 1,SELECT customers.email  FROM customers  JOIN complaints ON customers.id = complaints.customer_id  WHERE complaints.product_id = (     SELECT product_id      FROM complaints      GROUP BY product_id      ORDER BY COUNT(*) DESC      LIMIT 1 );,[['ubeier@example.org']],[['Error']],FALSE
139,"SELECT t1.product_name FROM products AS t1 JOIN complaints AS t2 ON t1.product_id = t2.product_id JOIN customers AS t3 ON t2.customer_id = t3.customer_id GROUP BY t3.customer_id, t1.product_name ORDER BY COUNT(*) LIMIT 1","To answer this question, we need to make a few assumptions about your database schema. Let's assume you have two tables: `complaints` and `products`. The `complaints` table has columns `customer_id` and `product_id`, and the `products` table has columns `product_id` and `product_name`.  Here is a SQL query that could answer your question:  ```sql WITH customer_complaints AS (     SELECT customer_id, COUNT(*) as complaint_count     FROM complaints     GROUP BY customer_id     ORDER BY complaint_count ASC     LIMIT 1 ) SELECT p.product_name FROM products p JOIN complaints c ON p.product_id = c.product_id WHERE c.customer_id = (SELECT customer_id FROM customer_complaints); ```  This query first identifies the customer who has filed the least amount of complaints, then finds all products that this customer has complained about.",[['Mouse']],[['Error']],FALSE
140,"SELECT t1.product_name FROM products AS t1 JOIN complaints AS t2 ON t1.product_id = t2.product_id JOIN customers AS t3 ON t2.customer_id = t3.customer_id GROUP BY t3.customer_id, t1.product_name ORDER BY COUNT(*) LIMIT 1","SELECT product_name  FROM products  WHERE product_id IN (     SELECT product_id      FROM complaints      WHERE customer_id = (         SELECT customer_id          FROM (             SELECT customer_id, COUNT(*) as complaint_count              FROM complaints              GROUP BY customer_id              ORDER BY complaint_count ASC              LIMIT 1         ) AS subquery     ) );",[['Mouse']],[['The Great Gatsby']],FALSE
141,"SELECT T1.Name, T3.Visit_Date FROM Tourist_Attractions AS T1 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID JOIN VISITORS AS T2 ON T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = 'Vincent' OR T2.Tourist_Details = 'Vivian'","SELECT tourist_attractions.name, visits.visit_date FROM tourist_attractions JOIN visits ON tourist_attractions.id = visits.attraction_id JOIN tourists ON visits.tourist_id = tourists.id WHERE tourists.name IN ('Vincent', 'Vivian');","[['flying elephant', Timestamp('2013-08-06 05:35:51')], ['fun shops', Timestamp('2013-10-27 09:56:08')], ['fun games', Timestamp('2017-03-19 08:48:19')], ['parking', Timestamp('2007-09-17 10:12:45')]]",[['Error']],FALSE
142,SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'shopping',SELECT name  FROM tourist_attractions  WHERE feature_details LIKE '%parking%' OR feature_details LIKE '%shopping%';,"[['US museum'], ['impressions de France'], ['flying elephant'], ['cafe'], ['parking'], ['jungle cruise'], ['fun games'], ['exploration trial'], ['presidents hall']]",[['Error']],FALSE
143,SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id GROUP BY t1.customer_name ORDER BY SUM(CAST(t3.order_quantity AS integer)) DESC LIMIT 1,"SELECT customer_name  FROM (     SELECT customer_name, SUM(quantity) as total_quantity      FROM orders      JOIN customers ON orders.customer_id = customers.customer_id      GROUP BY customer_name      ORDER BY total_quantity DESC      LIMIT 1 ) AS subquery;",[['Clifford Pagac']],[['Error']],FALSE
144,"SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id GROUP BY t1.customer_name, t1.payment_method ORDER BY SUM(CAST(t3.order_quantity AS integer)) LIMIT 1",SELECT payment_method  FROM customers  WHERE customer_id = (     SELECT customer_id      FROM purchases      GROUP BY customer_id      ORDER BY SUM(quantity) ASC      LIMIT 1 );,[['Credit Card']],[['Error']],FALSE
145,"SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id GROUP BY t1.customer_name, t1.payment_method ORDER BY SUM(CAST(t3.order_quantity AS integer)) LIMIT 1","SELECT payment_method  FROM orders  WHERE customer_id = (     SELECT customer_id      FROM (         SELECT customer_id, SUM(quantity) as total_quantity          FROM orders          GROUP BY customer_id          ORDER BY total_quantity ASC          LIMIT 1     ) AS subquery );",[['Credit Card']],[['Error']],FALSE
146,SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte',SELECT name  FROM customers  WHERE id NOT IN (     SELECT customer_id      FROM orders      WHERE product_name = 'Latte' );,"[['Prof. Alexzander Hamill'], ['Tillman Ernser'], ['Prof. Ibrahim Bashirian'], ['Dr. Julia Wuckert MD'], ['Alexane Kilback'], ['Eunice Morar'], ['Prof. Reyes Berge II'], ['Devin Mills'], ['Mozell Morissette'], ['Miss Aliyah Witting'], ['Maudie Kertzmann'], ['Rodrick Heaney'], ['Kitty Padberg III']]",[['Error']],FALSE
147,SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Americano',"SELECT customer_name  FROM customers  WHERE customer_id IN (     SELECT customer_id      FROM orders      WHERE product_id IN (         SELECT product_id          FROM products          WHERE product_name IN ('Latte', 'Americano')     )     GROUP BY customer_id      HAVING COUNT(DISTINCT product_id) = 2 );",[['Clifford Pagac']],[['Error']],FALSE
148,SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  2 INTERSECT SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  <  2,SELECT DISTINCT artist_title  FROM artists  WHERE artist_id IN (     SELECT artist_id      FROM volumes      WHERE weeks_on_top > 2      INTERSECT      SELECT artist_id      FROM volumes      WHERE weeks_on_top < 2 );,[['Bergen 1996']],[['Error']],FALSE
149,SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.uk_vat_number  =  (SELECT max(uk_vat_number) FROM organizations) ORDER BY t2.date_contact_to ASC LIMIT 1,SELECT contact_person_last_name  FROM organizations  WHERE uk_vat_number = (SELECT MAX(uk_vat_number) FROM organizations) ORDER BY contact_date ASC LIMIT 1;,[['Jacobs']],[['Error']],FALSE
150,SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.uk_vat_number  =  (SELECT max(uk_vat_number) FROM organizations) ORDER BY t2.date_contact_to ASC LIMIT 1,SELECT individuals.last_name  FROM individuals  JOIN organizations ON individuals.organization_id = organizations.id  WHERE organizations.uk_vat_number = (SELECT MAX(uk_vat_number) FROM organizations)  ORDER BY individuals.contact_date ASC  LIMIT 1;,[['Jacobs']],[['Error']],FALSE
151,SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1,SELECT email  FROM party  WHERE service_count = (SELECT MAX(service_count) FROM party);,[['frida57@example.org']],[['Error']],FALSE
152,SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1,SELECT party_email  FROM party_services  GROUP BY party_email  ORDER BY COUNT(*) DESC  LIMIT 1;,[['frida57@example.org']],[['Error']],FALSE
153,"SELECT T1.statement_id, T2.statement_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id = T2.statement_id GROUP BY T1.statement_id, T2.statement_details ORDER BY count(*) DESC LIMIT 1","SELECT statement_id, statement_detail  FROM statements  WHERE statement_id IN (     SELECT statement_id      FROM account_statements      GROUP BY statement_id      ORDER BY COUNT(account_id) DESC      LIMIT 1 );","[[57, 'Open Project']]",[['Error']],FALSE
154,"SELECT T1.Area FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T2.year < 2010 GROUP BY T2.Appelation, T1.Area ORDER BY count(*) DESC LIMIT 1",SELECT area  FROM appelation  WHERE id = (     SELECT appelation_id      FROM wines      WHERE year < 2010      GROUP BY appelation_id      ORDER BY COUNT(*) DESC      LIMIT 1 ),[['North Coast']],[['Error']],FALSE
155,"SELECT T1.Area FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T2.year < 2010 GROUP BY T2.Appelation, T1.Area ORDER BY count(*) DESC LIMIT 1",SELECT area  FROM appelation  WHERE id = (     SELECT appelation_id      FROM wines      WHERE year < 2010      GROUP BY appelation_id      ORDER BY COUNT(*) DESC      LIMIT 1 );,[['North Coast']],[['Error']],FALSE
156,"SELECT T1.Color FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape GROUP BY T2.Grape, T1.Color ORDER BY AVG(Price) DESC LIMIT 1",SELECT grape.color  FROM grape  JOIN wine_product ON grape.id = wine_product.grape_id  GROUP BY grape.color  ORDER BY AVG(wine_product.price) DESC  LIMIT 1;,[['White']],[['Error']],FALSE
157,"SELECT T1.Color FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape GROUP BY T2.Grape, T1.Color ORDER BY AVG(Price) DESC LIMIT 1",SELECT grape.color  FROM grape  JOIN wine_product ON grape.id = wine_product.grape_id  GROUP BY grape.color  ORDER BY AVG(wine_product.price) DESC  LIMIT 1;,[['White']],[['Error']],FALSE
158,"select DISTINCT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation GROUP BY T1.County, T2.Appelation HAVING count(*) <= 3",SELECT country  FROM appellations  WHERE (SELECT COUNT(*) FROM wines WHERE wines.appellation_id = appellations.id) <= 3;,"[['Napa'], ['Sonoma'], ['Santa Barbara']]",[['Error']],FALSE
159,"select DISTINCT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation GROUP BY T1.County, T2.Appelation HAVING count(*) <= 3",SELECT country FROM appellations  WHERE wine_count <= 3;,"[['Napa'], ['Sonoma'], ['Santa Barbara']]",[['Error']],FALSE
160,SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE  =  T2.GRAPE WHERE T1.Color  =  'White' GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3,"SELECT winery, COUNT(*) as wine_count FROM wines WHERE color = 'white' GROUP BY winery ORDER BY wine_count DESC LIMIT 3;","[['Altamura'], ['Brander'], ['Capture']]",[['Error']],FALSE
161,SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE  =  T2.GRAPE WHERE T1.Color  =  'White' GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3,"SELECT winery, COUNT(*) as wine_count FROM wines WHERE grape_color = 'white' GROUP BY winery ORDER BY wine_count DESC LIMIT 3;","[['Altamura'], ['Brander'], ['Capture']]",[['Error']],FALSE
162,SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id WHERE T3.Name  =  'Ananthapuri Express' INTERSECT SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id WHERE T3.Name  =  'Guruvayur Express',"SELECT station_name  FROM stations  WHERE station_id IN (     SELECT station_id      FROM train_stations      WHERE train_id IN (         SELECT train_id          FROM trains          WHERE train_name IN ('Ananthapuri Express', 'Guruvayur Express')     ) ) GROUP BY station_name HAVING COUNT(DISTINCT train_id) = 2;",[['London Waterloo']],[['Error']],FALSE
163,SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1;,"SELECT city, COUNT(*) as customer_count FROM customers GROUP BY city ORDER BY customer_count DESC LIMIT 1;",[['South Richieport']],[['Error']],FALSE
164,"SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1","SELECT faculty.first_name, faculty.last_name FROM faculty JOIN (   SELECT faculty_id, COUNT(student_id) as student_count   FROM student_faculty   GROUP BY faculty_id   ORDER BY student_count DESC   LIMIT 1 ) AS most_students ON faculty.id = most_students.faculty_id;","[['David', 'Yarowsky']]",[['Error']],FALSE
165,SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' INTERSECT SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Kayaking',SELECT first_name  FROM faculty  WHERE activities LIKE '%Canoeing%' AND activities LIKE '%Kayaking%';,"[['Taylor'], ['Salzberg'], ['Jones'], ['Giuliano'], ['Wolff'], ['Beach'], ['Houlahan'], ['Smith'], ['Burzio'], ['Goodrich'], ['Yarowsky'], ['Goldman'], ['Frank'], ['Naiman'], ['Amir'], ['Cheng'], ['Hall'], ['Angelopoulou']]",[['Error']],FALSE
166,SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' INTERSECT SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Kayaking',"SELECT first_name  FROM faculty  WHERE id IN (     SELECT faculty_id      FROM faculty_sports      WHERE sport_name IN ('Canoeing', 'Kayaking')      GROUP BY faculty_id      HAVING COUNT(DISTINCT sport_name) = 2 );","[['Taylor'], ['Salzberg'], ['Jones'], ['Giuliano'], ['Wolff'], ['Beach'], ['Houlahan'], ['Smith'], ['Burzio'], ['Goodrich'], ['Yarowsky'], ['Goldman'], ['Frank'], ['Naiman'], ['Amir'], ['Cheng'], ['Hall'], ['Angelopoulou']]",[['Error']],FALSE
167,SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1,SELECT customer_id FROM orders GROUP BY customer_id ORDER BY COUNT(*) DESC LIMIT 1;,[[2]],[[15]],FALSE
168,"SELECT count(*) , T3.product_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id JOIN products AS T3 ON T2.product_id = T3.product_id GROUP BY T3.product_id","SELECT product_id, COUNT(*)  FROM orders  GROUP BY product_id;","[[2, 4], [2, 14], [2, 11], [1, 7], [3, 15], [1, 12], [2, 3], [1, 1], [1, 8]]",[['Error']],FALSE
169,"SELECT count(*) , T3.product_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id JOIN products AS T3 ON T2.product_id = T3.product_id GROUP BY T3.product_id","SELECT product_id, COUNT(order_id) as order_count FROM order_details GROUP BY product_id;","[[2, 4], [2, 14], [2, 11], [1, 7], [3, 15], [1, 12], [2, 3], [1, 1], [1, 8]]",[['Error']],FALSE
170,"SELECT T3.product_name , count(*) FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id JOIN products AS T3 ON T2.product_id = T3.product_id GROUP BY T3.product_id","SELECT product_name, COUNT(*)  FROM orders  GROUP BY product_name;","[['food', 2], ['music', 2], ['phone', 2], ['clothes', 1], ['music', 3], ['phone', 1], ['food', 2], ['food', 1], ['book', 1]]",[['Error']],FALSE
171,"SELECT T3.product_name , count(*) FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id JOIN products AS T3 ON T2.product_id = T3.product_id GROUP BY T3.product_id","SELECT product_name, COUNT(order_id) as order_count FROM products JOIN orders ON products.product_id = orders.product_id GROUP BY product_name;","[['food', 2], ['music', 2], ['phone', 2], ['clothes', 1], ['music', 3], ['phone', 1], ['food', 2], ['food', 1], ['book', 1]]",[['Error']],FALSE
172,SELECT T1.order_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id ORDER BY count(*) DESC LIMIT 1,SELECT order_id  FROM orders  ORDER BY item_count DESC  LIMIT 1;,[[15]],[['Error']],FALSE
173,SELECT T1.order_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id ORDER BY count(*) DESC LIMIT 1,SELECT order_id  FROM orders  ORDER BY item_count DESC  LIMIT 1;,[[15]],[['Error']],FALSE
174,SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id JOIN order_items AS T3 ON T2.order_id = T3.order_id JOIN products AS T4 ON T3.product_id = T4.product_id WHERE T4.product_name = 'food' GROUP BY T1.customer_id HAVING count(*) >= 1,SELECT customer_name  FROM customers  WHERE customer_id IN (     SELECT customer_id      FROM orders      WHERE product_name = 'food' );,"[['George'], ['Alberto'], ['Hadley'], ['Violet'], ['Devan']]",[['Error']],FALSE
175,SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id JOIN order_items AS T3 ON T2.order_id = T3.order_id JOIN products AS T4 ON T3.product_id = T4.product_id WHERE T4.product_name = 'food' GROUP BY T1.customer_id HAVING count(*) >= 1,SELECT DISTINCT customers.name  FROM customers  JOIN orders ON customers.id = orders.customer_id  JOIN order_items ON orders.id = order_items.order_id  JOIN products ON order_items.product_id = products.id  WHERE products.name = 'food';,"[['George'], ['Alberto'], ['Hadley'], ['Violet'], ['Devan']]",[['Error']],FALSE
176,SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id JOIN order_items AS T3 ON T2.order_id = T3.order_id JOIN products AS T4 ON T3.product_id = T4.product_id WHERE T3.order_item_status = 'Cancel' AND T4.product_name = 'food' GROUP BY T1.customer_id HAVING count(*) >= 1,SELECT customers.name  FROM customers  JOIN orders ON customers.id = orders.customer_id  JOIN order_items ON orders.id = order_items.order_id  WHERE order_items.product_name = 'food' AND order_items.status = 'Cancel';,"[['George'], ['Devan']]",[['Error']],FALSE
177,SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id JOIN order_items AS T3 ON T2.order_id = T3.order_id JOIN products AS T4 ON T3.product_id = T4.product_id WHERE T3.order_item_status = 'Cancel' AND T4.product_name = 'food' GROUP BY T1.customer_id HAVING count(*) >= 1,"SELECT customer_id, customer_name  FROM customers  WHERE customer_id IN (     SELECT customer_id      FROM orders      WHERE product_name = 'food' AND status = 'Cancel' );","[['George'], ['Devan']]",[['Error']],FALSE
178,"SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  2 UNION SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  1","SELECT id, name, gender  FROM architects  WHERE id IN (     SELECT architect_id      FROM buildings      WHERE type IN ('bridge', 'mill')      GROUP BY architect_id      HAVING COUNT(DISTINCT type) = 2 OR COUNT(type) = 1 AND MAX(type) = 'mill' );","[['2', 'Frank Gehry', 'male'], ['4', 'Mies Van Der Rohe', 'male'], ['3', 'Zaha Hadid', 'female']]",[['Error']],FALSE
179,"SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')","SELECT first_name, age  FROM students  WHERE pet = 'dog' AND pet != 'cat';","[['Tracy', 19], ['Tracy', 19]]",[['Error']],FALSE
180,"SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",SELECT first_name  FROM students  WHERE has_dog = TRUE AND has_cat = FALSE;,"[['Tracy', 19], ['Tracy', 19]]",[['Error']],FALSE
181,SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;,SELECT country  FROM car_manufacturers  WHERE continent = 'Europe'  GROUP BY country  HAVING COUNT(*) >= 3;,"[['france'], ['germany']]",[['Error']],FALSE
182,SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;,SELECT country_name  FROM countries  WHERE continent = 'Europe'  GROUP BY country_name  HAVING COUNT(manufacturer_id) >= 3;,"[['france'], ['germany']]",[['Error']],FALSE
183,SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';,SELECT model FROM cars WHERE weight < 3500 AND manufacturer != 'Ford Motor Company';,"[['amc'], ['plymouth']]",[['Error']],FALSE
184,"select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;","SELECT id, maker FROM car_makers GROUP BY id, maker HAVING COUNT(DISTINCT model) >= 2 AND COUNT(DISTINCT maker) > 3;","[[4, 'gm']]",[['Error']],FALSE
185,"SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;","SELECT maker_id, maker_name  FROM car_makers  WHERE (SELECT COUNT(DISTINCT model_id) FROM car_models WHERE car_models.maker_id = car_makers.maker_id) >= 2  AND (SELECT COUNT(car_id) FROM cars WHERE cars.maker_id = car_makers.maker_id) > 3;","[[4, 'gm']]",[['Error']],FALSE
186,"SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';","SELECT id, name  FROM countries  WHERE id IN (     SELECT country_id      FROM car_makers      GROUP BY country_id      HAVING COUNT(*) > 3 )  OR id IN (     SELECT country_id      FROM car_models      WHERE model = 'fiat' );","[[1, 'usa'], [4, 'japan'], [2, 'germany'], [5, 'italy']]",[['Error']],FALSE
187,"select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';","SELECT id, name  FROM countries  WHERE id IN (     SELECT country_id      FROM car_makers      GROUP BY country_id      HAVING COUNT(*) > 3 )  OR id IN (     SELECT country_id      FROM car_models      WHERE name = 'fiat' );","[[1, 'usa'], [4, 'japan'], [2, 'germany'], [5, 'italy']]",[['Error']],FALSE
188,"SELECT t2.""Museum_ID"", t1.""Name"" FROM ""museum"" AS t1 JOIN ""visit"" AS t2 ON t1.""Museum_ID"" = t2.""Museum_ID"" GROUP BY t2.""Museum_ID"", t1.""Name"" ORDER BY count(*) DESC LIMIT 1","SELECT museum_id, museum_name  FROM visits  GROUP BY museum_id, museum_name  ORDER BY COUNT(*) DESC  LIMIT 1;","[[2, 'Capital Plaza Museum']]",[['Error']],FALSE
189,"SELECT t1.""Name"" FROM ""visitor"" AS t1 JOIN ""visit"" AS t2 ON t1.""ID"" = t2.""visitor_ID"" JOIN ""museum"" AS t3 ON t3.""Museum_ID"" = t2.""Museum_ID"" WHERE t3.""Open_Year"" < '2009' INTERSECT SELECT t1.""Name"" FROM ""visitor"" AS t1 JOIN ""visit"" AS t2 ON t1.""ID"" = t2.""visitor_ID"" JOIN ""museum"" AS t3 ON t3.""Museum_ID"" = t2.""Museum_ID"" WHERE t3.""Open_Year"" > '2011';",SELECT visitor_name  FROM visitors  WHERE visitor_id IN (     SELECT visitor_id      FROM visits      WHERE museum_id IN (         SELECT museum_id          FROM museums          WHERE opening_year < 2009     )      AND visitor_id IN (         SELECT visitor_id          FROM visits          WHERE museum_id IN (             SELECT museum_id              FROM museums              WHERE opening_year > 2011         )     ) );,[['Fernando Gago']],[['Error']],FALSE
190,"SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10","SELECT id, name  FROM battles  WHERE total_killed > 10;","[[5, 'Battle of Messinopolis'], [6, 'Battle of Boruy'], [8, 'Siege of Constantinople']]",[['Error']],FALSE
191,"SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1","SELECT owner_id, last_name FROM owners JOIN treatments ON owners.owner_id = treatments.owner_id GROUP BY owners.owner_id, owners.last_name ORDER BY COUNT(treatments.treatment_id) DESC LIMIT 1;","[[14, 'Funk']]",[['Error']],FALSE
192,"SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1","SELECT owner_id, last_name  FROM owners  WHERE owner_id = (     SELECT owner_id      FROM (         SELECT owner_id, SUM(cost) as total_cost          FROM treatments          JOIN dogs ON treatments.dog_id = dogs.id          WHERE dogs.species = 'dog'          GROUP BY owner_id          ORDER BY total_cost DESC          LIMIT 1     ) as subquery );","[[14, 'Funk']]",[['Error']],FALSE
193,"SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1","SELECT owner_id, zip_code FROM (     SELECT owner_id, zip_code, SUM(amount_paid) as total_amount     FROM owners     JOIN payments ON owners.id = payments.owner_id     GROUP BY owner_id, zip_code ) AS subquery ORDER BY total_amount DESC LIMIT 1;","[[3, '02647']]",[['Error']],FALSE
194,"SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1","SELECT owner_id, zip_code  FROM owners  WHERE owner_id = (     SELECT owner_id      FROM (         SELECT owner_id, SUM(amount_spent) as total_spent          FROM dogs          GROUP BY owner_id          ORDER BY total_spent DESC          LIMIT 1     ) as subquery );","[[3, '02647']]",[['Error']],FALSE
195,"SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )","Assuming you have two tables: ""dogs"" with columns ""name"" and ""breed"", and ""treatments"" with columns ""dog_name"" and ""treatment_date"", the SQL query would look like this:  ```sql SELECT dogs.name, treatments.treatment_date FROM dogs JOIN treatments ON dogs.name = treatments.dog_name WHERE dogs.breed = (     SELECT breed     FROM dogs     GROUP BY breed     ORDER BY COUNT(*) ASC     LIMIT 1 ) ```  This query first identifies the rarest breed by counting the number of each breed in the ""dogs"" table and selecting the one with the smallest count. Then it joins the ""dogs"" and ""treatments"" tables to get the treatment dates for the dogs of the rarest breed.","[['Holden', Timestamp('2018-03-23 13:52:10')], ['Troy', Timestamp('2018-03-11 04:23:15')], ['Troy', Timestamp('2018-02-28 17:09:43')], ['Jesus', Timestamp('2018-03-16 10:27:36')], ['Troy', Timestamp('2018-03-04 20:33:43')]]",[['Error']],FALSE
196,"SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )","SELECT dogs.name, treatments.treatment_date FROM dogs JOIN treatments ON dogs.id = treatments.dog_id WHERE dogs.breed = (     SELECT breed     FROM dogs     GROUP BY breed     ORDER BY COUNT(*) ASC     LIMIT 1 )","[['Holden', Timestamp('2018-03-23 13:52:10')], ['Troy', Timestamp('2018-03-11 04:23:15')], ['Troy', Timestamp('2018-02-28 17:09:43')], ['Jesus', Timestamp('2018-03-16 10:27:36')], ['Troy', Timestamp('2018-03-04 20:33:43')]]",[['Error']],FALSE